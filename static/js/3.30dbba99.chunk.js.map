{"version":3,"sources":["Components/dialogs/dialogs.module.css","Components/dialogs/Messages/messages.module.css","Components/dialogs/Names/names.module.css","Components/dialogs/Messages/Messages.tsx","Components/dialogs/Names/Names.tsx","Components/dialogs/newMessageInput/DialogMessageForm.tsx","Components/dialogs/newMessageInput/NewMessageInputContainer.tsx","redux/selectors/DialogSelectors.ts","Components/dialogs/DialogContainer.tsx"],"names":["module","exports","Messages","React","memo","props","className","style","newMessage","newMessage__img","src","alt","newMessage__content","message","Names","dialogs__people_name","dialogs__people_name_img","dialogs__people_name_content","to","path","name","validationSchema","Yup","DialogMessageTextarea","max","required","DialogMessageForm","formik","useFormik","initialValues","onSubmit","values","resetForm","addMessage","undefined","FormControl","FormGroup","handleSubmit","Grid","container","direction","spacing","item","dialogs__messages_newMesssage_textarea","TextField","placeholder","label","multiline","rows","rowsMax","getFieldProps","onBlur","touched","errors","color","dialogs__messages_newMesssage_button","Button","type","NewMessageInput","dialogs__messages_newMesssage","NewMessageInputContainer","connect","getDialogPageSelector","createSelector","state","dialogsPage","dialogPage","Dialog","dialogs","dialogs__people","names","map","n","key","id","dialogs__messages","messages","m","DialogContainer","compose","authRedirectHOC"],"mappings":"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","file":"static/js/3.30dbba99.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__1LacB\",\"wrapper__header\":\"dialogs_wrapper__header__2SJHX\",\"dialogs__people\":\"dialogs_dialogs__people__1uaFk\",\"dialogs__messages\":\"dialogs_dialogs__messages__1tidq\",\"dialogs__messages_newMesssage\":\"dialogs_dialogs__messages_newMesssage__b5FW8\",\"dialogs__messages_newMesssage_textarea\":\"dialogs_dialogs__messages_newMesssage_textarea__1fPCD\",\"dialogs__messages_newMesssage_button\":\"dialogs_dialogs__messages_newMesssage_button__1mrcq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newMessage\":\"messages_newMessage__H-XRi\",\"newMessage__img\":\"messages_newMessage__img__2RyBM\",\"newMessage__content\":\"messages_newMessage__content__g6ttP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs__people_name\":\"names_dialogs__people_name__RNTJh\",\"dialogs__people_name_img\":\"names_dialogs__people_name_img__LSXv8\",\"dialogs__people_name_content\":\"names_dialogs__people_name_content__37Vw_\"};","import React from \"react\";\nimport style from './messages.module.css'\n\ntype PropsType = {\n    message: string | number\n}\n\nexport const Messages: React.FC<PropsType> = React.memo((props) => {\n\n    let defaultAvatarPhoto = `https://i.ibb.co/F8yML1z/image.png`\n\n    return <div className={style.newMessage}>\n        <div className={style.newMessage__img}>\n            <img src={defaultAvatarPhoto} alt={'avatarPhoto'}/>\n        </div>\n        <div className={style.newMessage__content}>\n            <span>{props.message}</span>\n        </div>\n    </div>\n})","import React from \"react\";\nimport style from './names.module.css'\nimport {NavLink} from \"react-router-dom\";\n\ntype PropsType = {\n    name: string,\n    path: string\n}\n\nexport const Names: React.FC<PropsType> = React.memo((props) => {\n    return <div className={style.dialogs__people_name}>\n        <div className={style.dialogs__people_name_img}>\n            <img src={'https://i.ibb.co/F8yML1z/image.png'} alt=\"\"/>\n        </div>\n        <div className={style.dialogs__people_name_content}>\n            <NavLink to={props.path}><span>{props.name}</span></NavLink>\n        </div>\n    </div>\n})","import React from \"react\";\r\nimport style from \"../dialogs.module.css\";\r\nimport {Button, FormControl, FormGroup, Grid, TextField} from \"@material-ui/core\";\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\n\r\ntype IDialogMessageForm = {\r\n    addMessage: (newMessage: string) => void\r\n}\r\n\r\n\r\nconst validationSchema = Yup.object({\r\n    DialogMessageTextarea: Yup.string()\r\n        .max(300, 'message should consists 300 char or less')\r\n        .required('you cannot create post without text')\r\n});\r\n\r\nexport const DialogMessageForm: React.FC<IDialogMessageForm> = React.memo((props) => {\r\n\r\n    const formik = useFormik({\r\n            initialValues: {\r\n                DialogMessageTextarea: \"\",\r\n            },\r\n            validationSchema,\r\n            onSubmit: (values, {resetForm}) => {\r\n                props.addMessage(values.DialogMessageTextarea)\r\n                resetForm({values: '' || undefined})\r\n            },\r\n        })\r\n    ;\r\n\r\n    const errorStyle = {\r\n        color: \"red\",\r\n    }\r\n    \r\n    return <>\r\n        <FormControl>\r\n            <FormGroup>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Grid container direction={'column'} spacing={2}>\r\n                        <Grid item>\r\n                            <div className={style.dialogs__messages_newMesssage_textarea}>\r\n                                <TextField placeholder={'enter your message...'}\r\n                                           name={'DialogMessageTextarea'}\r\n                                           label={'message field'}\r\n                                           multiline\r\n                                           rows={2}\r\n                                           rowsMax={4}\r\n                                           {...formik.getFieldProps('DialogMessageTextarea')}\r\n                                           onBlur={() => !formik.touched.DialogMessageTextarea}\r\n                                />\r\n                            </div>\r\n                            {formik.errors.DialogMessageTextarea && formik.touched.DialogMessageTextarea ?\r\n                                <div style={errorStyle}>{formik.errors.DialogMessageTextarea}</div> : null}\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <div className={style.dialogs__messages_newMesssage_button}>\r\n                                <Button color={'primary'} type={'submit'}>Send</Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </FormGroup>\r\n        </FormControl>\r\n    </>\r\n\r\n})","import {addMessage} from \"../../../redux/ActionCreators\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../redux/redux-store\";\r\nimport React from \"react\";\r\nimport style from \"../dialogs.module.css\";\r\nimport {DialogMessageForm} from \"./DialogMessageForm\";\r\n\r\ntype MapDispatchToProps = {\r\n    addMessage: (newMessage: string) => void\r\n}\r\n\r\ntype NewMessageInputType = {\r\n    addMessage: (newMessage: string) => void\r\n}\r\n\r\nexport const NewMessageInput: React.FC<NewMessageInputType> = React.memo((props) => {\r\n\r\n        return <div className={style.dialogs__messages_newMesssage}>\r\n            <DialogMessageForm addMessage={props.addMessage}/>\r\n        </div>\r\n    }\r\n)\r\n\r\n\r\nexport const NewMessageInputContainer = connect<{}, MapDispatchToProps, {}, StateType>(null, {addMessage})\r\n(NewMessageInput);","import {createSelector} from 'reselect'\r\nimport {StateType} from \"../redux-store\";\r\nimport {DialogsPageType} from \"../reducers/dialogsPage-reducer\";\r\n\r\ntype GetDialogPageType = (state: StateType) => DialogsPageType\r\n\r\n\r\n\r\n\r\n//dialogPage\r\nconst getDialogPage:GetDialogPageType = (state) => state.dialogsPage\r\n\r\nexport const getDialogPageSelector = createSelector(getDialogPage,(dialogPage) => {\r\n        return dialogPage\r\n})","import React, {ComponentType} from \"react\";\r\nimport style from './dialogs.module.css'\r\nimport {Messages} from \"./Messages/Messages\";\r\nimport {Names} from \"./Names/Names\";\r\nimport {NewMessageInputContainer} from \"./newMessageInput/NewMessageInputContainer\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {authRedirectHOC} from \"../../hoc/authRedirectHOC\";\r\nimport {compose} from \"redux\";\r\nimport {getDialogPageSelector} from \"../../redux/selectors/DialogSelectors\";\r\nimport {DialogsPageType} from \"../../redux/reducers/dialogsPage-reducer\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogPage: DialogsPageType\r\n}\r\n\r\ntype PropsType = MapStateToPropsType\r\n\r\nexport const Dialog = React.memo((props: PropsType) => {\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n                <div className={style.dialogs__people}>\r\n                    {props.dialogPage.names.map((n) => <Names key={n.id} name={n.name} path={n.path}/>)}\r\n                </div>\r\n                <div className={style.dialogs__messages}>\r\n                    {props.dialogPage.messages.map((m) => <Messages key={m.id} message={m.message}/>)}\r\n                    <NewMessageInputContainer/>\r\n                </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nconst mapStateToProps = (state: StateType): MapStateToPropsType => ({\r\n    dialogPage: getDialogPageSelector(state)\r\n})\r\n\r\n\r\nexport const DialogContainer = compose<ComponentType<{}>>(\r\n    authRedirectHOC,\r\n    (connect<MapStateToPropsType, {}, {}, StateType>(mapStateToProps)))(Dialog)\r\n"],"sourceRoot":""}