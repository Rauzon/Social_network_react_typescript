{"version":3,"sources":["Components/nav/nav.module.css","Components/profile/myPosts/myPost/myPost.module.css","Components/login/login.module.css","hoc/authRedirectHOC.tsx","Components/news/news.module.css","Components/settings/settings.module.css","Components/profile/profile.module.css","Components/profile/myPosts/myPosts.module.css","images/logo.png","serviceWorker.ts","Components/nav/sideBar/SidebarTitle.tsx","Components/nav/friendsBlock/FriendsBlock.tsx","Components/nav/Nav.tsx","Components/news/News.tsx","Components/settings/Settings.tsx","Components/profile/myPosts/myPost/MyPost.tsx","Components/profile/myPosts/newPost/ProfilePostForm.tsx","Components/profile/myPosts/newPost/NewPostContainer.tsx","Components/profile/myPosts/MyPosts.tsx","Components/profile/profileInfo/EditableStatus.tsx","Components/profile/profileInfo/ProfileInfo.tsx","Components/profile/Profile.tsx","redux/selectors/ProfileSelectors.ts","Components/profile/ProfileContainer.tsx","thunks/profileThunk.ts","Components/header/Header.tsx","thunks/authThunk.ts","redux/selectors/LoginSelectors.ts","redux/selectors/HeaderSelectors.ts","Components/header/HeaderContainer.tsx","Components/login/LoginForm.tsx","Components/login/Login.tsx","Components/common/SnackBar.tsx","hoc/withSuspenseHOC.tsx","App.tsx","thunks/appThunk.ts","redux/reducers/profilePage-reducer.ts","redux/reducers/dialogsPage-reducer.ts","redux/reducers/navPage-reducer.ts","redux/reducers/usersPage-reducer.ts","redux/reducers/auth-reducer.ts","redux/reducers/app-reducer.ts","redux/redux-store.ts","index.tsx","Components/profile/profileInfo/profileInfo.module.css","utils/errorHandlers.ts","Components/nav/friendsBlock/friendsBlock.module.css","API/API.ts","Components/login/loginForm.module.css","Components/header/header.module.css","redux/ActionCreators.ts","app.module.css","Components/profile/myPosts/newPost/newPost.module.css"],"names":["module","exports","mapStateForRedirect","state","isAuth","auth","authRedirectHOC","Component","connect","props","restProps","to","Boolean","window","location","hostname","match","SidebarTitle","React","memo","path","title","CssAccordion","withStyles","root","padding","Accordion","useStyles","makeStyles","theme","createStyles","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","contentBlock","contentBlockWrapper","contentBlockWrapperRoot","FriendsBlock","classes","className","style","MuiPaperRoot","AccordionSummary","expandIcon","aria-controls","id","Typography","AccordionDetails","component","friends","map","f","key","nav__friendsBlock_item","nav__friendsBlock_item_img","src","alt","nav__friendsBlock_item_name","pathToDialog","name","isOnline","nav__friendsBlock_item_onlineStatus","Nav","useSelector","s","nav","wrap__title","navPage","navTitles","t","nav__friendsBlock","News","content","Settings","MyPost","content__img","photo","content__text","message","validationSchema","Yup","textareaPost","max","ProfilePostForm","formik","useFormik","initialValues","onSubmit","values","resetForm","addPost","undefined","FormControl","FormGroup","handleSubmit","Grid","container","direction","spacing","item","content__textArea","TextField","placeholder","variant","multiline","rows","rowsMax","getFieldProps","errors","touched","color","content__button","Button","type","NewPost","NewPostContainer","MyPosts","content__posts","posts","p","EditableStatus","userId","useState","editeMode","setEditeMode","status","localStatus","setLocalStatus","onBlurHandler","useCallback","updateStatus","useEffect","value","onChange","e","currentTarget","onBlur","autoFocus","content__mainInfo_contactStatus_spanContent","onDoubleClick","ProfileInfo","contacts","userProfile","Object","keys","content__socialLinks","content__profileInfo","content__mainInfo","content__mainInfo_avatar","photos","large","content__mainInfo_contactStatus","content__description_fullName","fullName","content__description","content__description_aboutMe","aboutMe","content__description_searchJob","lookingForAJob","content__description_desriptionOfJob","lookingForAJobDescription","content__description_contacts","Profile","profilePage","isFetching","CircularProgress","display","position","top","left","bottom","right","margin","profileStatus","getProfilePageSelector","createSelector","profile","getUserIdSelector","ProfileContainer","this","params","authUserId","toString","history","push","setUserProfile","setStatusProfile","PureComponent","ProfileContainerWithURL","compose","withRouter","dispatch","setIsFetching","profileAPI","then","res","data","catch","err","serverErrorHandler","updateStatusProfile","Header","logOut","logOutProfile","header","header__wrapper","header__wrapper_img","logo","header__authBlock","header__authBlock_login","login","header__logOutBtn","onClick","getCaptchaThunk","dispath","authAPI","getCaptcha","setCaptchaValue","url","authProfileThunk","setAuth","resultCode","setAuthData","errorHandler","getIsAuthSelector","getServerErrorSelector","error","serverError","getCaptchaSelector","captcha","getLoginSelector","HeaderContainer","logout","email","required","password","min","LoginForm","rememberMe","label","InputProps","fieldErr","styleError","FormControlLabel","control","Checkbox","captcha__content","captcha__content_img","Login","login__content","login__content_inner_textHelper","login__content_inner","LoginContainer","postLogin","postLoginData","setAuthError","logIn","marginTop","SnackBar","app","useDispatch","handleClose","event","reason","setError","Snackbar","open","autoHideDuration","onClose","severity","Alert","elevation","withSuspenseHOC","Suspense","fallback","circleProgress","DialogContainer","lazy","default","UsersContainer","App","isInitialized","finally","initializedApp","app__wrapper","app__wrapper_content","render","initialState","uuid","names","messages","initialUsersState","users","totalUsersCount","pageSize","currentPage","isFollowingInProgress","initialAuthState","initialAppState","reducers","combineReducers","action","typeOfActionDispatch","ADD_POST","newPostValue","newPost","SET_USER_PROFILE","SET_IS_FETCHING","SET_STATUS_PROFILE","statusProfile","dialogsPage","ADD_MESSAGE","newMessage","usersPage","FOLLOW_TO_USER","u","followed","UNFOLLOW_TO_USER","SET_USERS","SET_TOTAL_USERS_COUNT","SET_CURRENT_PAGE","SET_FOLLOWING_IN_PROGRESS","isFollowingProgress","filter","SET_AUTH_DATA","copyState","authData","SET_AUTH_ERROR","SET_CAPTCHA_VALUE","INITIALIZED_APP","SET_ERROR","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunk","renderAppTree","ReactDOM","StrictMode","bind","document","getElementById","getState","subscribe","navigator","serviceWorker","ready","registration","unregister","console","length","instance","axios","create","withCredentials","baseURL","headers","userAPI","setUsers","get","unfollow","delete","follow","post","put","addMessage","setTotalUsersCount","setCurrentPage","setFollowingInProgress"],"mappings":"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","file":"static/js/main.32c0a54e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"nav_nav__32Dtx\",\"wrap__title\":\"nav_wrap__title__1fJvA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"myPost_content__1RSxM\",\"content__img\":\"myPost_content__img__ab0v1\",\"content__text\":\"myPost_content__text__2GZxT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login__content\":\"login_login__content__1Gnuf\",\"login__content_inner\":\"login_login__content_inner__LIZKO\",\"login__content_inner_textHelper\":\"login_login__content_inner_textHelper__aDKMn\"};","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {StateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateForRedirectType = {\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateForRedirect = (state: StateType): MapStateForRedirectType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function authRedirectHOC<HOCPropsType>(Component: ComponentType<HOCPropsType>) {\r\n\r\n    function authRedirectComponent(props: MapDispatchForRedirectType & MapStateForRedirectType) {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) {\r\n            return <Redirect to={'/login'}/>\r\n        }\r\n\r\n        return <Component {...restProps as HOCPropsType} />\r\n\r\n    }\r\n\r\n    return connect<MapStateForRedirectType, MapDispatchForRedirectType, HOCPropsType, StateType>(mapStateForRedirect)\r\n    (authRedirectComponent)\r\n\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"news_content__kswPX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"settings_content__3LtiA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"profile_content__1q3D6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content__posts\":\"myPosts_content__posts__2Gi5V\"};","module.exports = __webpack_public_path__ + \"static/media/logo.d243bdd9.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached profile has been fetched,\n              // but the previous service worker will still serve the older\n              // profile until all client tabs are closed.\n              console.log(\n                'New profile is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Profile is cached for offline use.\" message.\n              console.log('Profile is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('profile-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    path: string\r\n    title: string\r\n    key: string\r\n}\r\n\r\nexport const SidebarTitle: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    return <>\r\n        <NavLink to={props.path}>\r\n            <li>{props.title}</li>\r\n        </NavLink>\r\n    </>\r\n})","import React from \"react\";\r\nimport style from './friendsBlock.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport {AccordionDetails, AccordionSummary, createStyles, Typography} from \"@material-ui/core\";\r\nimport {makeStyles, withStyles, Theme} from \"@material-ui/core/styles\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport {FriendsNavType} from \"../../../redux/reducers/navPage-reducer\";\r\n\r\ntype PropsType = {\r\n    friends: FriendsNavType[]\r\n}\r\n\r\nconst CssAccordion = withStyles({\r\n    root: {\r\n        '& .MuiAccordionDetails-root': {\r\n            padding: '0px',\r\n        },\r\n    },\r\n})(Accordion);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            \"& .MuiAccordionDetails\": {\r\n                padding: '0px',\r\n            },\r\n        },\r\n        heading: {\r\n            fontSize: theme.typography.pxToRem(15),\r\n            fontWeight: theme.typography.fontWeightRegular,\r\n        },\r\n        contentBlock: {\r\n            width: '100%',\r\n        },\r\n        contentBlockWrapper: {\r\n            width: '100%',\r\n        },\r\n        contentBlockWrapperRoot: {\r\n            width: '100%',\r\n        },\r\n    }),\r\n);\r\n\r\nexport const FriendsBlock: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return <>\r\n        <CssAccordion className={`${style.MuiPaperRoot} ${style.contentBlockWrapperRoot}`}>\r\n            <AccordionSummary\r\n                expandIcon={<ExpandMoreIcon/>}\r\n                aria-controls=\"panel1a-content\"\r\n                id=\"panel1a-header\"\r\n            >\r\n                <Typography className={classes.heading}>Friends</Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails className={classes.contentBlockWrapper}>\r\n                <Typography component={'span'} className={classes.contentBlock}>\r\n                    {props.friends.map(f => <div key={f.id} className={style.nav__friendsBlock_item}>\r\n                            <div className={style.nav__friendsBlock_item_img}>\r\n                                <img src=\"https://i.ibb.co/F8yML1z/image.png\" alt=\"\"/>\r\n                            </div>\r\n                            <div className={style.nav__friendsBlock_item_name}>\r\n                                <NavLink to={f.pathToDialog}>{f.name}</NavLink>\r\n                            </div>\r\n                            {f.isOnline && <div className={style.nav__friendsBlock_item_onlineStatus}/>\r\n                            }\r\n                        </div>\r\n                    )}\r\n                </Typography>\r\n            </AccordionDetails>\r\n        </CssAccordion>\r\n    </>\r\n})","import React from \"react\";\r\nimport s from './nav.module.css';\r\nimport {SidebarTitle} from \"./sideBar/SidebarTitle\";\r\nimport {FriendsBlock} from \"./friendsBlock/FriendsBlock\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {NavPageType} from \"../../redux/reducers/navPage-reducer\";\r\n\r\ntype propsType = {\r\n    navPage: NavPageType\r\n}\r\n\r\nexport const Nav: React.FC<propsType> = React.memo((props) => {\r\n\r\n    const isAuth = useSelector<StateType, boolean>(state => state.auth.isAuth)\r\n\r\n    return <div className={s.nav}>\r\n        <div className={s.wrap__title}>\r\n            {props.navPage.navTitles.map((t) => <SidebarTitle key={t.id}\r\n                                                              title={t.title}\r\n                                                              path={t.path}/>)}\r\n        </div>\r\n        <div className={s.nav__friendsBlock}>\r\n            {isAuth && <>\r\n                <FriendsBlock friends={props.navPage.friends}/>\r\n            </>}\r\n        </div>\r\n    </div>\r\n})","import React from 'react';\r\nimport style from './news.module.css'\r\n\r\nexport const News= React.memo(() => {\r\n    return (\r\n        <div className={style.content}>\r\n           The page of news is being developed\r\n        </div>\r\n    )\r\n})","import React from 'react';\r\nimport style from './settings.module.css'\r\n\r\nexport const Settings= React.memo(() => {\r\n    return (\r\n        <div className={style.content}>\r\n           The page of settings is being developed\r\n        </div>\r\n    )\r\n})","import React from 'react';\r\nimport style from './myPost.module.css'\r\n\r\ntype propsType = {\r\n    message: string | number\r\n    photo: string | null | undefined\r\n}\r\n\r\n\r\nexport const MyPost: React.FC<propsType> = React.memo((props) => {\r\n\r\n    let defaultAvatarPhoto = `https://i.ibb.co/F8yML1z/image.png`\r\n\r\n    return (\r\n        <div className={style.content}>\r\n            <div className={style.content__img}>\r\n                <img src={(props.photo) ? props.photo : defaultAvatarPhoto} alt=\"\"/>\r\n            </div>\r\n            <div className={style.content__text}>\r\n                <span>{props.message}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from 'react';\r\nimport style from './newPost.module.css'\r\nimport {useFormik} from \"formik\";\r\nimport {FormControl, FormGroup, Grid, TextField, Button} from \"@material-ui/core\";\r\nimport * as Yup from \"yup\";\r\n\r\ninterface IProfilePostForm {\r\n    addPost: (newPostValue: string) => void\r\n}\r\n\r\nconst validationSchema = Yup.object({\r\n    textareaPost: Yup.string()\r\n        .max(300,'post should consists 300 char or less')\r\n});\r\n\r\n\r\nexport const ProfilePostForm: React.FC<IProfilePostForm> = React.memo((props) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            textareaPost: '',\r\n        },\r\n        validationSchema,\r\n        onSubmit: (values,{resetForm}) => {\r\n            if (values.textareaPost) {\r\n                props.addPost(values.textareaPost)\r\n            }\r\n            resetForm({values: '' || undefined})\r\n        },\r\n    });\r\n\r\n    const errorStype = {\r\n        color: \"red\",\r\n    }\r\n\r\n    return <>\r\n        <FormControl>\r\n            <FormGroup>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Grid container direction={\"column\"} spacing={3}>\r\n                        <Grid item>\r\n                            <div className={style.content__textArea}>\r\n                                <TextField placeholder={'enter some text...'}\r\n                                           name={'textareaPost'}\r\n                                           variant=\"outlined\"\r\n                                           multiline\r\n                                           rows={2}\r\n                                           rowsMax={4}\r\n                                           {...formik.getFieldProps('textareaPost')}/>\r\n                            </div>\r\n                            {formik.errors.textareaPost && formik.touched.textareaPost ?\r\n                                <div style={errorStype}>{formik.errors.textareaPost}</div> : null}\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <div className={style.content__button}>\r\n                                <Button type={'submit'} variant='contained'>PUBLISH</Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </FormGroup>\r\n        </FormControl>\r\n    </>\r\n})\r\n","import React from 'react';\r\nimport {addPost} from \"../../../../redux/ActionCreators\";\r\nimport {connect} from \"react-redux\";\r\nimport style from \"./newPost.module.css\";\r\nimport {ProfilePostForm} from \"./ProfilePostForm\";\r\n\r\ntype MapDispatchToProps = {\r\n    addPost: (value: string) => void\r\n}\r\n\r\ntype NewPostPropsType = {\r\n    addPost: (newPostValue: string) => void\r\n}\r\n\r\nexport const NewPost: React.FC<NewPostPropsType> = React.memo((props) => {\r\n\r\n    return (\r\n        <div className={style.content}>\r\n            <ProfilePostForm addPost={props.addPost}/>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport const NewPostContainer = connect<{}, MapDispatchToProps, {}, {}>(null, {addPost})(NewPost);\r\n","import React from \"react\";\r\nimport s from './myPosts.module.css'\r\nimport {MyPost} from \"./myPost/MyPost\";\r\nimport {NewPostContainer} from \"./newPost/NewPostContainer\";\r\nimport {ProfilePostsType} from \"../../../redux/reducers/profilePage-reducer\";\r\n\r\n\r\ntype propsType = {\r\n    posts: Array<ProfilePostsType>\r\n    photo: string | null | undefined\r\n}\r\n\r\nexport const MyPosts: React.FC<propsType> = React.memo((props) => {\r\n\r\n    return (\r\n        <div className={s.content__posts}>\r\n            <h4><span>Create a new post:</span></h4>\r\n            <NewPostContainer/>\r\n            {props.posts.map((p) => <MyPost message={p.message}\r\n                                            key={p.id}\r\n                                            photo={props.photo}/>)}\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useCallback, useEffect, useState} from \"react\";\r\nimport s from './profileInfo.module.css';\r\n\r\ntype EditebleStatusPropsType = {\r\n    status: string\r\n    updateStatus: (title: string) => void\r\n    userId: string\r\n}\r\n\r\n\r\nexport const EditableStatus: React.FC<EditebleStatusPropsType> = React.memo((props) => {\r\n\r\n    let userId = props.userId\r\n\r\n    if (!userId) {\r\n        userId = '7788'\r\n    }\r\n\r\n    const [editeMode, setEditeMode] = useState<boolean>(false)\r\n    const [localStatus, setLocalStatus] = useState<string>(props.status)\r\n\r\n    const onBlurHandler = useCallback(() => {\r\n        props.updateStatus(localStatus)\r\n        setEditeMode(false)\r\n    }, [localStatus])\r\n\r\n    useEffect(() => {\r\n        setLocalStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return <div>\r\n        <span><b>Status: </b></span>\r\n        {(editeMode && userId == '7788') ?\r\n            <div>\r\n                <input type=\"text\" value={localStatus} onChange={onChangeHandler} onBlur={onBlurHandler}\r\n                       autoFocus={true}/></div> :\r\n            <div className={s.content__mainInfo_contactStatus_spanContent}>\r\n                <span onDoubleClick={() => setEditeMode(true)}>{props.status}</span>\r\n            </div>}\r\n    </div>\r\n})","import React from \"react\";\r\nimport s from './profileInfo.module.css';\r\nimport {EditableStatus} from \"./EditableStatus\";\r\nimport style from \"../../nav/friendsBlock/friendsBlock.module.css\";\r\nimport {AccordionDetails, AccordionSummary, createStyles, Typography} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport {makeStyles, Theme, withStyles} from \"@material-ui/core/styles\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport {CommonDataProfileType, SocialContactsType} from \"../../../redux/reducers/profilePage-reducer\";\r\n\r\ntype PropsType = {\r\n    userProfile: CommonDataProfileType\r\n    status: string\r\n    updateStatus: (title: string) => void\r\n    userId: string\r\n}\r\n\r\nexport const ProfileInfo: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    let contacts: any\r\n    if (props.userProfile && props.userProfile.contacts) {\r\n        let keys = Object.keys(props.userProfile.contacts)\r\n        contacts = keys.map((key) => {\r\n            return (\r\n                <div className={s.content__socialLinks} key={key}>\r\n                    <span>{key}: {props.userProfile.contacts[key as keyof SocialContactsType]}</span>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    let defaultAvatarPhoto = `https://i.imgur.com/d8HZHxF.jpg`\r\n\r\n    const CssAccordion = withStyles({\r\n        root: {\r\n            '& .MuiAccordionDetails-root': {\r\n                padding: '0px',\r\n            },\r\n        },\r\n    })(Accordion);\r\n\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            root: {\r\n                width: '100%',\r\n                \"& .MuiAccordionDetails\": {\r\n                    padding: '0px',\r\n                },\r\n            },\r\n            heading: {\r\n                fontSize: theme.typography.pxToRem(15),\r\n                fontWeight: theme.typography.fontWeightRegular,\r\n            },\r\n            contentBlock: {\r\n                width: '100%',\r\n            },\r\n            contentBlockWrapper: {\r\n                width: '100%',\r\n            },\r\n            contentBlockWrapperRoot: {\r\n                width: '100%',\r\n            },\r\n        }),\r\n    );\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n    return <div className={s.content__profileInfo}>\r\n        <div className={s.content__mainInfo}>\r\n            <div className={s.content__mainInfo_avatar}>\r\n                <img src={(props.userProfile?.photos?.large) ? props.userProfile?.photos?.large :\r\n                    defaultAvatarPhoto}\r\n                     alt=\"\"/>\r\n            </div>\r\n            <div className={s.content__mainInfo_contactStatus}>\r\n                <div className={s.content__description_fullName}>\r\n                    <b>FullName</b>: {props.userProfile?.fullName}\r\n                </div>\r\n                <EditableStatus status={props.status} updateStatus={props.updateStatus} userId={props.userId}/>\r\n            </div>\r\n        </div>\r\n        <div className={s.content__description}>\r\n            <div className={s.content__description_aboutMe}>\r\n                <b>AboutMe</b>: {props.userProfile?.aboutMe}\r\n            </div>\r\n            <div className={s.content__description_searchJob}>\r\n                <b>Search a job:</b> {(props.userProfile?.lookingForAJob) ? \"Yes\" : \"No\"}\r\n            </div>\r\n            <div className={s.content__description_desriptionOfJob}>\r\n                <b>Description of job:</b> {(props.userProfile?.lookingForAJobDescription) ?\r\n                props.userProfile.lookingForAJobDescription :\r\n                \"No description\"}\r\n            </div>\r\n            <div className={s.content__description_contacts}>\r\n                <CssAccordion className={`${style.MuiPaperRoot} ${style.contentBlockWrapperRoot}`}>\r\n                    <AccordionSummary\r\n                        expandIcon={<ExpandMoreIcon/>}\r\n                        aria-controls=\"panel1a-content\"\r\n                        id=\"panel1a-header\"\r\n                    >\r\n                        <Typography className={classes.heading}><b>Contacts:</b></Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails className={classes.contentBlockWrapper}>\r\n                        <Typography className={classes.contentBlock} component={'span'}>\r\n                            {contacts}\r\n                        </Typography>\r\n                    </AccordionDetails>\r\n                </CssAccordion>\r\n            </div>\r\n        </div>\r\n    </div>\r\n})","import React, {CSSProperties} from 'react';\r\nimport style from './profile.module.css'\r\nimport {MyPosts} from \"./myPosts/MyPosts\";\r\nimport {ProfileInfo} from \"./profileInfo/ProfileInfo\";\r\nimport {ProfilePageType} from \"../../redux/reducers/profilePage-reducer\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    profilePage: ProfilePageType\r\n    updateStatus: (title: string) => void\r\n    userId: string\r\n}\r\n\r\nexport const Profile: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const circleProgressStyle: CSSProperties = {\r\n        display: 'block',\r\n        position: \"absolute\",\r\n        top: '0',\r\n        left: '0',\r\n        bottom: '0',\r\n        right: '0',\r\n        margin: 'auto',\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.content}>\r\n            {props.profilePage.isFetching ?\r\n                <CircularProgress style={circleProgressStyle}/> : <>\r\n                    <ProfileInfo userProfile={props.profilePage.userProfile}\r\n                                 status={props.profilePage.profileStatus}\r\n                                 updateStatus={props.updateStatus}\r\n                                 userId={props.userId}/>\r\n                    <MyPosts posts={props.profilePage.posts}\r\n                             photo={props.profilePage.userProfile.photos?.large}/>\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n\r\n})","import {createSelector} from 'reselect'\r\nimport {StateType} from \"../redux-store\";\r\nimport {ProfilePageType} from '../reducers/profilePage-reducer';\r\n\r\ntype GetProfilePageType = (state: StateType) => ProfilePageType\r\ntype GetUserIdType = (state: StateType) => number | null\r\n\r\n\r\n//profilePage\r\nconst getProfilePage: GetProfilePageType = (state) => state.profilePage\r\n\r\nexport const getProfilePageSelector = createSelector(getProfilePage, (profile) => {\r\n    return profile\r\n})\r\n\r\n\r\n//profilePage\r\nconst getUserId: GetUserIdType = (state) => state.auth.id\r\n\r\nexport const getUserIdSelector = createSelector(getUserId, (userId) => {\r\n    return userId\r\n})","import React, {ComponentType} from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {setUserProfileThunk, setUserStatusThunk, updateUserStatusThunk} from \"../../thunks/profileThunk\";\r\nimport {authRedirectHOC} from '../../hoc/authRedirectHOC';\r\nimport {compose} from 'redux';\r\nimport {ProfilePageType} from '../../redux/reducers/profilePage-reducer';\r\nimport {getProfilePageSelector, getUserIdSelector} from '../../redux/selectors/ProfileSelectors';\r\n\r\ntype MstpType = {\r\n    profilePage: ProfilePageType\r\n    authUserId: number | null\r\n}\r\n\r\ntype MdtpType = {\r\n    setUserProfile: (userId: string) => void\r\n    setStatusProfile: (userId: string) => void\r\n    updateStatus: (title: string) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & MdtpType & MstpType\r\n\r\nexport class ProfileContainer extends React.PureComponent<PropsType> {\r\n\r\n    componentDidMount(): void {\r\n\r\n        let userId = this.props.match.params.userId;\r\n\r\n        if (!userId) {\r\n            if(this.props.authUserId !== null){\r\n                userId = this.props.authUserId.toString();\r\n            } else {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n\r\n        this.props.setUserProfile(userId)\r\n         this.props.setStatusProfile(userId)\r\n    }\r\n\r\n\r\n    render(): React.ReactNode {\r\n        return (\r\n            <Profile profilePage={this.props.profilePage}\r\n                     updateStatus={this.props.updateStatus}\r\n                     userId={this.props.match.params.userId}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MstpType => {\r\n    return {\r\n        profilePage: getProfilePageSelector(state),\r\n        authUserId: getUserIdSelector(state),\r\n    }\r\n}\r\n\r\nexport const ProfileContainerWithURL = compose<ComponentType<{}>>(\r\n    authRedirectHOC,\r\n    withRouter,\r\n    connect<MstpType, MdtpType, {}, StateType>(mapStateToProps, {\r\n        setUserProfile: setUserProfileThunk,\r\n        setStatusProfile: setUserStatusThunk,\r\n        updateStatus: updateUserStatusThunk,\r\n    }))(ProfileContainer)\r\n\r\n","import {profileAPI} from \"../API/API\";\r\nimport {setIsFetching, setStatusProfile, setUserProfile} from \"../redux/ActionCreators\";\r\nimport {Dispatch} from \"redux\";\r\nimport {serverErrorHandler} from \"../utils/errorHandlers\";\r\n\r\n\r\nexport const setUserProfileThunk = (userId: string) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setIsFetching(true))\r\n        profileAPI.setUserProfile(userId)\r\n            .then(res => {\r\n                dispatch(setUserProfile(res.data))\r\n                dispatch(setIsFetching(false))\r\n            })\r\n            .catch(err => {\r\n                serverErrorHandler(err, dispatch)\r\n            })\r\n    }\r\n};\r\nexport const setUserStatusThunk = (userId: string) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setIsFetching(true))\r\n        profileAPI.setStatusProfile(userId)\r\n            .then(res => {\r\n                dispatch(setStatusProfile(res.data))\r\n            })\r\n            .catch(err => {\r\n                serverErrorHandler(err, dispatch)\r\n            })\r\n    }\r\n};\r\nexport const updateUserStatusThunk = (title: string) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.updateStatusProfile(title)\r\n            .then(() => {\r\n                dispatch(setStatusProfile(title))\r\n            })\r\n            .catch(err => {\r\n                serverErrorHandler(err, dispatch)\r\n            })\r\n    }\r\n};\r\n","import React, {useCallback} from 'react';\r\nimport style from './header.module.css'\r\nimport logo from '../../images/logo.png'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {Button} from '@material-ui/core';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\ntype PropsType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n    logOutProfile: () => void\r\n}\r\n\r\n\r\nexport const Header: React.FC<PropsType> = React.memo((props) => {\r\n\r\n        const logOut = useCallback(() => {\r\n            props.logOutProfile()\r\n        }, [props.logOutProfile])\r\n\r\n        return (\r\n            <div className={style.header}>\r\n                <div className={style.header__wrapper}>\r\n                    <div className={style.header__wrapper_img}>\r\n                        <img src={logo} alt=\"logo\"/>\r\n                    </div>\r\n                    <div className={style.header__authBlock}>\r\n                        {props.isAuth ?\r\n                            <div className={style.header__authBlock_login}>\r\n                                <span>{props.login}</span>\r\n                                <div className={style.header__logOutBtn}>\r\n                                    <Button variant=\"contained\" onClick={logOut}>\r\n                                        <ExitToAppIcon/>\r\n                                        LOG OUT\r\n                                    </Button>\r\n                                </div>\r\n                            </div> :\r\n                            <NavLink to={'/login'}>Sign In</NavLink>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n)","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../API/API\";\r\nimport {setAuthData, setAuthError, setCaptchaValue} from \"../redux/ActionCreators\";\r\nimport {errorHandler, serverErrorHandler} from \"../utils/errorHandlers\";\r\n\r\n\r\nexport const getCaptchaThunk = () => {\r\n\r\n    return (dispath: Dispatch) => {\r\n        authAPI.getCaptcha()\r\n            .then(res => {\r\n                    dispath(setCaptchaValue(res.data.url))\r\n                }\r\n            )\r\n    }\r\n};\r\n\r\nexport const authProfileThunk = () => {\r\n\r\n    return (dispath: Dispatch) => {\r\n        return authAPI.setAuth()\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispath(setAuthData(res.data.data))\r\n                } else {\r\n                    errorHandler(res, dispath)\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                serverErrorHandler(err, dispath)\r\n            })\r\n    }\r\n};\r\n\r\nexport const logInProfileThunk = (email: string, password: string, rememberMe: boolean, captcha?: string) => {\r\n\r\n    return (dispath: Dispatch<any>) => {\r\n        dispath(setAuthError(null))\r\n        authAPI.logIn(email, password, rememberMe, captcha)\r\n            .then(res => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispath(authProfileThunk())\r\n                    } else if (res.data.resultCode === 10) {\r\n                        dispath(getCaptchaThunk())\r\n                    } else {\r\n                        errorHandler(res, dispath)\r\n                    }\r\n                }\r\n            )\r\n            .catch(err => {\r\n                serverErrorHandler(err, dispath)\r\n            })\r\n\r\n    }\r\n};\r\n\r\nexport const logOutProfileThunk = () => {\r\n\r\n    return (dispath: Dispatch) => {\r\n        authAPI.logout()\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispath(setAuthData({email: null, login: null, id: null}))\r\n                } else {\r\n                    errorHandler(res, dispath)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                serverErrorHandler(err, dispath)\r\n            })\r\n\r\n    }\r\n}","import { createSelector } from 'reselect'\r\nimport {StateType} from \"../redux-store\";\r\n\r\ntype GetIsAuthType = (state: StateType) => boolean\r\ntype GetServerErrorType = (state: StateType) => string | null\r\ntype GetCaptchaType = (state: StateType) => any\r\n\r\n\r\n\r\n\r\n//isAuth\r\nconst getIsAuth:GetIsAuthType = (state) => state.auth.isAuth\r\n\r\nexport const getIsAuthSelector = createSelector(getIsAuth,(isAuth) => {\r\n        return isAuth\r\n})\r\n\r\n\r\n//serverError\r\nconst getServerError:GetServerErrorType = (state) => state.auth.error\r\n\r\nexport const getServerErrorSelector = createSelector(getServerError,(serverError) => {\r\n        return serverError\r\n})\r\n\r\n//getCaptcha\r\nconst getCaptcha:GetCaptchaType = (state) => state.auth.captcha\r\n\r\nexport const getCaptchaSelector = createSelector(getCaptcha,(captcha) => {\r\n        return captcha\r\n})","import { createSelector } from 'reselect'\r\nimport {StateType} from \"../redux-store\";\r\n\r\ntype GetLoginType = (state: StateType) => string | null\r\n\r\n\r\n\r\n\r\n//login\r\nconst getLogin:GetLoginType = (state) => state.auth.login\r\n\r\nexport const getLoginSelector = createSelector(getLogin,(login) => {\r\n        return login\r\n})\r\n\r\n\r\n","import React, {PureComponent} from 'react';\r\nimport {Header} from \"./Header\";\r\nimport {connect} from 'react-redux';\r\nimport {StateType} from '../../redux/redux-store';\r\nimport {logOutProfileThunk} from '../../thunks/authThunk';\r\nimport {getIsAuthSelector} from \"../../redux/selectors/LoginSelectors\";\r\nimport { getLoginSelector } from '../../redux/selectors/HeaderSelectors';\r\n\r\ntype MstpType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\ntype MdtpType = {\r\n    logOutProfile: () => void\r\n}\r\n\r\ntype PropsType = MstpType & MdtpType\r\n\r\nclass HeaderContainer extends PureComponent<PropsType> {\r\n\r\n    render(): React.ReactNode {\r\n        return <Header isAuth={this.props.isAuth}\r\n                       login={this.props.login}\r\n                       logOutProfile={this.props.logOutProfile}/>\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: StateType): MstpType => {\r\n    return {\r\n        isAuth: getIsAuthSelector(state),\r\n        login: getLoginSelector(state),\r\n    }\r\n}\r\n\r\n// ???\r\nexport default connect<MstpType, any , any, StateType>(mapStateToProps, {logOutProfile: logOutProfileThunk})(HeaderContainer)","import React, {useCallback} from \"react\";\r\nimport s from \"./loginForm.module.css\";\r\nimport classes from \"./loginForm.module.css\";\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, Grid, TextField,} from \"@material-ui/core\";\r\nimport * as Yup from 'yup';\r\nimport {useFormik} from \"formik\";\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\ninterface IFormData {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n    error: string | null\r\n    captcha?: string\r\n    getCaptcha: () => void\r\n}\r\n\r\ntype InitialValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\n\r\nconst validationSchema = Yup.object({\r\n    email: Yup.string()\r\n        .email('Enter a valid email')\r\n        .required('Email is required'),\r\n    password: Yup.string()\r\n        .min(8, 'Minimum 8 characters length')\r\n        .max(20, 'Max 20 characters length')\r\n        .required('Password is required'),\r\n\r\n});\r\n\r\n\r\nexport const LoginForm: React.FC<IFormData> = React.memo((props) => {\r\n\r\n    const {error, login, captcha} = props\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n            captcha: '',\r\n        },\r\n\r\n        validationSchema,\r\n        onSubmit: (values: InitialValuesType, {resetForm}) => {\r\n            login(values.email, values.password, values.rememberMe, values.captcha)\r\n            resetForm({values: '' || undefined})\r\n        },\r\n    });\r\n\r\n    const getCaptcha = useCallback(() => {\r\n        props.getCaptcha()\r\n    }, [props])\r\n\r\n\r\n    return <>\r\n        <FormControl>\r\n            <FormGroup>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Grid container direction={\"column\"} spacing={2}>\r\n                        <Grid item>\r\n                            <div>\r\n                                <TextField name={'email'}\r\n                                           label={'email'}\r\n                                           variant=\"outlined\"\r\n                                           {...formik.getFieldProps('email')}\r\n                                           InputProps={{\r\n                                               classes: {\r\n                                                   root: classes.fieldErr,\r\n                                               }\r\n                                           }}\r\n                                />\r\n                            </div>\r\n                            {formik.errors.email && formik.touched.email ? (\r\n                                <div className={s.styleError}>{formik.errors.email}</div>) : null}\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <div>\r\n                                <TextField name={'password'}\r\n                                           label={'password'}\r\n                                           type=\"password\"\r\n                                           variant=\"outlined\"\r\n                                           {...formik.getFieldProps('password')}/>\r\n                            </div>\r\n                            {!formik.errors.password && error ? <div className={s.styleError}>{error}</div> : null}\r\n                            {formik.errors.password && formik.touched.password ? (\r\n                                <div className={s.styleError}>{formik.errors.password}</div>) : null}\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <div>\r\n                                <FormControlLabel\r\n                                    label={'Remember me'}\r\n                                    control={<Checkbox\r\n                                        name={'rememberMe'}\r\n                                        {...formik.getFieldProps('rememberMe')}\r\n                                    />}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        {\r\n                            captcha && <Grid item>\r\n                                <div className={s.captcha__content}>\r\n                                    <img src={captcha} alt=\"\"/>\r\n                                    <div className={s.captcha__content_img}>\r\n                                        <RefreshIcon style={{fontSize: 30}} onClick={getCaptcha}/>\r\n                                    </div>\r\n                                </div>\r\n                                <TextField name={'captcha'}\r\n                                           label={'captcha'}\r\n                                           {...formik.getFieldProps('captcha')}/>\r\n                            </Grid>\r\n                        }\r\n                        <Grid item>\r\n                            <div>\r\n                                <Button type={'submit'} variant=\"contained\">LOG IN</Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </FormGroup>\r\n        </FormControl>\r\n    </>\r\n})\r\n","import React, {useCallback} from \"react\";\r\nimport {LoginForm} from \"./LoginForm\";\r\nimport s from './login.module.css';\r\nimport {connect} from \"react-redux\";\r\nimport {getCaptchaThunk, logInProfileThunk} from \"../../thunks/authThunk\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getIsAuthSelector, getServerErrorSelector, getCaptchaSelector} from \"../../redux/selectors/LoginSelectors\";\r\n\r\n//for Login\r\ntype LoginPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n    isAuth: boolean\r\n    error: string | null\r\n    captcha?: string\r\n    getCaptcha: () => void\r\n}\r\n\r\n//for LoginContainer\r\ntype MapDispatchToPropsType = {\r\n    postLoginData: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n    getCaptcha: () => void\r\n}\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    error: string | null\r\n    captcha?: string\r\n}\r\ntype LoginContainerPropsType = {}\r\ntype CommonLoginContainerType = MapStateToPropsType & MapDispatchToPropsType & LoginContainerPropsType\r\n\r\n\r\nexport const Login: React.FC<LoginPropsType> = React.memo((props) => {\r\n\r\n    const getCaptcha = useCallback(() => {\r\n        props.getCaptcha()\r\n    }, [props.getCaptcha])\r\n\r\n    return (\r\n        <div className={s.login__content}>\r\n            <div className={s.login__content_inner_textHelper}>\r\n                <h4>You can enter and test features using those data:</h4>\r\n                <span>login:</span><b> vladby86@gmail.com</b><br/>\r\n                <span>password:</span><b> HardPassword_2020</b>\r\n            </div>\r\n            {(props.isAuth) ? <Redirect to={'/profile'}/> :\r\n                <div className={s.login__content_inner}>\r\n                    <h1>Login</h1>\r\n                    <LoginForm login={props.login}\r\n                               error={props.error}\r\n                               captcha={props.captcha}\r\n                               getCaptcha={getCaptcha}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nconst LoginContainer: React.FC<CommonLoginContainerType> = React.memo((props) => {\r\n\r\n    const postLogin = useCallback((email: string, password: string, rememberMe: boolean, captcha: string) => {\r\n        props.postLoginData(email, password, rememberMe, captcha)\r\n    }, [props])\r\n\r\n    return <Login login={postLogin}\r\n                  isAuth={props.isAuth}\r\n                  error={props.error}\r\n                  captcha={props.captcha}\r\n                  getCaptcha={props.getCaptcha}/>\r\n})\r\n\r\n\r\nconst mapStateToProps = (state: StateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: getIsAuthSelector(state),\r\n        error: getServerErrorSelector(state),\r\n        captcha: getCaptchaSelector(state),\r\n    }\r\n}\r\n\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, LoginContainerPropsType, StateType>(mapStateToProps, {\r\n    postLoginData: logInProfileThunk,\r\n    getCaptcha: getCaptchaThunk,\r\n})(LoginContainer)\r\n","import React from \"react\";\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {setError} from \"../../redux/ActionCreators\";\r\n\r\ntype SnackBarPropsType = {}\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nexport const SnackBar: React.FC<SnackBarPropsType> = (props) => {\r\n\r\n    const error = useSelector<StateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        dispatch(setError(null));\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\">\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}","import React from \"react\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport s from \"../app.module.css\";\r\n\r\n\r\nexport function withSuspenseHOC(Component: any) {\r\n    return <React.Suspense fallback={<CircularProgress className={s.circleProgress}/>}>\r\n        < Component/>\r\n    </React.Suspense>\r\n}","import React, {useEffect} from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport s from './app.module.css'\r\nimport {Nav} from './Components/nav/Nav';\r\nimport {News} from \"./Components/news/News\";\r\nimport {Settings} from './Components/settings/Settings';\r\nimport {ActionCreatorsType} from \"./redux/ActionCreators\";\r\nimport {ProfileContainerWithURL} from \"./Components/profile/ProfileContainer\";\r\nimport HeaderContainer from \"./Components/header/HeaderContainer\";\r\nimport LoginContainer from \"./Components/login/Login\";\r\nimport {initializedAppThunk} from './thunks/appThunk';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StateType} from \"./redux/redux-store\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport {SnackBar} from \"./Components/common/SnackBar\";\r\nimport {withSuspenseHOC} from \"./hoc/withSuspenseHOC\";\r\n\r\ntype propsType = {\r\n    state: StateType\r\n    dispatch: (action: ActionCreatorsType) => void\r\n}\r\n\r\nconst DialogContainer = React.lazy(() => import('./Components/dialogs/DialogContainer')\r\n    .then(({DialogContainer}) => ({default: DialogContainer})));\r\nconst UsersContainer = React.lazy(() => import('./Components/users/UsersContainer'));\r\n\r\nconst App: React.FC<propsType> = React.memo((props) => {\r\n\r\n    const isInitialized = useSelector<StateType, boolean>(state => state.app.isInitialized);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(initializedAppThunk())\r\n    }, []);\r\n\r\n\r\n    if (!isInitialized) {\r\n        return <CircularProgress className={s.circleProgress}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.app__wrapper}>\r\n            <HeaderContainer/>\r\n            <Nav navPage={props.state.navPage}/>\r\n            <div className={s.app__wrapper_content}>\r\n                <Route path={'/profile/:userId?'} render={() => <ProfileContainerWithURL/>}/>\r\n                <Route path={'/dialogs'} render={() => withSuspenseHOC(DialogContainer)}/>\r\n                <Route path={'/users'} render={() => withSuspenseHOC(UsersContainer)}/>\r\n                <Route path={'/news'} render={() => <News/>}/>\r\n                <Route path={'/settings'} render={() => <Settings/>}/>\r\n                <Route path={'/login'} render={() => <LoginContainer/>}/>\r\n                <SnackBar/>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n","import {authProfileThunk} from \"./authThunk\";\r\nimport {initializedApp} from \"../redux/ActionCreators\";\r\n\r\n\r\nexport const initializedAppThunk: any = () => {\r\n\r\n    return (dispath: any) => {\r\n        const promise = dispath(authProfileThunk())\r\n        promise.then(() => {\r\n            return\r\n        })\r\n            .finally(() => {\r\n                dispath(initializedApp())\r\n            })\r\n    }\r\n};\r\n\r\n","import {ActionCreatorsType, typeOfActionDispatch} from \"../ActionCreators\";\r\nimport {v4 as uuid} from 'uuid';\r\n\r\nexport type ProfilePostsType = {\r\n    id: string,\r\n    message: string\r\n}\r\n\r\nexport type SocialContactsType = {\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    github: string\r\n    youtube: string\r\n    mainLink: string\r\n\r\n}\r\n\r\nexport type PhotoUserType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\n\r\nexport type CommonDataProfileType = {\r\n    aboutMe: string | null\r\n    contacts: SocialContactsType\r\n    fullName: string | null\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    photos: PhotoUserType | null\r\n    userId: number\r\n}\r\n\r\nexport type ProfilePageType = typeof initialState\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {id: uuid(), message: \"Hey girls\"},\r\n        {id: uuid(), message: \"Hey guys\"}\r\n    ] as Array<ProfilePostsType>,\r\n    userProfile: {} as CommonDataProfileType,\r\n    isFetching: false,\r\n    profileStatus: '',\r\n};\r\n\r\n\r\nexport const profilePageReducer = (state:ProfilePageType = initialState, action:ActionCreatorsType):ProfilePageType => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.ADD_POST:\r\n            let newPostValue = action.value\r\n            let newPost = {id: uuid(), message: newPostValue};\r\n\r\n            state = {...state, posts: [...state.posts, newPost]};\r\n            return state;\r\n        case typeOfActionDispatch.SET_USER_PROFILE:\r\n            return {...state, userProfile: action.userProfile};\r\n        case typeOfActionDispatch.SET_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching};\r\n\r\n        case typeOfActionDispatch.SET_STATUS_PROFILE:\r\n            return {...state, profileStatus: action.statusProfile};\r\n\r\n        default:\r\n            return state\r\n    }\r\n};","import {ActionCreatorsType, typeOfActionDispatch} from \"../ActionCreators\";\r\nimport {v4 as uuid} from 'uuid';\r\n\r\n\r\nexport type DialogsNamesType = {\r\n    id: string,\r\n    name: string,\r\n    path: string\r\n}\r\n\r\nexport type DialogsMessagesType = {\r\n    id: string,\r\n    message: string\r\n}\r\n\r\nexport type DialogsPageType = typeof initialState\r\n\r\nconst initialState = {\r\n    names: [\r\n        {id: uuid(), name: 'Marat', path: '/dialogs/1'},\r\n        {id: uuid(), name: 'Anton', path: '/dialogs/2'},\r\n        {id: uuid(), name: 'Arkasha', path: '/dialogs/3'},\r\n        {id: uuid(), name: 'Tolik', path: '/dialogs/4'},\r\n    ] as DialogsNamesType[],\r\n    messages: [\r\n        {id: uuid(), message: 'Hey man!'},\r\n        {id: uuid(), message: 'How is it going?'},\r\n        {id: uuid(), message: 'You forgot about my birthday(('},\r\n        {id: uuid(), message: 'I want to break up with you, sorry'},\r\n    ] as DialogsMessagesType[]\r\n};\r\n\r\nexport const dialogsPageReducer = (state: DialogsPageType = initialState, action: ActionCreatorsType): DialogsPageType => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.ADD_MESSAGE:\r\n            let message = action.message;\r\n            let newMessage = {id: uuid(), message};\r\n            state = {...state, messages: [...state.messages, newMessage]};\r\n            return state;\r\n\r\n        default:\r\n            return state\r\n    }\r\n};","import {ActionCreatorsType} from \"../ActionCreators\";\r\nimport {v4 as id} from 'uuid';\r\n\r\n\r\nexport type NavTitlesType = {\r\n    id: string\r\n    title: string\r\n    path: string\r\n}\r\n\r\nexport type FriendsNavType = {\r\n    id: string\r\n    name: string\r\n    pathToDialog: string\r\n    isOnline: boolean\r\n}\r\n\r\nexport type NavPageType = typeof initialState\r\n\r\n\r\nconst initialState = {\r\n    navTitles: [\r\n        {id: id(), title: 'Profile', path: '/profile'},\r\n        {id: id(), title: 'Dialogs', path: '/dialogs'},\r\n        {id: id(), title: 'Users', path: '/users'},\r\n        {id: id(), title: 'News', path: '/news'},\r\n        {id: id(), title: 'Settings', path: '/settings'}\r\n    ] as NavTitlesType[],\r\n    friends: [\r\n        {id: id(), name: 'Marat', pathToDialog: '/dialogs/1', isOnline: true},\r\n        {id: id(), name: 'Anton', pathToDialog: '/dialogs/2', isOnline: false},\r\n        {id: id(), name: 'Arkasha', pathToDialog: '/dialogs/3', isOnline: true},\r\n        {id: id(), name: 'Tolik', pathToDialog: '/dialogs/4', isOnline: false}\r\n    ] as FriendsNavType[]\r\n};\r\n\r\nexport const navPageReducer = (state:NavPageType = initialState, action:ActionCreatorsType):NavPageType => {\r\n    return {...state}\r\n}","import {ActionCreatorsType, typeOfActionDispatch} from \"../ActionCreators\";\r\nimport {PhotoUserType} from \"./profilePage-reducer\";\r\n\r\n\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string | null\r\n    photos: PhotoUserType\r\n    status: string | null\r\n    followed: boolean\r\n}\r\n\r\nexport type UsersStateType = typeof initialUsersState\r\n\r\nconst initialUsersState = {\r\n    users: [] as UserType[],\r\n    totalUsersCount: 0,\r\n    pageSize: 100,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    isFollowingInProgress: [] as number[],\r\n};\r\n\r\nexport const usersReducer = (state:UsersStateType = initialUsersState, action:ActionCreatorsType): UsersStateType => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.FOLLOW_TO_USER:\r\n            return {...state, users: state.users.map(u => (u.id === action.userId) ? {...u, followed: true} : u)};\r\n\r\n        case typeOfActionDispatch.UNFOLLOW_TO_USER:\r\n            return {...state, users: state.users.map(u => (u.id === action.userId) ? {...u, followed: false} : u)};\r\n\r\n        case typeOfActionDispatch.SET_USERS:\r\n            return {...state, users: [...action.users]};\r\n\r\n        case typeOfActionDispatch.SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.totalUsersCount};\r\n\r\n        case typeOfActionDispatch.SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage};\r\n\r\n        case typeOfActionDispatch.SET_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching};\r\n\r\n        case typeOfActionDispatch.SET_FOLLOWING_IN_PROGRESS:\r\n            return {\r\n                ...state, isFollowingInProgress: action.isFollowingProgress ?\r\n                    [...state.isFollowingInProgress, action.userId] :\r\n                    [...state.isFollowingInProgress.filter(id => id !== action.userId)]\r\n            };\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import {ActionCreatorsType, typeOfActionDispatch} from \"../ActionCreators\"\r\n\r\n\r\n//typization for reducer\r\nexport type AuthDataType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    captcha?: string\r\n}\r\n\r\nexport interface IAuthData extends AuthDataType{\r\n    isAuth: boolean\r\n    error: string | null\r\n}\r\n\r\nconst initialAuthState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    captcha: '',\r\n    isAuth: false,\r\n    error: null,\r\n};\r\n\r\nexport const authReducer = (state:IAuthData = initialAuthState, action: ActionCreatorsType):IAuthData => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.SET_AUTH_DATA:\r\n\r\n            let copyState = {...state, ...action.authData}\r\n            let isAuth = (copyState.login) ? true : false\r\n            return {...copyState, isAuth}\r\n\r\n        case typeOfActionDispatch.SET_AUTH_ERROR:\r\n\r\n            return {...state, error: (action.error) ? action.error : null}\r\n\r\n        case typeOfActionDispatch.SET_CAPTCHA_VALUE:\r\n            return {...state, captcha: action.captcha}\r\n\r\n        default:\r\n            return state\r\n    }\r\n};","import {ActionCreatorsType, typeOfActionDispatch} from \"../ActionCreators\"\r\n\r\n\r\nexport type InitialAppStateType = {\r\n    isInitialized: boolean,\r\n    error: null | string,\r\n}\r\n\r\nconst initialAppState = {\r\n    isInitialized: false,\r\n    error: null,\r\n}\r\n\r\nexport const appReducer = (state: InitialAppStateType = initialAppState, action: ActionCreatorsType): InitialAppStateType => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.INITIALIZED_APP:\r\n            return {...state, isInitialized: true};\r\n        case typeOfActionDispatch.SET_ERROR:\r\n            return {...state, error: action.error};\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore, compose} from \"redux\";\r\nimport {profilePageReducer, ProfilePageType} from \"./reducers/profilePage-reducer\";\r\nimport {dialogsPageReducer, DialogsPageType} from \"./reducers/dialogsPage-reducer\";\r\nimport {navPageReducer, NavPageType} from \"./reducers/navPage-reducer\";\r\nimport {usersReducer, UsersStateType} from \"./reducers/usersPage-reducer\";\r\nimport {authReducer, IAuthData} from \"./reducers/auth-reducer\";\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer, InitialAppStateType} from \"./reducers/app-reducer\";\r\n\r\n\r\nexport type StateType = {\r\n    profilePage: ProfilePageType\r\n    dialogsPage: DialogsPageType\r\n    navPage: NavPageType\r\n    usersPage: UsersStateType\r\n    auth: IAuthData\r\n    app: InitialAppStateType\r\n}\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profilePageReducer,\r\n    dialogsPage: dialogsPageReducer,\r\n    navPage: navPageReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n});\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(reducers, composeEnhancers(\r\n    applyMiddleware(thunk)\r\n));\r\n\r\n// export let store = createStore(reducers, applyMiddleware(thunk))\r\n","import React from 'react';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport ReactDOM from \"react-dom\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport {store, StateType} from \"./redux/redux-store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nexport type renderAppTreeType = (state: StateType) => void\r\n\r\n\r\nexport const renderAppTree: renderAppTreeType = (state: StateType) => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <HashRouter>\r\n                <Provider store={store}>\r\n                    <App state={state}\r\n                         dispatch={store.dispatch.bind(store)}/>\r\n                </Provider>\r\n            </HashRouter>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n};\r\n\r\nrenderAppTree(store.getState());\r\n\r\nstore.subscribe(() => renderAppTree(store.getState()));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content__profileInfo\":\"profileInfo_content__profileInfo__P8qcm\",\"content__mainInfo\":\"profileInfo_content__mainInfo__10Oib\",\"content__mainInfo_avatar\":\"profileInfo_content__mainInfo_avatar__1toRH\",\"content__mainInfo_contactStatus\":\"profileInfo_content__mainInfo_contactStatus__s_GZD\",\"content__mainInfo_contactStatus_spanContent\":\"profileInfo_content__mainInfo_contactStatus_spanContent__3l0nE\",\"content__description\":\"profileInfo_content__description__2dMvU\",\"content__description_aboutMe\":\"profileInfo_content__description_aboutMe__21nxh\",\"content__description_contacts\":\"profileInfo_content__description_contacts__1kNa-\",\"content__description_fullName\":\"profileInfo_content__description_fullName__3yYXC\",\"content__description_searchJob\":\"profileInfo_content__description_searchJob__1LMz1\",\"content__description_desriptionOfJob\":\"profileInfo_content__description_desriptionOfJob__2lpvY\",\"content__socialLinks\":\"profileInfo_content__socialLinks__BbwaC\"};","import {setError} from \"../redux/ActionCreators\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const serverErrorHandler = (err: any, dispath: Dispatch<ReturnType<typeof setError>>) => {\r\n    if (err.message) {\r\n        dispath(setError(err.message))\r\n    } else {\r\n        dispath(setError('undefined network error'))\r\n    }\r\n};\r\n\r\nexport const errorHandler = (res: any, dispath: Dispatch<ReturnType<typeof setError>>) => {\r\n    if (res.data.messages.length) {\r\n        dispath(setError(res.data.messages[0]))\r\n    } else {\r\n        dispath(setError(\"some error\"))\r\n    }\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav__friendsBlock_item\":\"friendsBlock_nav__friendsBlock_item__22hEe\",\"nav__friendsBlock_item_img\":\"friendsBlock_nav__friendsBlock_item_img__fQY5A\",\"nav__friendsBlock_item_name\":\"friendsBlock_nav__friendsBlock_item_name__1TGRU\",\"nav__friendsBlock_item_onlineStatus\":\"friendsBlock_nav__friendsBlock_item_onlineStatus__QYJgV\"};","import axios from 'axios';\r\nimport {UserType} from \"../redux/reducers/usersPage-reducer\";\r\nimport {CommonDataProfileType} from \"../redux/reducers/profilePage-reducer\";\r\nimport {AuthDataType} from \"../redux/reducers/auth-reducer\";\r\n\r\n\r\n\r\n//for getting users for UsersPage\r\nexport type CommonDataUsersType<D = {}> = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: D\r\n}\r\n\r\n\r\nexport type CommonResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    fieldsErrors: string[]\r\n    data: D\r\n}\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": '959808d3-8efe-42bd-88eb-3693675e6c98'\r\n    }\r\n})\r\n\r\n\r\nexport const userAPI = {\r\n    setUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<CommonDataUsersType<UserType[]>>(`users?page=${currentPage}&count=${pageSize}`)\r\n    },\r\n    unfollow(userId:number) {\r\n        return instance.delete<CommonResponseType<{}>>(`follow/${userId}`)\r\n    },\r\n    follow(userId:number) {\r\n        return instance.post<CommonResponseType<{}>>(`follow/${userId}`)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    setAuth() {\r\n        return instance.get<CommonResponseType<AuthDataType>>('auth/me')\r\n    },\r\n    logIn(email:string, password: string, rememberMe:boolean, captcha?: string) {\r\n        return instance.post<CommonResponseType<{userId: number}>>('auth/login', {email, password, rememberMe, captcha})\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonResponseType<{}>>('auth/login')\r\n    },\r\n    getCaptcha(){\r\n        return instance.get<{url: string}>(`/security/get-captcha-url`)\r\n    },\r\n\r\n}\r\n\r\nexport const profileAPI = {\r\n\r\n    setUserProfile(userId:string) {\r\n        return instance.get<CommonDataProfileType>(`profile/${userId}`)\r\n    },\r\n    setStatusProfile(userId:string) {\r\n        return instance.get<string>(`profile/status/${userId}`)\r\n    },\r\n    updateStatusProfile(status:string) {\r\n        return instance.put<string>(`profile/status`, {status})\r\n    },\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"captcha__content\":\"loginForm_captcha__content__3Pg_c\",\"captcha__content_img\":\"loginForm_captcha__content_img__2D3af\",\"styleError\":\"loginForm_styleError__rOP6O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__28bqR\",\"header__wrapper\":\"header_header__wrapper__1rCLi\",\"header__wrapper_img\":\"header_header__wrapper_img__3B4XV\",\"header__authBlock\":\"header_header__authBlock__3SaVn\",\"header__authBlock_login\":\"header_header__authBlock_login__3iRv5\",\"header__logOutBtn\":\"header_header__logOutBtn__1lZF5\"};","import {AuthDataType} from \"./reducers/auth-reducer\";\r\nimport {UserType} from \"./reducers/usersPage-reducer\";\r\nimport {CommonDataProfileType} from \"./reducers/profilePage-reducer\";\r\n\r\nexport enum typeOfActionDispatch {\r\n    ADD_MESSAGE = \"ADD_MESSAGE\",\r\n    ADD_POST = \"ADD_POST\",\r\n    UPDATE_POST = \"UPDATE_POST\",\r\n    FOLLOW_TO_USER = \"FOLLOW_TO_USER\",\r\n    UNFOLLOW_TO_USER = \"UNFOLLOW_TO_USER\",\r\n    SET_USERS = \"SET_USERS\",\r\n    SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\",\r\n    SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\",\r\n    SET_IS_FETCHING = \"SET_IS_FETCHING\",\r\n    SET_USER_PROFILE = \"SET_USER_PROFILE\",\r\n    SET_AUTH_DATA = \"SET_AUTH_DATA\",\r\n    SET_FOLLOWING_IN_PROGRESS = \"SET_FOLLOWING_IN_PROGRESS\",\r\n    SET_STATUS_PROFILE = \"SET_STATUS_PROFILE\",\r\n    SET_AUTH_ERROR = \"SET_AUTH_ERROR\",\r\n    SET_CAPTCHA_VALUE = \"SET_CAPTCHA_VALUE\",\r\n    INITIALIZED_APP = \"INITIALIZED_APP\",\r\n    SET_ERROR = \"SET_ERROR\",\r\n}\r\n\r\nexport type ActionCreatorsType = ReturnType<typeof addPost> |\r\n    ReturnType<typeof addMessage> |\r\n    ReturnType<typeof follow> |\r\n    ReturnType<typeof unfollow> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setTotalUsersCount> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setIsFetching> |\r\n    ReturnType<typeof setUserProfile> |\r\n    ReturnType<typeof setAuthData> |\r\n    ReturnType<typeof setFollowingInProgress> |\r\n    ReturnType<typeof setStatusProfile> |\r\n    ReturnType<typeof setAuthError> |\r\n    ReturnType<typeof setCaptchaValue> |\r\n    ReturnType<typeof initializedApp> |\r\n    ReturnType<typeof setError>\r\n\r\n//actionCreators\r\nexport const addPost = (value: string) => {\r\n    return {\r\n        type: typeOfActionDispatch.ADD_POST,\r\n        value\r\n    } as const\r\n};\r\nexport const addMessage = (newMessage: string) => {\r\n    return (\r\n        {type: typeOfActionDispatch.ADD_MESSAGE, message: newMessage}\r\n    ) as const\r\n};\r\nexport const follow = (userId: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.FOLLOW_TO_USER, userId}\r\n    ) as const\r\n};\r\nexport const unfollow = (userId: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.UNFOLLOW_TO_USER, userId}\r\n    ) as const\r\n};\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_USERS, users}\r\n    ) as const\r\n};\r\nexport const setTotalUsersCount = (totalUsersCount: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_TOTAL_USERS_COUNT, totalUsersCount}\r\n    ) as const\r\n};\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_CURRENT_PAGE, currentPage}\r\n    ) as const\r\n};\r\nexport const setIsFetching = (isFetching: boolean) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_IS_FETCHING, isFetching}\r\n    ) as const\r\n};\r\nexport const setUserProfile = (userProfile: CommonDataProfileType) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_USER_PROFILE, userProfile}\r\n    ) as const\r\n};\r\nexport const setAuthData = (authData: AuthDataType) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_AUTH_DATA, authData}\r\n    ) as const\r\n};\r\nexport const setFollowingInProgress = (isFollowingProgress: boolean, userId: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_FOLLOWING_IN_PROGRESS, isFollowingProgress, userId}\r\n    ) as const\r\n};\r\nexport const setStatusProfile = (statusProfile: string) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_STATUS_PROFILE, statusProfile}\r\n    ) as const\r\n}\r\nexport const setAuthError = (error: string | null) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_AUTH_ERROR, error}\r\n    ) as const\r\n};\r\nexport const setCaptchaValue = (captcha: string) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_CAPTCHA_VALUE, captcha}\r\n    ) as const\r\n};\r\nexport const initializedApp = () => {\r\n    return (\r\n        {type: typeOfActionDispatch.INITIALIZED_APP}\r\n    ) as const\r\n};\r\nexport const setError = (error: string | null) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_ERROR, error}\r\n    ) as const\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app__wrapper\":\"app_app__wrapper__3zjyW\",\"app__wrapper_content\":\"app_app__wrapper_content__30D5Q\",\"circleProgress\":\"app_circleProgress__2rhjH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"newPost_content__2nJOh\",\"content__textArea\":\"newPost_content__textArea__2sjje\",\"content__button\":\"newPost_content__button__3yZ3B\"};"],"sourceRoot":""}