{"version":3,"sources":["Components/nav/sideBar/sideBar.module.css","Components/dialogs/Names/names.module.css","Components/news/news.module.css","Components/settings/settings.module.css","Components/profile/profile.module.css","Components/profile/myPosts/myPosts.module.css","images/logo.png","Components/users/users.module.css","Components/dialogs/dialogs.module.css","serviceWorker.ts","redux/TypesForRedux.ts","Components/nav/sideBar/SidebarTitle.tsx","Components/nav/friendsBlock/FriendsBlock.tsx","Components/nav/Nav.tsx","Components/dialogs/Messages/Messages.tsx","Components/dialogs/Names/Names.tsx","Components/validators/validators.ts","Components/dialogs/newMessageInput/NewMessageInput.tsx","Components/dialogs/newMessageInput/NewMessageInputContainer.tsx","hoc/authRedirectHOC.tsx","Components/dialogs/DialogContainer.tsx","Components/news/News.tsx","Components/settings/Settings.tsx","Components/users/UserItem.tsx","Components/preloader/Preloader.tsx","API/API.ts","Components/users/UsersAPI.tsx","Components/users/UsersContainer.tsx","thunks/usersThunk.ts","Components/profile/myPosts/myPost/MyPost.tsx","Components/profile/myPosts/newPost/NewPost.tsx","Components/profile/myPosts/newPost/NewPostContainer.tsx","Components/profile/myPosts/myPosts.tsx","Components/profile/profileInfo/EditableStatus.tsx","Components/profile/profileInfo/ProfileInfo.tsx","Components/profile/Profile.tsx","Components/profile/ProfileContainer.tsx","thunks/profileThunk.ts","Components/header/Header.tsx","Components/header/HeaderContainer.tsx","thunks/authThunk.ts","Components/login/LoginForm.tsx","Components/login/Login.tsx","App.tsx","redux/reducers/profilePage-reducer.ts","redux/reducers/dialogsPage-reducer.ts","redux/reducers/navPage-reducer.ts","redux/reducers/usersPage-reducer.ts","redux/reducers/auth-reducer.ts","redux/redux-store.ts","index.tsx","Components/profile/profileInfo/profileInfo.module.css","Components/header/header.module.css","Components/nav/friendsBlock/friendsBlock.module.css","Components/nav/nav.module.css","Components/dialogs/Messages/messages.module.css","Components/profile/myPosts/myPost/myPost.module.css","Components/profile/myPosts/newPost/newPost.module.css","Components/login/login.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","typeOfActionDispatch","SidebarTitle","props","className","style","nav__wrap_menu","to","path","title","FriendsBlock","friends","map","f","key","id","nav__friendsBlock_item","nav__friendsBlock_item_img","src","alt","nav__friendsBlock_item_name","pathToDialog","name","isOnline","nav__friendsBlock_item_onlineStatus","Nav","nav","navPage","navTitles","t","nav__friendsBlock","nav__friendsBlock_title","Messages","newMessage","newMessage__img","newMessage__content","message","Names","dialogs__people_name","setUsers","users","type","SET_USERS","setIsFetching","isFetching","SET_IS_FETCHING","setAuthData","authData","SET_AUTH_DATA","setFollowingInProgress","isFollowingProgress","userId","SET_FOLLOWING_IN_PROGRESS","setStatusProfile","statusProfile","SET_STATUS_PROFILE","required","value","undefined","maxLength","max","length","DialogMessageReduxForm","reduxForm","form","maxLength300","useCallback","onSubmit","handleSubmit","FormControl","FormGroup","dialogs__messages_newMesssage_textarea","Field","placeholder","component","validate","label","row","dialogs__messages_newMesssage_button","Button","color","NewMessageInputContainer","connect","addMessage","ADD_MESSAGE","dialogs__messages_newMesssage","formData","DialogMessageTextarea","mapStateForRedirect","state","isAuth","auth","authRedirectHOC","Component","DialogContainer","compose","dialogPage","dialogsPage","dialogs","wrapper__header","wrapper__header_left","wrapper__header_right","wrapper","dialogs__people","names","n","dialogs__messages","messages","m","News","content","Settings","UserItem","s","content__item","content__item_leftBlock","content__item_leftBlock_img","photos","small","content__item_leftBlock_button","followed","onClick","unfollow","disabled","isFollowingInProgress","some","follow","content__item_rightBlock","content__item_rightBlock_name","content__item_rightBlock_status","status","content__item_rightBlock_location","Preloader","instance","axios","create","withCredentials","baseURL","headers","userAPI","currentPage","pageSize","get","then","res","data","delete","post","authAPI","email","password","rememberMe","profileAPI","put","setCurrentPage","p","items","this","getUsers","pageCount","Math","ceil","totalUsersCount","arrPageCount","i","push","content__wrapper","page","active_page","u","React","UsersContainer","usersPage","dispath","resultCode","FOLLOW_TO_USER","UNFOLLOW_TO_USER","SET_CURRENT_PAGE","totalCount","SET_TOTAL_USERS_COUNT","UsersAPI","MyPost","content__img","content__text","ProfilePostReduxForm","content__textArea","content__button","NewPostContainer","addPost","ADD_POST","useDispatch","textareaPost","MyPosts","posts","EditableStatus","useState","editeMode","setEditeMode","localStatus","setLocalStatus","useEffect","onChange","e","currentTarget","onBlur","updateStatus","autoFocus","onDoubleClick","ProfileInfo","contacts","userProfile","Object","keys","content__avatar","large","content__description","content__description_fullName","fullName","content__description_aboutMe","aboutMe","content__description_contacts","content__description_searchJob","lookingForAJob","content__description_desriptionOfJob","lookingForAJobDescription","Profile","profilePage","profileStatus","ProfileContainer","params","setUserProfile","ProfileContainerWithURL","withRouter","dispatch","SET_USER_PROFILE","Header","header","header__wrapper","header__wrapper_img","logo","header__authBlock","header__authBlock_login","login","logOutProfile","HeaderContainer","LoginReduxForm","maxLength30","renderTextField","input","meta","touched","invalid","error","TextField","helperText","Grid","container","direction","spacing","item","FormControlLabel","control","Checkbox","checked","variant","Login","login_content","login_content__inner","postLoginData","login_content_wrapper","App","render","initialState","initialUsersState","initialAuthState","reducers","combineReducers","action","newPostValue","newPost","newMessageValue","filter","copyState","formReducer","store","createStore","applyMiddleware","thunk","renderAppTree","ReactDOM","StrictMode","bind","document","getElementById","getState","subscribe","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.3df53b7c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav__wrap_menu\":\"sideBar_nav__wrap_menu__39L7R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs__people_name\":\"names_dialogs__people_name__RNTJh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"news_content__kswPX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"settings_content__3LtiA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"profile_content__1q3D6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"myPosts_posts__2csMZ\"};","module.exports = __webpack_public_path__ + \"static/media/logo.d243bdd9.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content__wrapper\":\"users_content__wrapper__I5n30\",\"content__item\":\"users_content__item__2Yyhu\",\"content__item_leftBlock\":\"users_content__item_leftBlock__3793k\",\"content__item_leftBlock_img\":\"users_content__item_leftBlock_img__3fPq6\",\"content__item_leftBlock_button\":\"users_content__item_leftBlock_button__1WpN3\",\"content__item_rightBlock\":\"users_content__item_rightBlock__3jFNO\",\"content__item_rightBlock_name\":\"users_content__item_rightBlock_name__3bU9i\",\"content__item_rightBlock_status\":\"users_content__item_rightBlock_status__10t-K\",\"content__item_rightBlock_location\":\"users_content__item_rightBlock_location__3hyxM\",\"page\":\"users_page__3334I\",\"active_page\":\"users_active_page__aZlPL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__1LacB\",\"wrapper\":\"dialogs_wrapper__GqQdl\",\"wrapper__header\":\"dialogs_wrapper__header__2SJHX\",\"wrapper__header_left\":\"dialogs_wrapper__header_left__2Dara\",\"wrapper__header_right\":\"dialogs_wrapper__header_right__383cx\",\"dialogs__people\":\"dialogs_dialogs__people__1uaFk\",\"dialogs__messages\":\"dialogs_dialogs__messages__1tidq\",\"dialogs__messages_newMesssage\":\"dialogs_dialogs__messages_newMesssage__b5FW8\",\"dialogs__messages_newMesssage_textarea\":\"dialogs_dialogs__messages_newMesssage_textarea__1fPCD\",\"dialogs__messages_newMesssage_button\":\"dialogs_dialogs__messages_newMesssage_button__1mrcq\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached profile has been fetched,\n              // but the previous service worker will still serve the older\n              // profile until all client tabs are closed.\n              console.log(\n                'New profile is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Profile is cached for offline use.\" message.\n              console.log('Profile is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('profile-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {AuthDataType, CommonDataProfileType, UserType} from \"./redux-store\";\r\n\r\nexport enum typeOfActionDispatch {\r\n    ADD_MESSAGE = \"ADD_MESSAGE\",\r\n    ADD_POST = \"ADD_POST\",\r\n    UPDATE_POST = \"UPDATE_POST\",\r\n    FOLLOW_TO_USER = \"FOLLOW_TO_USER\",\r\n    UNFOLLOW_TO_USER = \"UNFOLLOW_TO_USER\",\r\n    SET_USERS = \"SET_USERS\",\r\n    SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\",\r\n    SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\",\r\n    SET_IS_FETCHING = \"SET_IS_FETCHING\",\r\n    SET_USER_PROFILE = \"SET_USER_PROFILE\",\r\n    SET_AUTH_DATA = \"SET_AUTH_DATA\",\r\n    SET_FOLLOWING_IN_PROGRESS = \"SET_FOLLOWING_IN_PROGRESS\",\r\n    SET_STATUS_PROFILE = \"SET_STATUS_PROFILE\",\r\n    // UPDATE_PHOTO_PROFILE = \"UPDATE_PHOTO_PROFILE\",\r\n}\r\n\r\nexport type ActionCreatorsType = ReturnType<typeof addPost> |\r\n    ReturnType<typeof addMessage> |\r\n    ReturnType<typeof follow> |\r\n    ReturnType<typeof unfollow> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setTotalUsersCount> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setIsFetching> |\r\n    ReturnType<typeof setUserProfile> |\r\n    ReturnType<typeof setAuthData> |\r\n    ReturnType<typeof setFollowingInProgress> |\r\n    ReturnType<typeof setStatusProfile>\r\n\r\n//actionCreators\r\nexport const updatePost = (newPostValue: string) => {\r\n    return {\r\n        type: typeOfActionDispatch.UPDATE_POST,\r\n        newPostValue\r\n    } as const\r\n};\r\nexport const addPost = (value: string) => {\r\n    return {\r\n        type: typeOfActionDispatch.ADD_POST,\r\n        value\r\n    } as const\r\n};\r\nexport const addMessage = (newMessage: string) => {\r\n    return (\r\n        {type: typeOfActionDispatch.ADD_MESSAGE, message: newMessage}\r\n    ) as const\r\n};\r\nexport const follow = (userId: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.FOLLOW_TO_USER, userId}\r\n    ) as const\r\n};\r\nexport const unfollow = (userId: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.UNFOLLOW_TO_USER, userId}\r\n    ) as const\r\n};\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_USERS, users}\r\n    ) as const\r\n};\r\nexport const setTotalUsersCount = (totalUsersCount: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_TOTAL_USERS_COUNT, totalUsersCount}\r\n    ) as const\r\n};\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_CURRENT_PAGE, currentPage}\r\n    ) as const\r\n};\r\nexport const setIsFetching = (isFetching: boolean) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_IS_FETCHING, isFetching}\r\n    ) as const\r\n};\r\nexport const setUserProfile = (userProfile: CommonDataProfileType) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_USER_PROFILE, userProfile}\r\n    ) as const\r\n};\r\nexport const setAuthData = (authData: AuthDataType) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_AUTH_DATA, authData}\r\n    ) as const\r\n};\r\nexport const setFollowingInProgress = (isFollowingProgress: boolean, userId: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_FOLLOWING_IN_PROGRESS, isFollowingProgress, userId}\r\n    ) as const\r\n};\r\nexport const setStatusProfile = (statusProfile: string) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_STATUS_PROFILE, statusProfile}\r\n    ) as const\r\n};\r\n// export const updatePhotoProfile = (photoURL: File) => {\r\n//     return (\r\n//         {type: typeOfActionDispatch.UPDATE_PHOTO_PROFILE, photoURL }\r\n//     ) as const\r\n// };\r\n","import React from \"react\";\r\nimport style from './sideBar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    path: string,\r\n    title: string\r\n}\r\n\r\nexport const SidebarTitle: React.FC<PropsType> = (props) => {\r\n    return <>\r\n        <div className={style.nav__wrap_menu}>\r\n            <NavLink to={props.path}>\r\n                <li>{props.title}</li>\r\n            </NavLink>\r\n        </div>\r\n    </>\r\n}","import React from \"react\";\r\nimport style from './friendsBlock.module.css';\r\nimport {FriendsNavType} from \"../../../redux/store\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    friends: FriendsNavType[]\r\n}\r\n\r\nexport const FriendsBlock: React.FC<PropsType> = (props) => {\r\n\r\n    return <>\r\n        {props.friends.map(f => <div key={f.id} className={style.nav__friendsBlock_item}>\r\n                <div className={style.nav__friendsBlock_item_img}>\r\n                    <img src=\"https://icon-library.com/images/avatar-icon-images/avatar-icon-images-4.jpg\" alt=\"\"/>\r\n                </div>\r\n                <div className={style.nav__friendsBlock_item_name}>\r\n                    <NavLink to={f.pathToDialog}>{f.name}</NavLink>\r\n                </div>\r\n                {f.isOnline && <div className={style.nav__friendsBlock_item_onlineStatus}></div>}\r\n            </div>\r\n        )}\r\n    </>\r\n}","import React from \"react\";\r\nimport style from './nav.module.css';\r\nimport { SidebarTitle } from \"./sideBar/SidebarTitle\";\r\nimport {FriendsBlock} from \"./friendsBlock/FriendsBlock\";\r\nimport {navPageType} from \"../../redux/store\";\r\n\r\ntype propsType = {\r\n    navPage: navPageType\r\n}\r\n\r\nexport const Nav:React.FC<propsType> = (props) => {\r\n    return <div className={style.nav}>\r\n        {props.navPage.navTitles.map((t) => <SidebarTitle key={t.id} title={t.title} path={t.path}/>)}\r\n        <div className={style.nav__friendsBlock}>\r\n            <div className={style.nav__friendsBlock_title}>\r\n                <h4>Friends:</h4>\r\n            </div>\r\n            <FriendsBlock friends={props.navPage.friends}/>\r\n        </div>\r\n    </div>\r\n}","import React from \"react\";\nimport style from './messages.module.css'\n\ntype propsType = {\n    message: string | number\n}\n\nexport const Messages: React.FC<propsType> = (props) => {\n    return <div className={style.newMessage}>\n        <div className={style.newMessage__img}>\n            <img src=\"https://icon-library.com/images/avatar-icon-images/avatar-icon-images-4.jpg\"/>\n        </div>\n        <div className={style.newMessage__content}>\n            <span>{props.message}</span>\n        </div>\n    </div>\n}","import React from \"react\";\nimport style from './names.module.css'\nimport {NavLink} from \"react-router-dom\";\n\ntype propsType = {\n    name: string,\n    path: string\n}\n\nexport const Names: React.FC<propsType> = (props) => {\n    return <>\n        <div className={style.dialogs__people_name}>\n            <NavLink to={props.path}><span>{props.name}</span></NavLink>\n        </div>\n    </>\n}","\r\n\r\nexport const required = (value: string | number) => (value || typeof value === 'number' ? undefined : 'Required')\r\n\r\nexport const maxLength = (max: number) => (value: string) => {\r\n\r\n   return value && value.length > max ? `Must be ${max} characters or less` : undefined\r\n\r\n}","import React, {useCallback} from \"react\";\r\nimport style from \"../dialogs.module.css\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLength, required} from \"../../validators/validators\";\r\nimport {FormGroup, Button, FormControl} from \"@material-ui/core\";\r\n\r\ntype DialogFormDataType = {\r\n    DialogMessageTextarea: string\r\n}\r\n\r\ntype NewMessageInputType = {\r\n    addMessage: (newMessage: string) => void\r\n}\r\n\r\nexport const NewMessageInput: React.FC<NewMessageInputType> = (props) => {\r\n\r\n    const addNewMessage = (formData: DialogFormDataType) => {\r\n        if (formData) {\r\n            props.addMessage(formData.DialogMessageTextarea)\r\n        }\r\n    }\r\n\r\n    return <div className={style.dialogs__messages_newMesssage}>\r\n        <DialogMessageReduxForm onSubmit={addNewMessage}/>\r\n    </div>\r\n}\r\n\r\n\r\ntype IDialogMessageForm = {}\r\n\r\n\r\nconst DialogMessageForm: React.FC<InjectedFormProps<IDialogMessageForm & DialogFormDataType>> = (props) => {\r\n\r\n    const maxLength300 = useCallback(maxLength(300), [])\r\n\r\n    return <>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <FormControl>\r\n                <FormGroup>\r\n                    <div className={style.dialogs__messages_newMesssage_textarea}>\r\n                        <Field placeholder={'enter your message...'} name={'DialogMessageTextarea'}\r\n                               component={\"textarea\"}\r\n                               validate={[required, maxLength300]} label={'message field'} row={3}/>\r\n                    </div>\r\n                    <div className={style.dialogs__messages_newMesssage_button}>\r\n                        <Button color={'default'} type={'submit'}>Send</Button>\r\n                    </div>\r\n                </FormGroup>\r\n            </FormControl>\r\n        </form>\r\n    </>\r\n\r\n}\r\n\r\n\r\nconst DialogMessageReduxForm = reduxForm<IDialogMessageForm & DialogFormDataType>({form: 'DialogMessageForm'})(DialogMessageForm)","import React from \"react\";\r\nimport {addMessage} from \"../../../redux/TypesForRedux\";\r\nimport {NewMessageInput} from \"./NewMessageInput\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nexport const NewMessageInputContainer = connect(null, {addMessage})(NewMessageInput)","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {stateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateForRedirectType = {\r\n    isAuth : boolean\r\n}\r\n\r\nconst mapStateForRedirect = (state: stateType):MapStateForRedirectType => {\r\n    return {\r\n        isAuth:state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const authRedirectHOC = (Component: ComponentType<any>) => {\r\n\r\n    const authRedirectComponent:React.FC<MapStateForRedirectType> = (props) => {\r\n\r\n        if (!props.isAuth) {\r\n            return <Redirect to = {'/login'} />\r\n        }\r\n\r\n        return <Component {...props} />\r\n\r\n    }\r\n                    // @ts-ignore\r\n    return  connect<any>(mapStateForRedirect, null)(authRedirectComponent)\r\n\r\n}","import React from \"react\";\r\nimport style from './dialogs.module.css'\r\nimport {Messages} from \"./Messages/Messages\";\r\nimport {Names} from \"./Names/Names\";\r\nimport {NewMessageInputContainer} from \"./newMessageInput/NewMessageInputContainer\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType, dialogsPageType} from \"../../redux/redux-store\";\r\nimport {authRedirectHOC} from \"../../hoc/authRedirectHOC\";\r\nimport {compose} from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogPage: dialogsPageType\r\n}\r\n\r\ntype PropsType = MapStateToPropsType\r\n\r\nexport const Dialog = (props: PropsType) => {\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.wrapper__header}>\r\n                <div className={style.wrapper__header_left}>Messages</div>\r\n                <div className={style.wrapper__header_right}>Some name</div>\r\n            </div>\r\n            <div className={style.wrapper}>\r\n                <div className={style.dialogs__people}>\r\n                    {props.dialogPage.names.map((n) => <Names key={n.id} name={n.name} path={n.path}/>)}\r\n                </div>\r\n                <div className={style.dialogs__messages}>\r\n                    {props.dialogPage.messages.map((m) => <Messages key={m.id} message={m.message}/>)}\r\n                    <NewMessageInputContainer/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: stateType): MapStateToPropsType => ({\r\n    dialogPage: state.dialogsPage\r\n})\r\n\r\n\r\nexport const DialogContainer = compose(\r\n    authRedirectHOC,\r\n    // @ts-ignore\r\n    (connect<PropsType>(mapStateToProps, null)))(Dialog)\r\n","import React from 'react';\r\nimport style from './news.module.css'\r\n\r\nexport const News= () => {\r\n    return (\r\n        <div className={style.content}>\r\n           News\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport style from './settings.module.css'\r\n\r\nexport const Settings= () => {\r\n    return (\r\n        <div className={style.content}>\r\n           Settings\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./users.module.css\";\r\nimport {PhotosType} from \"../../redux/redux-store\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype UserItemType = {\r\n    id: number\r\n    photos: PhotosType\r\n    followed: boolean\r\n    name: string | null\r\n    status: string | null\r\n    isFollowingInProgress: number[]\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\n\r\nexport const UserItem: React.FC<UserItemType> = (props) => {\r\n\r\n\r\n    const follow = () => {\r\n        props.follow(props.id)\r\n    }\r\n\r\n    const unfollow = () => {\r\n        props.unfollow(props.id)\r\n    }\r\n\r\n    return <div className={s.content__item} key={props.id}>\r\n        <div className={s.content__item_leftBlock}>\r\n            <div className={s.content__item_leftBlock_img}>\r\n                <NavLink to={'/profile/' + props.id}>\r\n                    <img\r\n                        src={(props.photos.small) ? props.photos.small : \"https://i.pinimg.com/originals/1d/a5/a0/1da5a0d16d1f7dd7e43b6da4b68cdf46.png\"}\r\n                        alt=\"\"/>\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.content__item_leftBlock_button}>\r\n                {(props.followed) ? <button onClick={unfollow} disabled={props.isFollowingInProgress.some(id => id == props.id)}>unfollow</button> :\r\n                    <button onClick={follow} disabled={props.isFollowingInProgress.some(id => id == props.id)}>follow</button>}\r\n            </div>\r\n        </div>\r\n        <div className={s.content__item_rightBlock}>\r\n            <div className={s.content__item_rightBlock_name}>\r\n                <span>{props.name}</span>\r\n            </div>\r\n            <div className={s.content__item_rightBlock_status}>\r\n                <span>{props.status}</span>\r\n            </div>\r\n            <div className={s.content__item_rightBlock_location}>\r\n                <span>{'some city'}</span>\r\n                <span>{'some country'}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nexport const Preloader = (props: any) => {\r\n    return <div>\r\n        <img src='https://i.pinimg.com/originals/59/22/20/5922208e18658f5e83b6ad801b895f71.gif' alt=\"\"/>\r\n    </div>\r\n}","import axios from 'axios';\r\nimport {\r\n    CommonAuthStateType,\r\n    CommonDataProfileType,\r\n    CommonDataUsersType,\r\n    CommonSibscribeDataType,\r\n    UserType\r\n} from \"../redux/redux-store\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": '959808d3-8efe-42bd-88eb-3693675e6c98'\r\n    }\r\n})\r\n\r\ntype UserAPIProps = {\r\n    setUsers: (currentPage: number, pageSize: number) => Promise<CommonDataUsersType<UserType[]>>\r\n    unfollow: (userId: number) => Promise<CommonSibscribeDataType>\r\n    follow: (userId: number) => Promise<CommonSibscribeDataType>\r\n}\r\ntype AuthAPIProps = {\r\n    setAuth: () => Promise<CommonAuthStateType>\r\n    logIn: (email: string, password: string, rememberMe: boolean) => Promise<CommonAuthStateType>\r\n    logout: () => Promise<any>\r\n}\r\ntype ProfileAPIProps = {\r\n    setUserProfile: (userId: string) => Promise<CommonDataProfileType>\r\n    setStatusProfile: (userId: string) => Promise<string>\r\n    updateStatusProfile: (status: string) => Promise<string>\r\n    updatePhotoProfile: (photoURL: File) => Promise<any>\r\n}\r\n\r\nexport const userAPI: UserAPIProps = {\r\n\r\n    setUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<CommonDataUsersType<UserType[]>>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    unfollow(userId){\r\n        return instance.delete<CommonSibscribeDataType>(`follow/${userId}`)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    follow(userId){\r\n        return instance.post<CommonSibscribeDataType>(`follow/${userId}`)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    }\r\n}\r\n\r\nexport const authAPI: AuthAPIProps = {\r\n\r\n    setAuth(){\r\n        return instance.get<CommonAuthStateType>('auth/me')\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    logIn(email, password, rememberMe){\r\n        return instance.post<CommonAuthStateType>('auth/login', {email, password, rememberMe})\r\n            .then(res => {\r\n                debugger\r\n                return res.data\r\n            })\r\n    },\r\n    logout(){\r\n        return instance.delete<CommonAuthStateType>('auth/login')\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n\r\n}\r\n\r\n\r\n\r\nexport const profileAPI: ProfileAPIProps = {\r\n\r\n    setUserProfile(userId){\r\n        return instance.get<CommonDataProfileType>(`profile/${userId}`)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    setStatusProfile(userId){\r\n        return instance.get<any>(`profile/status/${userId}`)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    updateStatusProfile(status){\r\n        return instance.put<any>(`profile/status`,{status})\r\n            .then(res => {\r\n                debugger\r\n                return res.data\r\n            })\r\n    },\r\n    updatePhotoProfile(photoURL){\r\n        return instance.put<any>(`/profile/photo`,{photoURL})\r\n            .then(res => {\r\n                debugger\r\n                return res.data\r\n            })\r\n    },\r\n\r\n}","import React from 'react';\r\nimport s from './users.module.css'\r\nimport {UserType} from \"../../redux/redux-store\";\r\nimport {UserItem} from \"./UserItem\";\r\nimport {Preloader} from '../preloader/Preloader';\r\nimport {userAPI} from \"../../API/API\";\r\nimport {authRedirectHOC} from \"../../hoc/authRedirectHOC\";\r\n\r\ntype UsersPropsType = {\r\n    follow: (userId: number) => void,\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setIsFetching: (isFetching: boolean) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n    users: Array<UserType>\r\n    totalUsersCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    isFollowingInProgress: number[]\r\n}\r\n\r\n\r\nexport class UsersAPI extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount(): void {\r\n\r\n        if (this.props.users.length === 0) {\r\n            this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n        }\r\n    }\r\n\r\n    setCurrentPage = (p: number) => {\r\n        this.props.setCurrentPage(p)\r\n        this.props.setIsFetching(true)\r\n        userAPI.setUsers(p, this.props.pageSize).then(res => {\r\n            this.props.setIsFetching(false)\r\n            this.props.setUsers(res.items)\r\n            this.props.setIsFetching(false)\r\n        })\r\n    }\r\n\r\n\r\n    render(): React.ReactNode {\r\n\r\n        //pagination\r\n        let pageCount = Math.ceil(this.props.totalUsersCount / this.props.pageSize)\r\n        let arrPageCount = [];\r\n\r\n\r\n        for (let i = 1; pageCount >= i; i++) {\r\n            arrPageCount.push(i)\r\n        }\r\n        // ---- pagination ----\r\n\r\n        return (\r\n            <div className={s.content__wrapper}>\r\n                {this.props.isFetching && <Preloader/>}\r\n                {/*pagination*/}\r\n                {\r\n                    arrPageCount.map(p => {\r\n                        return <span key={p}\r\n                                     className={(this.props.currentPage === p) ? `${s.page} ${s.active_page}` : `${s.page}`}\r\n                                     onClick={() => this.setCurrentPage(p)}> {p} </span>\r\n                    })\r\n                }\r\n                {/*-----pagination-----*/}\r\n                {\r\n                    this.props.users.map(u => {\r\n\r\n                        const unfollow = (userId: number) => {\r\n\r\n                           this.props.unfollow(userId)\r\n                        }\r\n\r\n                        const follow = (userId: number) => {\r\n\r\n                            this.props.follow(userId)\r\n                        }\r\n\r\n                        return <UserItem key={u.id}\r\n                                         id={u.id}\r\n                                         status={u.status}\r\n                                         photos={u.photos}\r\n                                         followed={u.followed}\r\n                                         unfollow={unfollow}\r\n                                         follow={follow}\r\n                                         name={u.name}\r\n                                         isFollowingInProgress={this.props.isFollowingInProgress}/>\r\n\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default authRedirectHOC(UsersAPI)","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport UsersAPI from \"./UsersAPI\";\r\nimport {setUsers,\r\n    setCurrentPage, setIsFetching, setFollowingInProgress\r\n} from \"../../redux/TypesForRedux\";\r\nimport {stateType, UserType} from \"../../redux/redux-store\";\r\nimport {getUsersThunk, followToUserThunk, unfollowToUserThunk} from '../../thunks/usersThunk';\r\n\r\ntype mapStateToPropsType = {\r\n    users: Array<UserType>\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    isFollowingInProgress: number[]\r\n}\r\n\r\nconst mapStateToProps = (state: stateType): mapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        pageSize: state.usersPage.pageSize,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        isFollowingInProgress: state.usersPage.isFollowingInProgress\r\n    }\r\n}\r\n\r\nexport const UsersContainer = connect(mapStateToProps, {\r\n    follow: followToUserThunk,\r\n    unfollow:unfollowToUserThunk,\r\n    setUsers,\r\n    setCurrentPage,\r\n    setIsFetching,\r\n    setFollowingInProgress,\r\n    getUsers: getUsersThunk,\r\n})(UsersAPI)","import {userAPI} from \"../API/API\";\r\nimport {\r\n    setIsFetching,\r\n    setUsers,\r\n    setTotalUsersCount,\r\n    setFollowingInProgress,\r\n    unfollow,\r\n    follow\r\n} from \"../redux/TypesForRedux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype GetUsersThunkType = (currentPage: number, pageSize: number) => void\r\ntype FollowToUserThunkType = (userId: number) => void\r\ntype UnfollowToUserThunkType = (userId: number) => void\r\n\r\n\r\nexport const getUsersThunk: GetUsersThunkType = (currentPage, pageSize) => {\r\n\r\n    return (dispath: Dispatch) => {\r\n        dispath(setIsFetching(true))\r\n        userAPI.setUsers(currentPage, pageSize).then(res => {\r\n            dispath(setIsFetching(false))\r\n            dispath(setUsers(res.items))\r\n            dispath(setTotalUsersCount(res.totalCount))\r\n        })\r\n    }\r\n};\r\n\r\nexport const followToUserThunk: FollowToUserThunkType = (userId) => {\r\n\r\n    return (dispath: Dispatch) => {\r\n        dispath(setFollowingInProgress(true, userId))\r\n        userAPI.follow(userId)\r\n            .then(res => {\r\n                if (res.resultCode === 0) {\r\n                    dispath(follow(userId))\r\n                    dispath(setFollowingInProgress(false, userId))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const unfollowToUserThunk: UnfollowToUserThunkType = (userId) => {\r\n\r\n    return (dispath: Dispatch) => {\r\n\r\n        dispath(setFollowingInProgress(true, userId))\r\n        userAPI.unfollow(userId)\r\n            .then(res => {\r\n                if (res.resultCode === 0) {\r\n                    dispath(unfollow(userId))\r\n                    dispath(setFollowingInProgress(false, userId))\r\n                }\r\n            })\r\n    }\r\n};","import React from 'react';\r\nimport style from './myPost.module.css'\r\n\r\ntype propsType = {\r\n    message: string | number\r\n}\r\n\r\n\r\nexport const MyPost: React.FC<propsType> = (props) => {\r\n    return (\r\n        <div className={style.content}>\r\n            <div className={style.content__img}>\r\n                <img src={'https://tr.rbxcdn.com/47055e576c5566fb6b384a8fccf98c64/420/420/Decal/Png'} alt=\"\"/>\r\n            </div>\r\n            <div className={style.content__text}>\r\n                <span>{props.message}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react';\r\nimport style from './newPost.module.css'\r\nimport {Field, InjectedFormProps, reduxForm, reset, ResetAction} from 'redux-form';\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype FormDataType = {\r\n    textareaPost: string\r\n}\r\n\r\ntype propsType = {\r\n    addPost: (newPostValue: string) => void\r\n}\r\n\r\nexport const NewPost: React.FC<propsType> = (props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const addPost = (formData: FormDataType) => {\r\n        debugger\r\n        if (formData.textareaPost) {\r\n            props.addPost(formData.textareaPost)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style.content}>\r\n            <ProfilePostReduxForm onSubmit={addPost} />\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface IProfilePostForm {\r\n\r\n}\r\n\r\nconst ProfilePostForm: React.FC<InjectedFormProps<IProfilePostForm & FormDataType>> = (props) => {\r\n\r\n\r\n    return <>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={style.content__textArea}>\r\n                <Field placeholder={'enter some text...'} name={'textareaPost'} component={'textarea'}/>\r\n            </div>\r\n            <div className={style.content__button}>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    </>\r\n}\r\n\r\nexport const ProfilePostReduxForm = reduxForm<IProfilePostForm & FormDataType>({form: \"newProfileForm\"})(ProfilePostForm)","import React from 'react';\r\nimport {addPost} from \"../../../../redux/TypesForRedux\";\r\nimport {connect} from \"react-redux\";\r\nimport {NewPost} from \"./NewPost\";\r\n\r\n\r\nexport const NewPostContainer = connect(null, {addPost})(NewPost);\r\n","import React from \"react\";\r\nimport style from './myPosts.module.css'\r\nimport { MyPost } from \"./myPost/MyPost\";\r\nimport {profilePostsType} from \"../../../redux/store\";\r\nimport { NewPostContainer } from \"./newPost/NewPostContainer\";\r\n\r\ntype propsType = {\r\n    posts:Array<profilePostsType>\r\n}\r\n\r\nexport const MyPosts:React.FC<propsType> = (props) => {\r\n\r\n    return (\r\n        <div className={style.posts}>\r\n            <div className=\"content__posts\">\r\n                Create a new post:\r\n                <NewPostContainer />\r\n                {props.posts.map((p) => <MyPost message ={p.message} key={p.id} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype EditebleStatusPropsType = {\r\n    status: string\r\n    updateStatus: (title: string) => void\r\n    userId: string\r\n}\r\n\r\n\r\nexport const EditableStatus: React.FC<EditebleStatusPropsType> = (props) => {\r\n\r\n    let userId = props.userId\r\n\r\n    if(!userId){\r\n        userId = '7788'\r\n    }\r\n\r\n    const [editeMode, setEditeMode] = useState<boolean>(false)\r\n    const [localStatus, setLocalStatus] = useState<string>(props.status)\r\n\r\n    const onBlurHandler = () => {\r\n        props.updateStatus(localStatus)\r\n        setEditeMode(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (localStatus !== props.status) {\r\n            setLocalStatus(props.status)\r\n        }\r\n    }, [props.status])\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return <div>\r\n        {(editeMode && userId == '7788') ?\r\n                <div><input type=\"text\" value={localStatus} onChange={onChangeHandler} onBlur={onBlurHandler}\r\n                            autoFocus={true}/></div> :\r\n                <div><span onDoubleClick={() => setEditeMode(true)}>{props.status}</span></div>}\r\n    </div>\r\n}","import React from \"react\";\r\nimport s from './profileInfo.module.css';\r\nimport {CommonDataProfileType, SocialContactsType} from \"../../../redux/redux-store\";\r\nimport {EditableStatus} from \"./EditableStatus\";\r\n\r\ntype PropsType = {\r\n    userProfile: CommonDataProfileType\r\n    status: string\r\n    updateStatus: (title: string) => void\r\n    userId: string\r\n}\r\n\r\nexport const ProfileInfo: React.FC<PropsType> = (props) => {\r\n\r\n    let contacts: any\r\n    if (props.userProfile && props.userProfile.contacts) {\r\n        let keys = Object.keys(props.userProfile.contacts)\r\n        contacts = keys.map((key) => {\r\n\r\n            return (\r\n                <div>\r\n                    <p>{key}</p> : {props.userProfile.contacts[key as keyof SocialContactsType]}\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    return <>\r\n        <div className={s.content__avatar}>\r\n            <img src={(props.userProfile?.photos?.large) ? props.userProfile?.photos?.large :\r\n                \"https://i.pinimg.com/originals/1d/a5/a0/1da5a0d16d1f7dd7e43b6da4b68cdf46.png\"} alt=\"\"/>\r\n        </div>\r\n        <div className={s.content__description}>\r\n            <EditableStatus status={props.status} updateStatus={props.updateStatus} userId={props.userId}/>\r\n            <div className={s.content__description_fullName}>\r\n                <b>FullName</b>: {props.userProfile?.fullName}\r\n            </div>\r\n            <div className={s.content__description_aboutMe}>\r\n                <b>AboutMe</b>: {props.userProfile?.aboutMe}\r\n            </div>\r\n            <div className={s.content__description_contacts}>\r\n                <b>Contacts</b>:\r\n                {contacts}\r\n            </div>\r\n            <div className={s.content__description_searchJob}>\r\n                <b>Search a job:</b> {(props.userProfile?.lookingForAJob) ? \"Yes\" : \"No\"}\r\n            </div>\r\n            <div className={s.content__description_desriptionOfJob}>\r\n                <b>Description of job:</b> {(props.userProfile?.lookingForAJobDescription) ?\r\n                props.userProfile.lookingForAJobDescription :\r\n                \"No description\"}\r\n            </div>\r\n        </div>\r\n    </>\r\n\r\n}","import React from 'react';\r\nimport style from './profile.module.css'\r\nimport {MyPosts} from \"./myPosts/myPosts\";\r\nimport {ProfileInfo} from \"./profileInfo/ProfileInfo\";\r\nimport {profilePageType} from \"../../redux/reducers/profilePage-reducer\";\r\nimport {Preloader} from \"../preloader/Preloader\";\r\n\r\n\r\ntype propsType = {\r\n    profilePage: profilePageType\r\n    updateStatus: (title: string) => void\r\n    userId: string\r\n}\r\n\r\nexport const Profile: React.FC<propsType> = (props) => {\r\n\r\n\r\n    return (\r\n        <div className={style.content}>\r\n            {props.profilePage.isFetching ?\r\n                <Preloader/> : <>\r\n                    <ProfileInfo userProfile={props.profilePage.userProfile}\r\n                                 status={props.profilePage.profileStatus}\r\n                                 updateStatus={props.updateStatus}\r\n                                 userId={props.userId}/>\r\n                    <MyPosts posts={props.profilePage.posts}/>\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {setUserProfileThunk, setUserStatusThunk, updateUserStatusThunk} from \"../../thunks/profileThunk\";\r\nimport {authRedirectHOC} from '../../hoc/authRedirectHOC';\r\nimport {compose} from 'redux';\r\nimport {profilePageType} from '../../redux/reducers/profilePage-reducer';\r\n// import * as avatar from '../../images/avatar.png';\r\n\r\ntype MstpType = {\r\n    profilePage: profilePageType\r\n}\r\n\r\ntype MdtpType = {\r\n    setUserProfile: (userId: string) => void\r\n    setStatusProfile: (userId: string) => void\r\n    updateStatus: (title: string) => void\r\n    updatePhoto: (photoURL: File) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & MdtpType & MstpType\r\n\r\nexport class ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount(): void {\r\n\r\n        let userId = this.props.match.params.userId\r\n\r\n\r\n        // // @ts-ignore\r\n        // const photoURL:File = avatar;\r\n\r\n        if (!userId) {\r\n            userId = '7788';\r\n            // this.props.updatePhoto(photoURL)\r\n        }\r\n\r\n        this.props.setUserProfile(userId)\r\n        this.props.setStatusProfile(userId)\r\n    }\r\n\r\n\r\n    render(): React.ReactNode {\r\n        return (\r\n            <Profile profilePage={this.props.profilePage}\r\n                     updateStatus={this.props.updateStatus}\r\n                     userId={this.props.match.params.userId}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mstp = (state: stateType): MstpType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nexport const ProfileContainerWithURL = compose(\r\n    authRedirectHOC,\r\n    withRouter,\r\n    //@ts-ignore\r\n    connect<any>(mstp, {\r\n        setUserProfile: setUserProfileThunk,\r\n        setStatusProfile: setUserStatusThunk,\r\n        updateStatus: updateUserStatusThunk,\r\n        // updatePhoto: updateProfilePhotoThunk\r\n    }))(ProfileContainer)\r\n\r\n","import {profileAPI} from \"../API/API\";\r\nimport {setIsFetching, setStatusProfile, setUserProfile} from \"../redux/TypesForRedux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype SetUserProfileThunkType = (userId: string) => void\r\ntype SetUserStatusThunkType = (userId: string) => void\r\ntype UpdateUserStatusThunkType = (userId: string) => void\r\ntype UpdateProfilePhotoThunk = (photoURL: File) => void\r\n\r\n\r\nexport const setUserProfileThunk: SetUserProfileThunkType = (userId) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n\r\n        dispatch(setIsFetching(true))\r\n        profileAPI.setUserProfile(userId)\r\n            .then(data => {\r\n                debugger\r\n                dispatch(setUserProfile(data))\r\n                dispatch(setIsFetching(false))\r\n            })\r\n    }\r\n};\r\nexport const setUserStatusThunk: SetUserStatusThunkType = (userId) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n\r\n        dispatch(setIsFetching(true))\r\n        profileAPI.setStatusProfile(userId)\r\n            .then(data => {\r\n                dispatch(setStatusProfile(data))\r\n            })\r\n    }\r\n};\r\nexport const updateUserStatusThunk: UpdateUserStatusThunkType = (title) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.updateStatusProfile(title)\r\n            .then(data => {\r\n                dispatch(setStatusProfile(title))\r\n            })\r\n    }\r\n};\r\n// export const updateProfilePhotoThunk: UpdateProfilePhotoThunk = (photoURL) => {\r\n//\r\n//     return (dispatch: Dispatch) => {\r\n//         profileAPI.updatePhotoProfile(photoURL)\r\n//             .then(data => {\r\n//                 debugger\r\n//                     dispatch(updatePhotoProfile(photoURL))\r\n//             })\r\n//     }\r\n// };","import React from 'react';\r\nimport style from './header.module.css'\r\nimport logo from '../../images/logo.png'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n    logOutProfile:() => void\r\n}\r\n\r\n\r\nexport const Header: React.FC<PropsType> = (props) => {\r\n\r\n    const logOut = () => {\r\n        props.logOutProfile()\r\n    }\r\n\r\n    return (\r\n        <div className={style.header}>\r\n            <div className={style.header__wrapper}>\r\n                <div className={style.header__wrapper_img}>\r\n                    <img src={logo} alt=\"logo\"/>\r\n                </div>\r\n                <div className={style.header__authBlock}>\r\n                    {props.isAuth ?\r\n                        <div className={style.header__authBlock_login}>\r\n                            <span>{props.login}</span>\r\n                            <button onClick={logOut}>LOG OUT</button>\r\n                        </div> :\r\n                        <NavLink to={'/login'}>Login</NavLink>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n","import React from 'react';\r\nimport {Header} from \"./Header\";\r\nimport {connect} from 'react-redux';\r\nimport {stateType} from '../../redux/redux-store';\r\nimport {logOutProfileThunk} from '../../thunks/authThunk';\r\n\r\ntype MstpType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\ntype MdtpType = {\r\n    logOutProfile: () => void\r\n}\r\n\r\ntype PropsType = MstpType & MdtpType\r\n\r\nclass HeaderContainer extends React.Component<PropsType> {\r\n\r\n    render(): React.ReactNode {\r\n        return <Header isAuth={this.props.isAuth}\r\n                       login={this.props.login}\r\n                       logOutProfile={this.props.logOutProfile}/>\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: stateType): MstpType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n    }\r\n}\r\n\r\n//@ts-ignore\r\nexport default connect<PropsType, any>(mapStateToProps, {logOutProfile: logOutProfileThunk})(HeaderContainer)","import {authAPI} from \"../API/API\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAuthData} from \"../redux/TypesForRedux\";\r\n\r\ntype AuthProfileThunkType = () => any\r\ntype AuthPostProfileDataThunkType = (email: string, password: string, rememberMe: boolean) => void\r\n\r\n\r\nexport const authProfileThunk: AuthProfileThunkType = () => {\r\n\r\n    return (dispath: Dispatch) => {\r\n\r\n        authAPI.setAuth()\r\n            .then(res => {\r\n            if (res.resultCode === 0) {\r\n                dispath(setAuthData(res.data))\r\n            }\r\n        })\r\n\r\n    }\r\n};\r\n\r\nexport const logInProfileThunk: AuthPostProfileDataThunkType = (email, password, rememberMe) => {\r\n\r\n    return (dispath: Dispatch) => {\r\n\r\n        authAPI.logIn(email, password, rememberMe)\r\n            .then(res => {\r\n                debugger\r\n                if (res.resultCode === 0) {\r\n                    dispath(authProfileThunk())\r\n                }\r\n            })\r\n\r\n    }\r\n};\r\n\r\nexport const logOutProfileThunk: AuthPostProfileDataThunkType = () => {\r\n\r\n    return (dispath: Dispatch) => {\r\n\r\n        authAPI.logout()\r\n            .then(res => {\r\n                debugger\r\n                if (res.resultCode === 0) {\r\n                    dispath(setAuthData({email: null, login: null, id: null}))\r\n                }\r\n            })\r\n\r\n    }\r\n};","import React, {useCallback} from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {FormDataType} from \"./Login\";\r\nimport {maxLength, required} from \"../validators/validators\";\r\nimport {Button, FormControl, FormGroup, TextField, Grid, FormControlLabel, Checkbox} from \"@material-ui/core\";\r\n\r\n\r\ninterface IFormData {\r\n}\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<IFormData & FormDataType>> = (props) => {\r\n\r\n\r\n    const maxLength30 = useCallback(maxLength(30), [])\r\n\r\n    const renderTextField = ({label, input, meta: {touched, invalid, error}, ...props}: any) => (\r\n        <TextField\r\n            label={label}\r\n            placeholder={label}\r\n            error={touched && invalid}\r\n            helperText={touched && error}\r\n            {...input}\r\n            {...props}\r\n        />\r\n    )\r\n\r\n\r\n    const renderCheckbox = ({ input, label }:any) => (\r\n        <div>\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={input.value ? true : false}\r\n                        onChange={input.onChange}\r\n                    />\r\n                }\r\n                label={label}\r\n            />\r\n        </div>\r\n    )\r\n\r\n\r\n    return <>\r\n        <FormControl>\r\n            <FormGroup>\r\n                <form onSubmit={props.handleSubmit}>\r\n                    <Grid container direction={\"column\"} spacing={2}>\r\n                        <Grid item>\r\n                            <div>\r\n                                <Field name={'email'} component={renderTextField} label={'email'}\r\n                                       validate={[required, maxLength30]}  />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <div>\r\n                                <Field name={'password'} component={renderTextField}\r\n                                       label={'password'}\r\n                                       type=\"password\"\r\n                                       validate={[required, maxLength30]}/>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <div>\r\n                                <Field name={'rememberMe'} type={'checkbox'} label={'remember me'} component={renderCheckbox} />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <div>\r\n                                <Button type={'submit'} variant=\"contained\">LOG IN</Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </FormGroup>\r\n        </FormControl>\r\n    </>\r\n}\r\n\r\n\r\nexport const LoginReduxForm = reduxForm<IFormData & FormDataType>({form: 'LoginForm'})(LoginForm)","import React from \"react\";\r\nimport {LoginReduxForm} from \"./LoginForm\";\r\nimport s from './login.module.css';\r\nimport {connect} from \"react-redux\";\r\nimport {logInProfileThunk} from \"../../thunks/authThunk\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype LoginPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n    isAuth: boolean\r\n}\r\n\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\n\r\nexport const Login: React.FC<LoginPropsType> = (props) => {\r\n\r\n\r\n    const login = ({email, password, rememberMe, ...formData}: FormDataType) => {\r\n        props.login(email, password, rememberMe)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.login_content}>\r\n            {(props.isAuth) ? <Redirect to={'/profile'}/> :\r\n                <div className={s.login_content__inner}>\r\n                    <h1>Login</h1>\r\n                    <LoginReduxForm onSubmit={login}/>\r\n                </div>\r\n\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype MapDispatchToPropsType = {\r\n    postLoginData: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype LoginContainerPropsType = {}\r\n\r\ntype CommonLoginContainerType = MapStateToPropsType & MapDispatchToPropsType & LoginContainerPropsType\r\n\r\nconst LoginContainer: React.FC<CommonLoginContainerType> = (props) => {\r\n\r\n    const postLogin = (email: string, password: string, rememberMe: boolean) => {\r\n        props.postLoginData(email, password, rememberMe)\r\n    }\r\n\r\n\r\n    return <div className={s.login_content_wrapper}>\r\n        <Login login={postLogin} isAuth={props.isAuth}/>\r\n    </div>\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: stateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {postLoginData: logInProfileThunk})(LoginContainer)\r\n","import React from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport './App.css'\r\nimport {Nav} from './Components/nav/Nav';\r\nimport {DialogContainer} from \"./Components/dialogs/DialogContainer\";\r\nimport {News} from \"./Components/news/News\";\r\nimport {Settings} from './Components/settings/Settings';\r\nimport {stateType} from './redux/store';\r\nimport {ActionCreatorsType} from \"./redux/TypesForRedux\";\r\nimport {UsersContainer} from './Components/users/UsersContainer';\r\nimport {ProfileContainerWithURL} from \"./Components/profile/ProfileContainer\";\r\nimport HeaderContainer from \"./Components/header/HeaderContainer\";\r\nimport LoginContainer from \"./Components/login/Login\";\r\n\r\ntype propsType = {\r\n    state: stateType\r\n    dispatch: (action:ActionCreatorsType) => void\r\n}\r\n\r\nconst App:React.FC<propsType> = (props) => {\r\n\r\n    return (\r\n        <div className={'app__wrapper'}>\r\n            <HeaderContainer />\r\n            <Nav navPage={props.state.navPage} />\r\n            <div className=\"app__wrapper_content\">\r\n                <Route path={'/profile/:userId?'} render={() => <ProfileContainerWithURL />}/>\r\n                <Route path={'/dialogs'} render={() => <DialogContainer />}/>\r\n                <Route path={'/users'}  render={() => <UsersContainer />}/>\r\n                <Route path={'/news'}  render={() => <News />}/>\r\n                <Route path={'/settings'} render={() => <Settings />}/>\r\n                <Route path={'/login'} render={() => <LoginContainer />}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n","import {ActionCreatorsType, typeOfActionDispatch} from \"../TypesForRedux\";\r\nimport {CommonDataProfileType, profilePostsType} from \"../redux-store\";\r\n\r\n\r\nexport type profilePageType = typeof initialState\r\n\r\nexport type profilePageReducerType = (state: profilePageType, action: ActionCreatorsType) => profilePageType\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hey girls\"},\r\n        {id: 2, message: \"Hey guys\"}\r\n    ] as Array<profilePostsType>,\r\n    userProfile: {} as CommonDataProfileType,\r\n    isFetching: false,\r\n    profileStatus: '',\r\n}\r\n\r\n\r\nexport const profilePageReducer: profilePageReducerType = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.ADD_POST:\r\n            let newPostValue = action.value\r\n            let newPost = {id: 5, message: newPostValue}\r\n\r\n            state = {...state, posts: [...state.posts, newPost]}\r\n            return state;\r\n        case typeOfActionDispatch.SET_USER_PROFILE:\r\n            return {...state, userProfile: action.userProfile}\r\n        case typeOfActionDispatch.SET_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case typeOfActionDispatch.SET_STATUS_PROFILE:\r\n            return {...state, profileStatus: action.statusProfile}\r\n\r\n        // case typeOfActionDispatch.UPDATE_PHOTO_PROFILE:\r\n        //\r\n        //     let copyState = {...state, userProfile: {...state.userProfile, photos: {...state.userProfile.photos, large: action.photoURL}}}\r\n        //\r\n        //     return copyState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import {ActionCreatorsType, typeOfActionDispatch} from \"../TypesForRedux\";\r\nimport {dialogsPageType} from \"../redux-store\";\r\n\r\n\r\nexport type dialogsPageReducerType = (state: dialogsPageType, action: ActionCreatorsType) => dialogsPageType\r\n\r\nconst initialState:dialogsPageType = {\r\n    names: [\r\n        {id: 1, name: 'Marat', path: '/dialogs/1'},\r\n        {id: 2, name: 'Anton', path: '/dialogs/2'},\r\n        {id: 3, name: 'Arkasha', path: '/dialogs/3'},\r\n        {id: 4, name: 'Tolik', path: '/dialogs/4'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hey man!'},\r\n        {id: 2, message: 'How is it going?'},\r\n        {id: 3, message: 'You forgot about my birthday(('},\r\n        {id: 4, message: 'I want to break up with you, sorry'}\r\n    ]\r\n}\r\n\r\nexport const dialogsPageReducer: dialogsPageReducerType = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.ADD_MESSAGE:\r\n            let newMessageValue = action.message\r\n            let newMessage = {id: 5, message:newMessageValue}\r\n\r\n            state = {...state, messages: [...state.messages, newMessage]}\r\n            return state;\r\n        default:\r\n            return state\r\n    }\r\n}","import {ActionCreatorsType} from \"../TypesForRedux\";\r\nimport {navPageType} from \"../redux-store\";\r\n\r\n\r\nexport type navPageReducerType = (state: navPageType, action: ActionCreatorsType) => navPageType\r\n\r\nconst initialState:navPageType = {\r\n    navTitles: [\r\n        {id: 1, title: 'Profile', path: '/profile'},\r\n        {id: 2, title: 'Dialogs', path: '/dialogs'},\r\n        {id: 3, title: 'Users', path: '/users'},\r\n        {id: 4, title: 'News', path: '/news'},\r\n        {id: 5, title: 'Settings', path: '/settings'}\r\n    ],\r\n    friends: [\r\n        {id: 1, name: 'Marat', pathToDialog: '/dialogs/1', isOnline: true},\r\n        {id: 2, name: 'Anton', pathToDialog: '/dialogs/2', isOnline: false},\r\n        {id: 3, name: 'Arkasha', pathToDialog: '/dialogs/3', isOnline: true},\r\n        {id: 4, name: 'Tolik', pathToDialog: '/dialogs/4', isOnline: false}\r\n    ]\r\n}\r\n\r\nexport const navPageReducer: navPageReducerType = (state = initialState, action) => {\r\n    return state\r\n}","import {ActionCreatorsType, typeOfActionDispatch} from \"../TypesForRedux\";\r\nimport {UsersStateType} from \"../redux-store\";\r\n\r\n\r\n//typization for reducer\r\ntype usersReducerType = (state: UsersStateType, action: ActionCreatorsType) => UsersStateType\r\n\r\n\r\nconst initialUsersState: UsersStateType = {\r\n    users: [],\r\n    totalUsersCount: 0,\r\n    pageSize: 100,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    isFollowingInProgress: [],\r\n}\r\n\r\nexport const usersReducer: usersReducerType = (state = initialUsersState, action): UsersStateType => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.FOLLOW_TO_USER:\r\n            return {...state, users: state.users.map(u => (u.id === action.userId) ? {...u, followed: true} : u)}\r\n\r\n        case typeOfActionDispatch.UNFOLLOW_TO_USER:\r\n            return {...state, users: state.users.map(u => (u.id === action.userId) ? {...u, followed: false} : u)}\r\n\r\n        case typeOfActionDispatch.SET_USERS:\r\n            return {...state, users: [...action.users]}\r\n\r\n        case typeOfActionDispatch.SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n\r\n        case typeOfActionDispatch.SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case typeOfActionDispatch.SET_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case typeOfActionDispatch.SET_FOLLOWING_IN_PROGRESS:\r\n            return {\r\n                ...state, isFollowingInProgress: action.isFollowingProgress ?\r\n                    [...state.isFollowingInProgress, action.userId] :\r\n                    [...state.isFollowingInProgress.filter(id => id !== action.userId)]\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import {ActionCreatorsType, typeOfActionDispatch} from \"../TypesForRedux\"\r\nimport {IAuthData} from \"../redux-store\";\r\n\r\n\r\n\r\n//typization for reducer\r\ntype usersReducerType = (state: IAuthData, action: ActionCreatorsType) => IAuthData\r\n\r\n\r\nconst initialAuthState: IAuthData = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\nexport const authReducer: usersReducerType = (state = initialAuthState, action) => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.SET_AUTH_DATA:\r\n            let copyState ={...state, ...action.authData}\r\n\r\n            let isAuth = (copyState.login) ? true : false\r\n\r\n            return {...copyState, isAuth}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {profilePageReducer, profilePageType} from \"./reducers/profilePage-reducer\";\r\nimport {dialogsPageReducer} from \"./reducers/dialogsPage-reducer\";\r\nimport {navPageReducer} from \"./reducers/navPage-reducer\";\r\nimport {usersReducer} from \"./reducers/usersPage-reducer\";\r\nimport { authReducer } from \"./reducers/auth-reducer\";\r\nimport thunk from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\nexport type PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\nexport type dialogsNamesType = {\r\n    id: number,\r\n    name: string,\r\n    path: string\r\n}\r\nexport type dialogsMessagesType = {\r\n    id: number,\r\n    message: string | number\r\n}\r\nexport type profilePostsType = {\r\n    id: number,\r\n    message: string | number\r\n}\r\nexport type navTitlesType = {\r\n    id: number,\r\n    title: string,\r\n    path: string\r\n}\r\nexport type FriendsNavType = {\r\n    id: number\r\n    name: string\r\n    pathToDialog: string\r\n    isOnline: boolean\r\n}\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string | null\r\n    photos: PhotosType\r\n    status: string | null\r\n    followed: boolean\r\n}\r\n\r\n//Profile data\r\nexport type SocialContactsType = {\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    github: string\r\n    youtube: string\r\n    mainLink: string\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ntype PhotoUserType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\n\r\nexport type CommonDataUsersType<T> = {\r\n    error: string | null\r\n    items: T\r\n    totalCount: number\r\n}\r\nexport type CommonDataProfileType = {\r\n    aboutMe: string | null\r\n    contacts: SocialContactsType\r\n    fullName: string | null\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    photos: PhotoUserType | null\r\n    userId: number\r\n}\r\n\r\n//auth data\r\nexport type CommonAuthStateType = {\r\n    resultCode: number\r\n    messages: [] | null\r\n    fieldsErrors: [] | null\r\n    data: AuthDataType\r\n}\r\n\r\n//follow and unfollow data\r\nexport type CommonSibscribeDataType = {\r\n    data: {}\r\n    fieldsErrors: []\r\n    messages: []\r\n    resultCode: number\r\n}\r\n\r\n\r\n//\r\n// export type profilePageType = {\r\n//     posts: Array<profilePostsType>\r\n//     newPost: string | number\r\n//     userProfile: CommonDataProfileType | null\r\n//     isFetching: boolean\r\n//     profileStatus: string\r\n// }\r\n\r\nexport type dialogsPageType = {\r\n    names: Array<dialogsNamesType>\r\n    messages: Array<dialogsMessagesType>\r\n}\r\nexport type navPageType = {\r\n    navTitles: Array<navTitlesType>\r\n    friends: Array<FriendsNavType>\r\n}\r\nexport type UsersStateType = {\r\n    users: Array<UserType>\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    isFollowingInProgress: number[]\r\n}\r\nexport type AuthDataType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n}\r\n\r\nexport interface IAuthData extends AuthDataType{\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nexport type stateType = {\r\n    profilePage: profilePageType\r\n    dialogsPage: dialogsPageType\r\n    navPage: navPageType\r\n    usersPage: UsersStateType\r\n    auth: IAuthData\r\n}\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profilePageReducer,\r\n    dialogsPage: dialogsPageReducer,\r\n    navPage: navPageReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n});\r\n\r\n\r\nexport let store = createStore(reducers, applyMiddleware(thunk))\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport ReactDOM from \"react-dom\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport {stateType} from \"./redux/store\";\r\nimport {store} from \"./redux/redux-store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nexport type renderAppTreeType = (state: stateType) => void\r\n\r\n\r\nexport const renderAppTree: renderAppTreeType = (state: stateType) => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <HashRouter>\r\n                <Provider store={store}>\r\n                    <App state={state}\r\n                         dispatch={store.dispatch.bind(store)}/>\r\n                </Provider>\r\n            </HashRouter>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nrenderAppTree(store.getState());\r\n\r\nstore.subscribe(() => renderAppTree(store.getState()))\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"profileInfo_content__1NgHR\",\"content__avatar\":\"profileInfo_content__avatar__JkGN5\",\"content__description\":\"profileInfo_content__description__2dMvU\",\"content__description_aboutMe\":\"profileInfo_content__description_aboutMe__21nxh\",\"content__description_contacts\":\"profileInfo_content__description_contacts__1kNa-\",\"content__description_fullName\":\"profileInfo_content__description_fullName__3yYXC\",\"content__description_searchJob\":\"profileInfo_content__description_searchJob__1LMz1\",\"content__description_desriptionOfJob\":\"profileInfo_content__description_desriptionOfJob__2lpvY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__28bqR\",\"header__wrapper\":\"header_header__wrapper__1rCLi\",\"header__wrapper_img\":\"header_header__wrapper_img__3B4XV\",\"header__authBlock\":\"header_header__authBlock__3SaVn\",\"header__authBlock_login\":\"header_header__authBlock_login__3iRv5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav__friendsBlock_item\":\"friendsBlock_nav__friendsBlock_item__22hEe\",\"nav__friendsBlock_item_img\":\"friendsBlock_nav__friendsBlock_item_img__fQY5A\",\"nav__friendsBlock_item_name\":\"friendsBlock_nav__friendsBlock_item_name__1TGRU\",\"nav__friendsBlock_item_onlineStatus\":\"friendsBlock_nav__friendsBlock_item_onlineStatus__QYJgV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"nav_nav__32Dtx\",\"nav__friendsBlock_title\":\"nav_nav__friendsBlock_title__OPYtZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newMessage\":\"messages_newMessage__H-XRi\",\"newMessage__img\":\"messages_newMessage__img__2RyBM\",\"newMessage__content\":\"messages_newMessage__content__g6ttP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"myPost_content__1RSxM\",\"content__img\":\"myPost_content__img__ab0v1\",\"content__text\":\"myPost_content__text__2GZxT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"newPost_content__2nJOh\",\"content__textArea\":\"newPost_content__textArea__2sjje\",\"content__button\":\"newPost_content__button__3yZ3B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login_content\":\"login_login_content__sUhaD\",\"login_content__inner\":\"login_login_content__inner__3iju1\"};"],"sourceRoot":""}