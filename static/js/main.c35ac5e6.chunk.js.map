{"version":3,"sources":["app.module.css","Components/nav/nav.module.css","Components/dialogs/Messages/messages.module.css","Components/profile/myPosts/myPost/myPost.module.css","Components/profile/myPosts/newPost/newPost.module.css","Components/login/login.module.css","Components/nav/sideBar/sideBar.module.css","Components/dialogs/Names/names.module.css","Components/news/news.module.css","Components/settings/settings.module.css","Components/profile/profile.module.css","Components/profile/myPosts/myPosts.module.css","images/logo.png","serviceWorker.ts","redux/TypesForRedux.ts","Components/nav/sideBar/SidebarTitle.tsx","Components/nav/friendsBlock/FriendsBlock.tsx","Components/nav/Nav.tsx","Components/dialogs/Messages/Messages.tsx","Components/dialogs/Names/Names.tsx","Components/dialogs/newMessageInput/NewMessageInput.tsx","Components/dialogs/newMessageInput/NewMessageInputContainer.tsx","hoc/authRedirectHOC.tsx","redux/selectors/DialogSelectors.ts","Components/dialogs/DialogContainer.tsx","Components/news/News.tsx","Components/settings/Settings.tsx","Components/users/UserItem.tsx","API/API.ts","Components/users/UsersAPI.tsx","redux/selectors/UsersSelectors.ts","Components/users/UsersContainer.tsx","thunks/usersThunk.ts","Components/profile/myPosts/myPost/MyPost.tsx","Components/profile/myPosts/newPost/NewPost.tsx","Components/profile/myPosts/newPost/NewPostContainer.tsx","Components/profile/myPosts/MyPosts.tsx","Components/profile/profileInfo/EditableStatus.tsx","Components/profile/profileInfo/ProfileInfo.tsx","Components/profile/Profile.tsx","redux/selectors/ProfileSelectors.ts","Components/profile/ProfileContainer.tsx","thunks/profileThunk.ts","Components/header/Header.tsx","thunks/authThunk.ts","redux/selectors/LoginSelectors.ts","redux/selectors/HeaderSelectors.ts","Components/header/HeaderContainer.tsx","Components/login/LoginForm.tsx","Components/login/Login.tsx","thunks/appThunk.ts","App.tsx","redux/reducers/profilePage-reducer.ts","redux/reducers/dialogsPage-reducer.ts","redux/reducers/navPage-reducer.ts","redux/reducers/usersPage-reducer.ts","redux/reducers/auth-reducer.ts","redux/reducers/app-reducer.ts","redux/redux-store.ts","index.tsx","Components/users/users.module.css","Components/dialogs/dialogs.module.css","Components/login/loginForm.module.css","Components/profile/profileInfo/profileInfo.module.css","Components/header/header.module.css","Components/nav/friendsBlock/friendsBlock.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","typeOfActionDispatch","SidebarTitle","props","className","style","nav__wrap_menu","to","path","title","FriendsBlock","friends","map","f","key","id","nav__friendsBlock_item","nav__friendsBlock_item_img","src","alt","nav__friendsBlock_item_name","pathToDialog","name","isOnline","nav__friendsBlock_item_onlineStatus","Nav","isAuth","useSelector","state","auth","nav","navPage","navTitles","t","nav__friendsBlock","nav__friendsBlock_title","Messages","newMessage","newMessage__img","newMessage__content","message","Names","dialogs__people_name","setUsers","users","type","SET_USERS","setIsFetching","isFetching","SET_IS_FETCHING","setAuthData","authData","SET_AUTH_DATA","setFollowingInProgress","isFollowingProgress","userId","SET_FOLLOWING_IN_PROGRESS","setStatusProfile","statusProfile","SET_STATUS_PROFILE","setAuthError","error","SET_AUTH_ERROR","validationSchema","Yup","DialogMessageTextarea","required","max","DialogMessageForm","formik","useFormik","initialValues","onSubmit","values","addMessage","FormControl","FormGroup","handleSubmit","Grid","container","direction","spacing","item","dialogs__messages_newMesssage_textarea","TextField","placeholder","label","multiline","rows","rowsMax","getFieldProps","errors","touched","color","dialogs__messages_newMesssage_button","Button","NewMessageInputContainer","connect","ADD_MESSAGE","dialogs__messages_newMesssage","mapStateForRedirect","authRedirectHOC","Component","getDialogPageSelector","createSelector","dialogsPage","dialogPage","DialogContainer","compose","dialogs","wrapper__header","wrapper__header_left","wrapper__header_right","wrapper","dialogs__people","names","n","dialogs__messages","messages","m","News","content","Settings","UserItem","s","content__item","content__item_leftBlock","content__item_leftBlock_img","photos","small","content__item_leftBlock_button","followed","onClick","unfollow","disabled","isFollowingInProgress","some","follow","content__item_rightBlock","content__item_rightBlock_name","content__item_rightBlock_status","status","content__item_rightBlock_location","instance","axios","create","withCredentials","baseURL","headers","userAPI","currentPage","pageSize","get","then","res","data","delete","post","authAPI","email","password","rememberMe","captcha","profileAPI","put","setCurrentPage","p","items","this","length","getUsers","pageCount","Math","ceil","totalUsersCount","arrPageCount","i","push","content__wrapper","CircularProgress","circleProgress","page","active_page","u","React","getUsersSelector","usersPage","getTotalUsersCountSelector","getPageSizeSelector","getCurrentPageSelector","getIsFetchingSelector","getIsFollowingInProgressTypeSelector","getIsFollowingInProgress","UsersContainer","dispath","resultCode","FOLLOW_TO_USER","UNFOLLOW_TO_USER","SET_CURRENT_PAGE","totalCount","SET_TOTAL_USERS_COUNT","UsersAPI","MyPost","content__img","content__text","textareaPost","ProfilePostForm","addPost","content__textArea","variant","content__button","NewPostContainer","value","ADD_POST","MyPosts","posts","EditableStatus","useState","editeMode","setEditeMode","localStatus","setLocalStatus","useEffect","onChange","e","currentTarget","onBlur","updateStatus","autoFocus","onDoubleClick","ProfileInfo","contacts","userProfile","Object","keys","content__avatar","large","content__description","content__description_fullName","fullName","content__description_aboutMe","aboutMe","content__description_contacts","content__description_searchJob","lookingForAJob","content__description_desriptionOfJob","lookingForAJobDescription","Profile","profilePage","display","position","top","left","bottom","right","margin","profileStatus","getProfilePageSelector","profile","getUserIdSelector","ProfileContainer","params","authUserId","toString","history","setUserProfile","ProfileContainerWithURL","withRouter","dispatch","SET_USER_PROFILE","Header","header","header__wrapper","header__wrapper_img","logo","header__authBlock","header__authBlock_login","login","logOutProfile","getCaptchaThunk","url","SET_CAPTCHA_VALUE","authProfileThunk","getIsAuthSelector","getServerErrorSelector","serverError","getCaptchaSelector","getLoginSelector","HeaderContainer","min","LoginForm","getCaptcha","useCallback","InputProps","classes","root","fieldErr","styleError","FormControlLabel","control","Checkbox","captcha__content","captcha__content_img","fontSize","Login","login__content","login__content_inner","postLoginData","initializedAppThunk","finally","INITIALIZED_APP","App","isInitialized","app","useDispatch","app__wrapper","app__wrapper_content","render","initialState","initialUsersState","initialAuthState","initialAppState","reducers","combineReducers","action","newPostValue","newPost","newMessageValue","filter","copyState","store","createStore","applyMiddleware","thunk","renderAppTree","ReactDOM","StrictMode","bind","document","getElementById","getState","subscribe","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.c35ac5e6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app__wrapper\":\"app_app__wrapper__3zjyW\",\"app__wrapper_content\":\"app_app__wrapper_content__30D5Q\",\"circleProgress\":\"app_circleProgress__2rhjH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"nav_nav__32Dtx\",\"nav__friendsBlock_title\":\"nav_nav__friendsBlock_title__OPYtZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newMessage\":\"messages_newMessage__H-XRi\",\"newMessage__img\":\"messages_newMessage__img__2RyBM\",\"newMessage__content\":\"messages_newMessage__content__g6ttP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"myPost_content__1RSxM\",\"content__img\":\"myPost_content__img__ab0v1\",\"content__text\":\"myPost_content__text__2GZxT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"newPost_content__2nJOh\",\"content__textArea\":\"newPost_content__textArea__2sjje\",\"content__button\":\"newPost_content__button__3yZ3B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login__content\":\"login_login__content__1Gnuf\",\"login__content_inner\":\"login_login__content_inner__LIZKO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav__wrap_menu\":\"sideBar_nav__wrap_menu__39L7R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs__people_name\":\"names_dialogs__people_name__RNTJh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"news_content__kswPX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"settings_content__3LtiA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"profile_content__1q3D6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"myPosts_posts__2csMZ\"};","module.exports = __webpack_public_path__ + \"static/media/logo.d243bdd9.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached profile has been fetched,\n              // but the previous service worker will still serve the older\n              // profile until all client tabs are closed.\n              console.log(\n                'New profile is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Profile is cached for offline use.\" message.\n              console.log('Profile is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('profile-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {AuthDataType, CommonDataProfileType, UserType} from \"./redux-store\";\r\n\r\nexport enum typeOfActionDispatch {\r\n    ADD_MESSAGE = \"ADD_MESSAGE\",\r\n    ADD_POST = \"ADD_POST\",\r\n    UPDATE_POST = \"UPDATE_POST\",\r\n    FOLLOW_TO_USER = \"FOLLOW_TO_USER\",\r\n    UNFOLLOW_TO_USER = \"UNFOLLOW_TO_USER\",\r\n    SET_USERS = \"SET_USERS\",\r\n    SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\",\r\n    SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\",\r\n    SET_IS_FETCHING = \"SET_IS_FETCHING\",\r\n    SET_USER_PROFILE = \"SET_USER_PROFILE\",\r\n    SET_AUTH_DATA = \"SET_AUTH_DATA\",\r\n    SET_FOLLOWING_IN_PROGRESS = \"SET_FOLLOWING_IN_PROGRESS\",\r\n    SET_STATUS_PROFILE = \"SET_STATUS_PROFILE\",\r\n    SET_AUTH_ERROR = \"SET_AUTH_ERROR\",\r\n    SET_CAPTCHA_VALUE = \"SET_CAPTCHA_VALUE\",\r\n    INITIALIZED_APP = \"INITIALIZED_APP\",\r\n}\r\n\r\nexport type ActionCreatorsType = ReturnType<typeof addPost> |\r\n    ReturnType<typeof addMessage> |\r\n    ReturnType<typeof follow> |\r\n    ReturnType<typeof unfollow> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setTotalUsersCount> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setIsFetching> |\r\n    ReturnType<typeof setUserProfile> |\r\n    ReturnType<typeof setAuthData> |\r\n    ReturnType<typeof setFollowingInProgress> |\r\n    ReturnType<typeof setStatusProfile> |\r\n    ReturnType<typeof setAuthError> |\r\n    ReturnType<typeof setCaptchaValue>|\r\n    ReturnType<typeof initializedApp>\r\n\r\n//actionCreators\r\nexport const updatePost = (newPostValue: string) => {\r\n    return {\r\n        type: typeOfActionDispatch.UPDATE_POST,\r\n        newPostValue\r\n    } as const\r\n};\r\nexport const addPost = (value: string) => {\r\n    return {\r\n        type: typeOfActionDispatch.ADD_POST,\r\n        value\r\n    } as const\r\n};\r\nexport const addMessage = (newMessage: string) => {\r\n    return (\r\n        {type: typeOfActionDispatch.ADD_MESSAGE, message: newMessage}\r\n    ) as const\r\n};\r\nexport const follow = (userId: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.FOLLOW_TO_USER, userId}\r\n    ) as const\r\n};\r\nexport const unfollow = (userId: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.UNFOLLOW_TO_USER, userId}\r\n    ) as const\r\n};\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_USERS, users}\r\n    ) as const\r\n};\r\nexport const setTotalUsersCount = (totalUsersCount: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_TOTAL_USERS_COUNT, totalUsersCount}\r\n    ) as const\r\n};\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_CURRENT_PAGE, currentPage}\r\n    ) as const\r\n};\r\nexport const setIsFetching = (isFetching: boolean) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_IS_FETCHING, isFetching}\r\n    ) as const\r\n};\r\nexport const setUserProfile = (userProfile: CommonDataProfileType) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_USER_PROFILE, userProfile}\r\n    ) as const\r\n};\r\nexport const setAuthData = (authData: AuthDataType) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_AUTH_DATA, authData}\r\n    ) as const\r\n};\r\nexport const setFollowingInProgress = (isFollowingProgress: boolean, userId: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_FOLLOWING_IN_PROGRESS, isFollowingProgress, userId}\r\n    ) as const\r\n};\r\nexport const setStatusProfile = (statusProfile: string) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_STATUS_PROFILE, statusProfile}\r\n    ) as const\r\n}\r\nexport const setAuthError = (error: string | null) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_AUTH_ERROR, error}\r\n    ) as const\r\n};\r\nexport const setCaptchaValue = (captcha: string) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_CAPTCHA_VALUE, captcha}\r\n    ) as const\r\n};\r\nexport const initializedApp = () => {\r\n    return (\r\n        {type: typeOfActionDispatch.INITIALIZED_APP}\r\n    ) as const\r\n};\r\n","import React from \"react\";\r\nimport style from './sideBar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    path: string,\r\n    title: string\r\n}\r\n\r\nexport const SidebarTitle: React.FC<PropsType> = (props) => {\r\n    return <>\r\n        <div className={style.nav__wrap_menu}>\r\n            <NavLink to={props.path}>\r\n                <li>{props.title}</li>\r\n            </NavLink>\r\n        </div>\r\n    </>\r\n}","import React from \"react\";\r\nimport style from './friendsBlock.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {FriendsNavType} from \"../../../redux/redux-store\";\r\n\r\ntype PropsType = {\r\n    friends: FriendsNavType[]\r\n}\r\n\r\nexport const FriendsBlock: React.FC<PropsType> = (props) => {\r\n\r\n    return <>\r\n        {props.friends.map(f => <div key={f.id} className={style.nav__friendsBlock_item}>\r\n                <div className={style.nav__friendsBlock_item_img}>\r\n                    <img src=\"https://icon-library.com/images/avatar-icon-images/avatar-icon-images-4.jpg\" alt=\"\"/>\r\n                </div>\r\n                <div className={style.nav__friendsBlock_item_name}>\r\n                    <NavLink to={f.pathToDialog}>{f.name}</NavLink>\r\n                </div>\r\n                {f.isOnline && <div className={style.nav__friendsBlock_item_onlineStatus}></div>}\r\n            </div>\r\n        )}\r\n    </>\r\n}","import React from \"react\";\r\nimport style from './nav.module.css';\r\nimport {SidebarTitle} from \"./sideBar/SidebarTitle\";\r\nimport {FriendsBlock} from \"./friendsBlock/FriendsBlock\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {navPageType, stateType} from \"../../redux/redux-store\";\r\n\r\ntype propsType = {\r\n    navPage: navPageType\r\n}\r\n\r\nexport const Nav: React.FC<propsType> = (props) => {\r\n\r\n    const isAuth = useSelector<stateType, boolean>(state => state.auth.isAuth)\r\n\r\n    return <div className={style.nav}>\r\n        {props.navPage.navTitles.map((t) => <SidebarTitle key={t.id} title={t.title} path={t.path}/>)}\r\n        <div className={style.nav__friendsBlock}>\r\n            {isAuth && <>\r\n                <div className={style.nav__friendsBlock_title}>\r\n                    <h4>Friends:</h4>\r\n                </div>\r\n                <FriendsBlock friends={props.navPage.friends}/>\r\n            </>}\r\n        </div>\r\n    </div>\r\n}","import React from \"react\";\nimport style from './messages.module.css'\n\ntype propsType = {\n    message: string | number\n}\n\nexport const Messages: React.FC<propsType> = (props) => {\n    return <div className={style.newMessage}>\n        <div className={style.newMessage__img}>\n            <img src=\"https://icon-library.com/images/avatar-icon-images/avatar-icon-images-4.jpg\"/>\n        </div>\n        <div className={style.newMessage__content}>\n            <span>{props.message}</span>\n        </div>\n    </div>\n}","import React from \"react\";\nimport style from './names.module.css'\nimport {NavLink} from \"react-router-dom\";\n\ntype propsType = {\n    name: string,\n    path: string\n}\n\nexport const Names: React.FC<propsType> = (props) => {\n    return <>\n        <div className={style.dialogs__people_name}>\n            <NavLink to={props.path}><span>{props.name}</span></NavLink>\n        </div>\n    </>\n}","import React from \"react\";\r\nimport style from \"../dialogs.module.css\";\r\nimport {Button, FormControl, FormGroup, Grid, TextField} from \"@material-ui/core\";\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\n\r\ntype NewMessageInputType = {\r\n    addMessage: (newMessage: string) => void\r\n}\r\n\r\nexport const NewMessageInput: React.FC<NewMessageInputType> = (props) => {\r\n\r\n    return <div className={style.dialogs__messages_newMesssage}>\r\n        <DialogMessageForm addMessage={props.addMessage}/>\r\n    </div>\r\n}\r\n\r\n\r\ntype IDialogMessageForm = {\r\n    addMessage: (newMessage: string) => void\r\n}\r\n\r\nconst validationSchema = Yup.object({\r\n    DialogMessageTextarea: Yup.string()\r\n        .required('message is required')\r\n        .max(300, 'message should consists 300 char or less')\r\n});\r\n\r\nconst DialogMessageForm: React.FC<IDialogMessageForm> = (props) => {\r\n\r\n    const formik = useFormik({\r\n            initialValues: {\r\n                DialogMessageTextarea: \"\",\r\n            },\r\n            validationSchema,\r\n            onSubmit: values => {\r\n                props.addMessage(values.DialogMessageTextarea)\r\n            },\r\n        })\r\n    ;\r\n\r\n    const errorStyle = {\r\n        color: \"red\",\r\n    }\r\n\r\n    return <>\r\n        <FormControl>\r\n            <FormGroup>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Grid container direction={'column'} spacing={2}>\r\n                        <Grid item>\r\n                            <div className={style.dialogs__messages_newMesssage_textarea}>\r\n                                <TextField placeholder={'enter your message...'}\r\n                                           name={'DialogMessageTextarea'}\r\n                                           label={'message field'}\r\n                                           multiline\r\n                                           rows={2}\r\n                                           rowsMax={4}\r\n                                           {...formik.getFieldProps('DialogMessageTextarea')}/>\r\n                            </div>\r\n                            {formik.errors.DialogMessageTextarea && formik.touched.DialogMessageTextarea ?\r\n                                <div style={errorStyle}>{formik.errors.DialogMessageTextarea}</div> : null}\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <div className={style.dialogs__messages_newMesssage_button}>\r\n                                <Button color={'default'} type={'submit'}>Send</Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </FormGroup>\r\n        </FormControl>\r\n    </>\r\n\r\n}","import React from \"react\";\r\nimport {addMessage} from \"../../../redux/TypesForRedux\";\r\nimport {NewMessageInput} from \"./NewMessageInput\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nexport const NewMessageInputContainer = connect(null, {addMessage})(NewMessageInput)","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {stateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateForRedirectType = {\r\n    isAuth : boolean\r\n}\r\n\r\nconst mapStateForRedirect = (state: stateType):MapStateForRedirectType => {\r\n    return {\r\n        isAuth:state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const authRedirectHOC = (Component: ComponentType<any>) => {\r\n\r\n    const authRedirectComponent:React.FC<MapStateForRedirectType> = (props) => {\r\n\r\n        if (!props.isAuth) {\r\n            return <Redirect to = {'/login'} />\r\n        }\r\n\r\n        return <Component {...props} />\r\n\r\n    }\r\n                    // @ts-ignore\r\n    return  connect<any>(mapStateForRedirect, null)(authRedirectComponent)\r\n\r\n}","import {createSelector} from 'reselect'\r\nimport {dialogsPageType, stateType} from \"../redux-store\";\r\n\r\ntype GetDialogPageType = (state: stateType) => dialogsPageType\r\n\r\n\r\n\r\n\r\n//dialogPage\r\nconst getDialogPage:GetDialogPageType = (state) => state.dialogsPage\r\n\r\nexport const getDialogPageSelector = createSelector(getDialogPage,(dialogPage) => {\r\n        return dialogPage\r\n})","import React from \"react\";\r\nimport style from './dialogs.module.css'\r\nimport {Messages} from \"./Messages/Messages\";\r\nimport {Names} from \"./Names/Names\";\r\nimport {NewMessageInputContainer} from \"./newMessageInput/NewMessageInputContainer\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType, dialogsPageType} from \"../../redux/redux-store\";\r\nimport {authRedirectHOC} from \"../../hoc/authRedirectHOC\";\r\nimport {compose} from \"redux\";\r\nimport {getDialogPageSelector} from \"../../redux/selectors/DialogSelectors\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogPage: dialogsPageType\r\n}\r\n\r\ntype PropsType = MapStateToPropsType\r\n\r\nexport const Dialog = (props: PropsType) => {\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.wrapper__header}>\r\n                <div className={style.wrapper__header_left}>Messages</div>\r\n                <div className={style.wrapper__header_right}>Some name</div>\r\n            </div>\r\n            <div className={style.wrapper}>\r\n                <div className={style.dialogs__people}>\r\n                    {props.dialogPage.names.map((n) => <Names key={n.id} name={n.name} path={n.path}/>)}\r\n                </div>\r\n                <div className={style.dialogs__messages}>\r\n                    {props.dialogPage.messages.map((m) => <Messages key={m.id} message={m.message}/>)}\r\n                    <NewMessageInputContainer/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: stateType): MapStateToPropsType => ({\r\n    dialogPage: getDialogPageSelector(state)\r\n})\r\n\r\n\r\nexport const DialogContainer = compose(\r\n    authRedirectHOC,\r\n    // @ts-ignore\r\n    (connect<PropsType>(mapStateToProps, null)))(Dialog)\r\n","import React from 'react';\r\nimport style from './news.module.css'\r\n\r\nexport const News= () => {\r\n    return (\r\n        <div className={style.content}>\r\n           News\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport style from './settings.module.css'\r\n\r\nexport const Settings= () => {\r\n    return (\r\n        <div className={style.content}>\r\n           Settings\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./users.module.css\";\r\nimport {PhotosType} from \"../../redux/redux-store\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype UserItemType = {\r\n    id: number\r\n    photos: PhotosType\r\n    followed: boolean\r\n    name: string | null\r\n    status: string | null\r\n    isFollowingInProgress: number[]\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\n\r\nexport const UserItem: React.FC<UserItemType> = (props) => {\r\n\r\n\r\n    const follow = () => {\r\n        props.follow(props.id)\r\n    }\r\n\r\n    const unfollow = () => {\r\n        props.unfollow(props.id)\r\n    }\r\n\r\n    return <div className={s.content__item} key={props.id}>\r\n        <div className={s.content__item_leftBlock}>\r\n            <div className={s.content__item_leftBlock_img}>\r\n                <NavLink to={'/profile/' + props.id}>\r\n                    <img\r\n                        src={(props.photos.small) ? props.photos.small : \"https://i.pinimg.com/originals/1d/a5/a0/1da5a0d16d1f7dd7e43b6da4b68cdf46.png\"}\r\n                        alt=\"\"/>\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.content__item_leftBlock_button}>\r\n                {(props.followed) ? <button onClick={unfollow} disabled={props.isFollowingInProgress.some(id => id == props.id)}>unfollow</button> :\r\n                    <button onClick={follow} disabled={props.isFollowingInProgress.some(id => id == props.id)}>follow</button>}\r\n            </div>\r\n        </div>\r\n        <div className={s.content__item_rightBlock}>\r\n            <div className={s.content__item_rightBlock_name}>\r\n                <span>{props.name}</span>\r\n            </div>\r\n            <div className={s.content__item_rightBlock_status}>\r\n                <span>{props.status}</span>\r\n            </div>\r\n            <div className={s.content__item_rightBlock_location}>\r\n                <span>{'some city'}</span>\r\n                <span>{'some country'}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import axios from 'axios';\r\nimport {\r\n    CommonAuthStateType,\r\n    CommonDataProfileType,\r\n    CommonDataUsersType,\r\n    CommonSibscribeDataType,\r\n    UserType\r\n} from \"../redux/redux-store\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": '959808d3-8efe-42bd-88eb-3693675e6c98'\r\n    }\r\n})\r\n\r\ntype UserAPIProps = {\r\n    setUsers: (currentPage: number, pageSize: number) => Promise<CommonDataUsersType<UserType[]>>\r\n    unfollow: (userId: number) => Promise<CommonSibscribeDataType>\r\n    follow: (userId: number) => Promise<CommonSibscribeDataType>\r\n}\r\ntype AuthAPIProps = {\r\n    setAuth: () => Promise<CommonAuthStateType>\r\n    logIn: (email: string, password: string, rememberMe: boolean, captcha?: string) => Promise<CommonAuthStateType>\r\n    logout: () => Promise<any>\r\n    getCaptcha: () => Promise<{url: string}>\r\n}\r\ntype ProfileAPIProps = {\r\n    setUserProfile: (userId: string) => Promise<CommonDataProfileType>\r\n    setStatusProfile: (userId: string) => Promise<string>\r\n    updateStatusProfile: (status: string) => Promise<string>\r\n}\r\n\r\nexport const userAPI: UserAPIProps = {\r\n\r\n    setUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<CommonDataUsersType<UserType[]>>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    unfollow(userId) {\r\n        return instance.delete<CommonSibscribeDataType>(`follow/${userId}`)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    follow(userId) {\r\n        return instance.post<CommonSibscribeDataType>(`follow/${userId}`)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    }\r\n}\r\n\r\nexport const authAPI: AuthAPIProps = {\r\n\r\n    setAuth() {\r\n        return instance.get<CommonAuthStateType>('auth/me')\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    logIn(email, password, rememberMe, captcha) {\r\n        return instance.post<CommonAuthStateType>('auth/login', {email, password, rememberMe, captcha})\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonAuthStateType>('auth/login')\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    getCaptcha(){\r\n        return instance.get<{url: string}>(`/security/get-captcha-url`)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n\r\n}\r\n\r\n\r\nexport const profileAPI: ProfileAPIProps = {\r\n\r\n    setUserProfile(userId) {\r\n        return instance.get<CommonDataProfileType>(`profile/${userId}`)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    setStatusProfile(userId) {\r\n        return instance.get<any>(`profile/status/${userId}`)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    updateStatusProfile(status) {\r\n        return instance.put<any>(`profile/status`, {status})\r\n            .then(res => {\r\n                debugger\r\n                return res.data\r\n            })\r\n    },\r\n}","import React from 'react';\r\nimport s from './users.module.css'\r\nimport {UserType} from \"../../redux/redux-store\";\r\nimport {UserItem} from \"./UserItem\";\r\nimport {userAPI} from \"../../API/API\";\r\nimport {authRedirectHOC} from \"../../hoc/authRedirectHOC\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\ntype UsersPropsType = {\r\n    follow: (userId: number) => void,\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setIsFetching: (isFetching: boolean) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n    users: Array<UserType>\r\n    totalUsersCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    isFollowingInProgress: number[]\r\n}\r\n\r\n\r\nexport class UsersAPI extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount(): void {\r\n\r\n        if (this.props.users.length === 0) {\r\n            this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n        }\r\n    }\r\n\r\n    setCurrentPage = (p: number) => {\r\n        this.props.setCurrentPage(p)\r\n        this.props.setIsFetching(true)\r\n        userAPI.setUsers(p, this.props.pageSize).then(res => {\r\n            this.props.setIsFetching(false)\r\n            this.props.setUsers(res.items)\r\n            this.props.setIsFetching(false)\r\n        })\r\n    }\r\n\r\n\r\n    render(): React.ReactNode {\r\n\r\n        //pagination\r\n        let pageCount = Math.ceil(this.props.totalUsersCount / this.props.pageSize)\r\n        let arrPageCount = [];\r\n\r\n\r\n        for (let i = 1; pageCount >= i; i++) {\r\n            arrPageCount.push(i)\r\n        }\r\n        // ---- pagination ----\r\n\r\n        return (\r\n            <div className={s.content__wrapper}>\r\n                {this.props.isFetching && <CircularProgress className={s.circleProgress}/>}\r\n                {/*pagination*/}\r\n                {\r\n                    arrPageCount.map(p => {\r\n                        return <span key={p}\r\n                                     className={(this.props.currentPage === p) ? `${s.page} ${s.active_page}` : `${s.page}`}\r\n                                     onClick={() => this.setCurrentPage(p)}> {p} </span>\r\n                    })\r\n                }\r\n                {/*-----pagination-----*/}\r\n                {\r\n                    this.props.users.map(u => {\r\n\r\n                        const unfollow = (userId: number) => {\r\n\r\n                            this.props.unfollow(userId)\r\n                        }\r\n\r\n                        const follow = (userId: number) => {\r\n\r\n                            this.props.follow(userId)\r\n                        }\r\n\r\n                        return <UserItem key={u.id}\r\n                                         id={u.id}\r\n                                         status={u.status}\r\n                                         photos={u.photos}\r\n                                         followed={u.followed}\r\n                                         unfollow={unfollow}\r\n                                         follow={follow}\r\n                                         name={u.name}\r\n                                         isFollowingInProgress={this.props.isFollowingInProgress}/>\r\n\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default authRedirectHOC(UsersAPI)","import {createSelector} from 'reselect'\r\nimport {stateType, UserType} from \"../redux-store\";\r\n\r\ntype GetUsersType = (state: stateType) => UserType[]\r\ntype GetTotalUsersCountType = (state: stateType) => number\r\ntype GetPageSizeType = (state: stateType) => number\r\ntype GetCurrentPageType = (state: stateType) => number\r\ntype GetIsFetchingType = (state: stateType) => boolean\r\ntype GetIsFollowingInProgressType = (state: stateType) => number[]\r\n\r\n\r\n\r\n\r\n//Users\r\nconst getUsers:GetUsersType = (state) => state.usersPage.users\r\n\r\nexport const getUsersSelector = createSelector(getUsers,(users) => {\r\n        return users\r\n})\r\n\r\n\r\n//totalUsersCount\r\nconst getTotalUsersCount:GetTotalUsersCountType = (state) => state.usersPage.totalUsersCount\r\n\r\nexport const getTotalUsersCountSelector = createSelector(getTotalUsersCount,(totalUsersCount) => {\r\n        return totalUsersCount\r\n})\r\n\r\n\r\n//pageSize\r\nconst getPageSize:GetPageSizeType = (state) => state.usersPage.pageSize\r\n\r\nexport const getPageSizeSelector = createSelector(getPageSize,(pageSize) => {\r\n        return pageSize\r\n})\r\n\r\n//currentPage\r\nconst getCurrentPage:GetCurrentPageType = (state) => state.usersPage.currentPage\r\n\r\nexport const getCurrentPageSelector = createSelector(getCurrentPage,(currentPage) => {\r\n        return currentPage\r\n})\r\n\r\n//isFetching\r\nconst getIsFetching:GetIsFetchingType = (state) => state.usersPage.isFetching\r\n\r\nexport const getIsFetchingSelector = createSelector(getIsFetching,(isFetching) => {\r\n        return isFetching\r\n})\r\n\r\n//getIsFollowingInProgress\r\nconst getIsFollowingInProgress:GetIsFollowingInProgressType = (state) => state.usersPage.isFollowingInProgress\r\n\r\nexport const getIsFollowingInProgressTypeSelector = createSelector(getIsFollowingInProgress,(getIsFollowingInProgress) => {\r\n        return getIsFollowingInProgress\r\n})","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport UsersAPI from \"./UsersAPI\";\r\nimport {setUsers,\r\n    setCurrentPage, setIsFetching, setFollowingInProgress\r\n} from \"../../redux/TypesForRedux\";\r\nimport {stateType, UserType} from \"../../redux/redux-store\";\r\nimport {getUsersThunk, followToUserThunk, unfollowToUserThunk} from '../../thunks/usersThunk';\r\nimport {getTotalUsersCountSelector, getUsersSelector, getPageSizeSelector, getCurrentPageSelector, getIsFetchingSelector, getIsFollowingInProgressTypeSelector} from '../../redux/selectors/UsersSelectors';\r\n\r\ntype mapStateToPropsType = {\r\n    users: Array<UserType>\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    isFollowingInProgress: number[]\r\n}\r\n\r\nconst mapStateToProps = (state: stateType): mapStateToPropsType => {\r\n    return {\r\n        users: getUsersSelector(state),\r\n        totalUsersCount: getTotalUsersCountSelector(state),\r\n        pageSize: getPageSizeSelector(state),\r\n        currentPage: getCurrentPageSelector(state),\r\n        isFetching: getIsFetchingSelector(state),\r\n        isFollowingInProgress: getIsFollowingInProgressTypeSelector(state)\r\n    }\r\n}\r\n\r\nexport const UsersContainer = connect(mapStateToProps, {\r\n    follow: followToUserThunk,\r\n    unfollow:unfollowToUserThunk,\r\n    setUsers,\r\n    setCurrentPage,\r\n    setIsFetching,\r\n    setFollowingInProgress,\r\n    getUsers: getUsersThunk,\r\n})(UsersAPI)","import {userAPI} from \"../API/API\";\r\nimport {\r\n    setIsFetching,\r\n    setUsers,\r\n    setTotalUsersCount,\r\n    setFollowingInProgress,\r\n    unfollow,\r\n    follow\r\n} from \"../redux/TypesForRedux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype GetUsersThunkType = (currentPage: number, pageSize: number) => void\r\ntype FollowToUserThunkType = (userId: number) => void\r\ntype UnfollowToUserThunkType = (userId: number) => void\r\n\r\n\r\nexport const getUsersThunk: GetUsersThunkType = (currentPage, pageSize) => {\r\n\r\n    return (dispath: Dispatch) => {\r\n        dispath(setIsFetching(true))\r\n        userAPI.setUsers(currentPage, pageSize).then(res => {\r\n            dispath(setIsFetching(false))\r\n            dispath(setUsers(res.items))\r\n            dispath(setTotalUsersCount(res.totalCount))\r\n        })\r\n    }\r\n};\r\n\r\nexport const followToUserThunk: FollowToUserThunkType = (userId) => {\r\n\r\n    return (dispath: Dispatch) => {\r\n        dispath(setFollowingInProgress(true, userId))\r\n        userAPI.follow(userId)\r\n            .then(res => {\r\n                if (res.resultCode === 0) {\r\n                    dispath(follow(userId))\r\n                    dispath(setFollowingInProgress(false, userId))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const unfollowToUserThunk: UnfollowToUserThunkType = (userId) => {\r\n\r\n    return (dispath: Dispatch) => {\r\n\r\n        dispath(setFollowingInProgress(true, userId))\r\n        userAPI.unfollow(userId)\r\n            .then(res => {\r\n                if (res.resultCode === 0) {\r\n                    dispath(unfollow(userId))\r\n                    dispath(setFollowingInProgress(false, userId))\r\n                }\r\n            })\r\n    }\r\n};","import React from 'react';\r\nimport style from './myPost.module.css'\r\n\r\ntype propsType = {\r\n    message: string | number\r\n}\r\n\r\n\r\nexport const MyPost: React.FC<propsType> = (props) => {\r\n    return (\r\n        <div className={style.content}>\r\n            <div className={style.content__img}>\r\n                <img src={'https://tr.rbxcdn.com/47055e576c5566fb6b384a8fccf98c64/420/420/Decal/Png'} alt=\"\"/>\r\n            </div>\r\n            <div className={style.content__text}>\r\n                <span>{props.message}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react';\r\nimport style from './newPost.module.css'\r\nimport {useFormik} from \"formik\";\r\nimport {FormControl, FormGroup, Grid, TextField, Button} from \"@material-ui/core\";\r\nimport * as Yup from \"yup\";\r\n\r\ntype FormDataType = {\r\n    textareaPost: string\r\n}\r\n\r\ntype propsType = {\r\n    addPost: (newPostValue: string) => void\r\n}\r\n\r\nexport const NewPost: React.FC<propsType> = (props) => {\r\n\r\n    return (\r\n        <div className={style.content}>\r\n            <ProfilePostForm addPost={props.addPost}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface IProfilePostForm {\r\n    addPost: (newPostValue: string) => void\r\n}\r\n\r\nconst validationSchema = Yup.object({\r\n    textareaPost: Yup.string()\r\n        .required('post is required')\r\n        .max(300,'post should consists 300 char or less')\r\n});\r\n\r\n\r\nconst ProfilePostForm: React.FC<IProfilePostForm> = (props) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            textareaPost: '',\r\n        },\r\n        validationSchema,\r\n        onSubmit: values => {\r\n            if (values.textareaPost) {\r\n                props.addPost(values.textareaPost)\r\n            }\r\n        },\r\n    });\r\n\r\n    const errorStype = {\r\n        color: \"red\",\r\n    }\r\n\r\n    return <>\r\n        <FormControl>\r\n            <FormGroup>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Grid container direction={\"column\"} spacing={3}>\r\n                        <Grid item>\r\n                            <div className={style.content__textArea}>\r\n                                <TextField placeholder={'enter some text...'}\r\n                                           name={'textareaPost'}\r\n                                           variant=\"outlined\"\r\n                                           multiline\r\n                                           rows={2}\r\n                                           rowsMax={4}\r\n                                           {...formik.getFieldProps('textareaPost')}/>\r\n                            </div>\r\n                            {formik.errors.textareaPost && formik.touched.textareaPost ?\r\n                                <div style={errorStype}>{formik.errors.textareaPost}</div> : null}\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <div className={style.content__button}>\r\n                                <Button type={'submit'} variant='contained'>Send</Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </FormGroup>\r\n        </FormControl>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport {addPost} from \"../../../../redux/TypesForRedux\";\r\nimport {connect} from \"react-redux\";\r\nimport {NewPost} from \"./NewPost\";\r\n\r\n\r\nexport const NewPostContainer = connect(null, {addPost})(NewPost);\r\n","import React from \"react\";\r\nimport style from './myPosts.module.css'\r\nimport { MyPost } from \"./myPost/MyPost\";\r\nimport { NewPostContainer } from \"./newPost/NewPostContainer\";\r\nimport {profilePostsType} from \"../../../redux/redux-store\";\r\n\r\ntype propsType = {\r\n    posts:Array<profilePostsType>\r\n}\r\n\r\nexport const MyPosts:React.FC<propsType> = (props) => {\r\n\r\n    return (\r\n        <div className={style.posts}>\r\n            <div className=\"content__posts\">\r\n                Create a new post:\r\n                <NewPostContainer />\r\n                {props.posts.map((p) => <MyPost message ={p.message} key={p.id} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype EditebleStatusPropsType = {\r\n    status: string\r\n    updateStatus: (title: string) => void\r\n    userId: string\r\n}\r\n\r\n\r\nexport const EditableStatus: React.FC<EditebleStatusPropsType> = (props) => {\r\n\r\n    let userId = props.userId\r\n\r\n    if(!userId){\r\n        userId = '7788'\r\n    }\r\n\r\n    const [editeMode, setEditeMode] = useState<boolean>(false)\r\n    const [localStatus, setLocalStatus] = useState<string>(props.status)\r\n\r\n    const onBlurHandler = () => {\r\n        props.updateStatus(localStatus)\r\n        setEditeMode(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (localStatus !== props.status) {\r\n            setLocalStatus(props.status)\r\n        }\r\n    }, [props.status])\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return <div>\r\n        {(editeMode && userId == '7788') ?\r\n                <div><input type=\"text\" value={localStatus} onChange={onChangeHandler} onBlur={onBlurHandler}\r\n                            autoFocus={true}/></div> :\r\n                <div><span onDoubleClick={() => setEditeMode(true)}>{props.status}</span></div>}\r\n    </div>\r\n}","import React from \"react\";\r\nimport s from './profileInfo.module.css';\r\nimport {CommonDataProfileType, SocialContactsType} from \"../../../redux/redux-store\";\r\nimport {EditableStatus} from \"./EditableStatus\";\r\n\r\ntype PropsType = {\r\n    userProfile: CommonDataProfileType\r\n    status: string\r\n    updateStatus: (title: string) => void\r\n    userId: string\r\n}\r\n\r\nexport const ProfileInfo: React.FC<PropsType> = (props) => {\r\n\r\n    let contacts: any\r\n    if (props.userProfile && props.userProfile.contacts) {\r\n        let keys = Object.keys(props.userProfile.contacts)\r\n        contacts = keys.map((key) => {\r\n\r\n            return (\r\n                <div>\r\n                    <p>{key}</p> : {props.userProfile.contacts[key as keyof SocialContactsType]}\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    return <>\r\n        <div className={s.content__avatar}>\r\n            <img src={(props.userProfile?.photos?.large) ? props.userProfile?.photos?.large :\r\n                \"https://i.pinimg.com/originals/1d/a5/a0/1da5a0d16d1f7dd7e43b6da4b68cdf46.png\"} alt=\"\"/>\r\n        </div>\r\n        <div className={s.content__description}>\r\n            <EditableStatus status={props.status} updateStatus={props.updateStatus} userId={props.userId}/>\r\n            <div className={s.content__description_fullName}>\r\n                <b>FullName</b>: {props.userProfile?.fullName}\r\n            </div>\r\n            <div className={s.content__description_aboutMe}>\r\n                <b>AboutMe</b>: {props.userProfile?.aboutMe}\r\n            </div>\r\n            <div className={s.content__description_contacts}>\r\n                <b>Contacts</b>:\r\n                {contacts}\r\n            </div>\r\n            <div className={s.content__description_searchJob}>\r\n                <b>Search a job:</b> {(props.userProfile?.lookingForAJob) ? \"Yes\" : \"No\"}\r\n            </div>\r\n            <div className={s.content__description_desriptionOfJob}>\r\n                <b>Description of job:</b> {(props.userProfile?.lookingForAJobDescription) ?\r\n                props.userProfile.lookingForAJobDescription :\r\n                \"No description\"}\r\n            </div>\r\n        </div>\r\n    </>\r\n\r\n}","import React, {CSSProperties} from 'react';\r\nimport style from './profile.module.css'\r\nimport {MyPosts} from \"./myPosts/MyPosts\";\r\nimport {ProfileInfo} from \"./profileInfo/ProfileInfo\";\r\nimport {profilePageType} from \"../../redux/reducers/profilePage-reducer\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\ntype propsType = {\r\n    profilePage: profilePageType\r\n    updateStatus: (title: string) => void\r\n    userId: string\r\n}\r\n\r\nexport const Profile: React.FC<propsType> = (props) => {\r\n\r\n    const circleProgressStyle: CSSProperties = {\r\n        display: 'block',\r\n        position: \"absolute\",\r\n        top: '0',\r\n        left: '0',\r\n        bottom: '0',\r\n        right: '0',\r\n        margin: 'auto',\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.content}>\r\n            {props.profilePage.isFetching ?\r\n                <CircularProgress style={circleProgressStyle}/> : <>\r\n                    <ProfileInfo userProfile={props.profilePage.userProfile}\r\n                                 status={props.profilePage.profileStatus}\r\n                                 updateStatus={props.updateStatus}\r\n                                 userId={props.userId}/>\r\n                    <MyPosts posts={props.profilePage.posts}/>\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n\r\n}","import { createSelector } from 'reselect'\r\nimport {stateType} from \"../redux-store\";\r\nimport { profilePageType } from '../reducers/profilePage-reducer';\r\n\r\ntype GetProfilePageType = (state: stateType) => profilePageType\r\ntype GetUserIdType = (state: stateType) => number | null\r\n\r\n\r\n\r\n\r\n//profilePage\r\nconst getProfilePage:GetProfilePageType = (state) => state.profilePage\r\n\r\nexport const getProfilePageSelector = createSelector(getProfilePage,(profile) => {\r\n        return profile\r\n})\r\n\r\n\r\n//profilePage\r\nconst getUserId:GetUserIdType = (state) => state.auth.id\r\n\r\nexport const getUserIdSelector = createSelector(getUserId,(userId) => {\r\n        return userId\r\n})","import React from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {setUserProfileThunk, setUserStatusThunk, updateUserStatusThunk} from \"../../thunks/profileThunk\";\r\nimport {authRedirectHOC} from '../../hoc/authRedirectHOC';\r\nimport {compose} from 'redux';\r\nimport {profilePageType} from '../../redux/reducers/profilePage-reducer';\r\nimport { getProfilePageSelector, getUserIdSelector } from '../../redux/selectors/ProfileSelectors';\r\n\r\ntype MstpType = {\r\n    profilePage: profilePageType\r\n    authUserId: number | null\r\n}\r\n\r\ntype MdtpType = {\r\n    setUserProfile: (userId: string) => void\r\n    setStatusProfile: (userId: string) => void\r\n    updateStatus: (title: string) => void\r\n    updatePhoto: (photoURL: File) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & MdtpType & MstpType\r\n\r\nexport class ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount(): void {\r\n\r\n        let userId = this.props.match.params.userId;\r\n\r\n        if (!userId) {\r\n            if(this.props.authUserId !== null){\r\n                userId = this.props.authUserId.toString();\r\n            } else {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n\r\n        this.props.setUserProfile(userId)\r\n         this.props.setStatusProfile(userId)\r\n    }\r\n\r\n\r\n    render(): React.ReactNode {\r\n        return (\r\n            <Profile profilePage={this.props.profilePage}\r\n                     updateStatus={this.props.updateStatus}\r\n                     userId={this.props.match.params.userId}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: stateType): MstpType => {\r\n    return {\r\n        profilePage: getProfilePageSelector(state),\r\n        authUserId: getUserIdSelector(state),\r\n    }\r\n}\r\n\r\nexport const ProfileContainerWithURL = compose(\r\n    authRedirectHOC,\r\n    withRouter,\r\n    //@ts-ignore\r\n    connect<any>(mapStateToProps, {\r\n        setUserProfile: setUserProfileThunk,\r\n        setStatusProfile: setUserStatusThunk,\r\n        updateStatus: updateUserStatusThunk,\r\n    }))(ProfileContainer)\r\n\r\n","import {profileAPI} from \"../API/API\";\r\nimport {setIsFetching, setStatusProfile, setUserProfile} from \"../redux/TypesForRedux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype SetUserProfileThunkType = (userId: string) => void\r\ntype SetUserStatusThunkType = (userId: string) => void\r\ntype UpdateUserStatusThunkType = (userId: string) => void\r\ntype UpdateProfilePhotoThunk = (photoURL: File) => void\r\n\r\n\r\nexport const setUserProfileThunk: SetUserProfileThunkType = (userId) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n\r\n        dispatch(setIsFetching(true))\r\n        profileAPI.setUserProfile(userId)\r\n            .then(data => {\r\n                dispatch(setUserProfile(data))\r\n                dispatch(setIsFetching(false))\r\n            })\r\n    }\r\n};\r\nexport const setUserStatusThunk: SetUserStatusThunkType = (userId) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n\r\n        dispatch(setIsFetching(true))\r\n        profileAPI.setStatusProfile(userId)\r\n            .then(data => {\r\n                dispatch(setStatusProfile(data))\r\n            })\r\n    }\r\n};\r\nexport const updateUserStatusThunk: UpdateUserStatusThunkType = (title) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.updateStatusProfile(title)\r\n            .then(data => {\r\n                dispatch(setStatusProfile(title))\r\n            })\r\n    }\r\n};\r\n","import React from 'react';\r\nimport style from './header.module.css'\r\nimport logo from '../../images/logo.png'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n    logOutProfile:() => void\r\n}\r\n\r\n\r\nexport const Header: React.FC<PropsType> = (props) => {\r\n\r\n    const logOut = () => {\r\n        props.logOutProfile()\r\n    }\r\n\r\n    return (\r\n        <div className={style.header}>\r\n            <div className={style.header__wrapper}>\r\n                <div className={style.header__wrapper_img}>\r\n                    <img src={logo} alt=\"logo\"/>\r\n                </div>\r\n                <div className={style.header__authBlock}>\r\n                    {props.isAuth ?\r\n                        <div className={style.header__authBlock_login}>\r\n                            <span>{props.login}</span>\r\n                            <button onClick={logOut}>LOG OUT</button>\r\n                        </div> :\r\n                        <NavLink to={'/login'}>Login</NavLink>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n","import {authAPI} from \"../API/API\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAuthData, setAuthError, setCaptchaValue} from \"../redux/TypesForRedux\";\r\n\r\ntype AuthProfileThunkType = () => any\r\ntype AuthPostProfileDataThunkType = (email: string, password: string, rememberMe: boolean, captcha?: string) => void\r\ntype GetCaptchaThunkType = () => any\r\n\r\nexport const getCaptchaThunk: GetCaptchaThunkType = () => {\r\n\r\n    return (dispath: Dispatch) => {\r\n        authAPI.getCaptcha()\r\n            .then(res => {\r\n                    dispath(setCaptchaValue(res.url))\r\n                }\r\n            )\r\n\r\n    }\r\n};\r\n\r\nexport const authProfileThunk: AuthProfileThunkType = () => {\r\n\r\n    return (dispath: Dispatch) => {\r\n        return authAPI.setAuth()\r\n            .then(res => {\r\n                debugger\r\n                if (res.resultCode === 0) {\r\n                    dispath(setAuthData(res.data))\r\n                }\r\n            })\r\n\r\n    }\r\n};\r\n\r\nexport const logInProfileThunk: AuthPostProfileDataThunkType = (email, password, rememberMe, captcha) => {\r\n\r\n    return (dispath: Dispatch) => {\r\n        dispath(setAuthError(null))\r\n        authAPI.logIn(email, password, rememberMe, captcha)\r\n            .then(res => {\r\n                    if (res.resultCode === 0) {\r\n                        dispath(authProfileThunk())\r\n                    } else if (res.resultCode === 10) {\r\n                        dispath(getCaptchaThunk())\r\n                    } else {\r\n                        if (res.messages.length) {\r\n                            dispath(setAuthError(res.messages[0]))\r\n                        }\r\n                    }\r\n                }\r\n            )\r\n\r\n    }\r\n};\r\n\r\nexport const logOutProfileThunk: AuthPostProfileDataThunkType = () => {\r\n\r\n    return (dispath: Dispatch) => {\r\n\r\n        authAPI.logout()\r\n            .then(res => {\r\n                if (res.resultCode === 0) {\r\n                    dispath(setAuthData({email: null, login: null, id: null}))\r\n                }\r\n            })\r\n\r\n    }\r\n};","import { createSelector } from 'reselect'\r\nimport {stateType} from \"../redux-store\";\r\n\r\ntype GetIsAuthType = (state: stateType) => boolean\r\ntype GetServerErrorType = (state: stateType) => string | null\r\ntype GetCaptchaType = (state: stateType) => any\r\n\r\n\r\n\r\n\r\n//isAuth\r\nconst getIsAuth:GetIsAuthType = (state) => state.auth.isAuth\r\n\r\nexport const getIsAuthSelector = createSelector(getIsAuth,(isAuth) => {\r\n        return isAuth\r\n})\r\n\r\n\r\n//serverError\r\nconst getServerError:GetServerErrorType = (state) => state.auth.error\r\n\r\nexport const getServerErrorSelector = createSelector(getServerError,(serverError) => {\r\n        return serverError\r\n})\r\n\r\n//getCaptcha\r\nconst getCaptcha:GetCaptchaType = (state) => state.auth.captcha\r\n\r\nexport const getCaptchaSelector = createSelector(getCaptcha,(captcha) => {\r\n        return captcha\r\n})","import { createSelector } from 'reselect'\r\nimport {stateType} from \"../redux-store\";\r\n\r\ntype GetLoginType = (state: stateType) => string | null\r\n\r\n\r\n\r\n\r\n//login\r\nconst getLogin:GetLoginType = (state) => state.auth.login\r\n\r\nexport const getLoginSelector = createSelector(getLogin,(login) => {\r\n        return login\r\n})\r\n\r\n\r\n","import React from 'react';\r\nimport {Header} from \"./Header\";\r\nimport {connect} from 'react-redux';\r\nimport {stateType} from '../../redux/redux-store';\r\nimport {logOutProfileThunk} from '../../thunks/authThunk';\r\nimport {getIsAuthSelector} from \"../../redux/selectors/LoginSelectors\";\r\nimport { getLoginSelector } from '../../redux/selectors/HeaderSelectors';\r\n\r\ntype MstpType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\ntype MdtpType = {\r\n    logOutProfile: () => void\r\n}\r\n\r\ntype PropsType = MstpType & MdtpType\r\n\r\nclass HeaderContainer extends React.Component<PropsType> {\r\n\r\n    render(): React.ReactNode {\r\n        return <Header isAuth={this.props.isAuth}\r\n                       login={this.props.login}\r\n                       logOutProfile={this.props.logOutProfile}/>\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: stateType): MstpType => {\r\n    return {\r\n        isAuth: getIsAuthSelector(state),\r\n        login: getLoginSelector(state),\r\n    }\r\n}\r\n\r\n//@ts-ignore\r\nexport default connect<PropsType, any>(mapStateToProps, {logOutProfile: logOutProfileThunk})(HeaderContainer)","import React, {useCallback} from \"react\";\r\nimport s from \"./loginForm.module.css\";\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    Grid,\r\n    TextField,\r\n} from \"@material-ui/core\";\r\nimport * as Yup from 'yup';\r\nimport {useFormik} from \"formik\";\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport classes from \"./loginForm.module.css\";\r\n\r\ninterface IFormData {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n    error: string | null\r\n    captcha?: string\r\n    getCaptcha: () => void\r\n}\r\n\r\ntype InitialValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\n\r\nconst validationSchema = Yup.object({\r\n    email: Yup.string()\r\n        .email('Enter a valid email')\r\n        .required('Email is required'),\r\n    password: Yup.string()\r\n        .min(8, 'Minimum 8 characters length')\r\n        .max(20, 'Max 20 characters length')\r\n        .required('Password is required'),\r\n\r\n});\r\n\r\n\r\nexport const LoginForm: React.FC<IFormData> = (props) => {\r\n\r\n    const {error, login, captcha} = props\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n            captcha: '',\r\n        },\r\n\r\n        validationSchema,\r\n        onSubmit: (values: InitialValuesType) => {\r\n            login(values.email, values.password, values.rememberMe, values.captcha)\r\n        },\r\n    });\r\n\r\n    const getCaptcha = useCallback(() => {\r\n        props.getCaptcha()\r\n    }, [])\r\n\r\n    return <>\r\n        <FormControl>\r\n            <FormGroup>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Grid container direction={\"column\"} spacing={2}>\r\n                        <Grid item>\r\n                            <div>\r\n                                <TextField name={'email'}\r\n                                           label={'email'}\r\n                                           variant=\"outlined\"\r\n                                           {...formik.getFieldProps('email')}\r\n                                           InputProps={{\r\n                                               classes: {\r\n                                                   root: classes.fieldErr,\r\n                                               }\r\n                                           }}\r\n                                />\r\n                            </div>\r\n                            {formik.errors.email && formik.touched.email ? (\r\n                                <div className={s.styleError}>{formik.errors.email}</div>) : null}\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <div>\r\n                                <TextField name={'password'}\r\n                                           label={'password'}\r\n                                           type=\"password\"\r\n                                           variant=\"outlined\"\r\n                                           {...formik.getFieldProps('password')}/>\r\n                            </div>\r\n                            {!formik.errors.password && error ? <div className={s.styleError}>{error}</div> : null}\r\n                            {formik.errors.password && formik.touched.password ? (\r\n                                <div className={s.styleError}>{formik.errors.password}</div>) : null}\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <div>\r\n                                <FormControlLabel\r\n                                    label={'Remember me'}\r\n                                    control={<Checkbox\r\n                                        name={'rememberMe'}\r\n                                        {...formik.getFieldProps('rememberMe')}\r\n                                    />}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        {\r\n                            captcha && <Grid item>\r\n                                <div className={s.captcha__content}>\r\n                                    <img src={captcha} alt=\"\"/>\r\n                                    <div className={s.captcha__content_img}>\r\n                                        <RefreshIcon style={{fontSize: 30}} onClick={getCaptcha}/>\r\n                                    </div>\r\n                                </div>\r\n                                <TextField name={'captcha'}\r\n                                           label={'captcha'}\r\n                                           {...formik.getFieldProps('captcha')}/>\r\n                            </Grid>\r\n                        }\r\n                        <Grid item>\r\n                            <div>\r\n                                <Button type={'submit'} variant=\"contained\">LOG IN</Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </FormGroup>\r\n        </FormControl>\r\n    </>\r\n}\r\n","import React from \"react\";\r\nimport {LoginForm} from \"./LoginForm\";\r\nimport s from './login.module.css';\r\nimport {connect} from \"react-redux\";\r\nimport {getCaptchaThunk, logInProfileThunk} from \"../../thunks/authThunk\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport { getIsAuthSelector, getServerErrorSelector, getCaptchaSelector } from \"../../redux/selectors/LoginSelectors\";\r\n\r\n//for Login\r\ntype LoginPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n    isAuth: boolean\r\n    error: string | null\r\n    captcha?: string\r\n    getCaptcha: () => void\r\n}\r\n\r\n//for LoginContainer\r\ntype MapDispatchToPropsType = {\r\n    postLoginData: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n    getCaptcha: () => void\r\n}\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    error: string | null\r\n    captcha?: string\r\n}\r\ntype LoginContainerPropsType = {}\r\ntype CommonLoginContainerType = MapStateToPropsType & MapDispatchToPropsType & LoginContainerPropsType\r\n\r\n\r\nexport const Login: React.FC<LoginPropsType> = (props) => {\r\n\r\n    const getCaptcha = () => {\r\n        props.getCaptcha()\r\n    }\r\n\r\n    return (\r\n        <div className={`${s.login__content}`}>\r\n            {(props.isAuth) ? <Redirect to={'/profile'}/> :\r\n                <div className={s.login__content_inner}>\r\n                    <h1>Login</h1>\r\n                    <LoginForm login={props.login}\r\n                               error={props.error}\r\n                               captcha={props.captcha}\r\n                               getCaptcha={getCaptcha}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst LoginContainer: React.FC<CommonLoginContainerType> = (props) => {\r\n\r\n    const postLogin = (email: string, password: string, rememberMe: boolean, captcha: string) => {\r\n        props.postLoginData(email, password, rememberMe, captcha)\r\n    }\r\n    return <Login login={postLogin}\r\n               isAuth={props.isAuth}\r\n               error={props.error}\r\n               captcha={props.captcha}\r\n               getCaptcha={props.getCaptcha}/>\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: stateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: getIsAuthSelector(state),\r\n        error: getServerErrorSelector(state),\r\n        captcha: getCaptchaSelector(state),\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n    postLoginData: logInProfileThunk,\r\n    getCaptcha: getCaptchaThunk,\r\n})(LoginContainer)\r\n","import {Dispatch} from \"redux\";\r\nimport {authProfileThunk} from \"./authThunk\";\r\nimport {initializedApp} from \"../redux/TypesForRedux\";\r\n\r\ntype AuthProfileThunkType = () => any\r\ntype AuthPostProfileDataThunkType = (email: string, password: string, rememberMe: boolean, captcha?: string) => void\r\ntype GetCaptchaThunkType = () => any\r\n\r\nexport const initializedAppThunk: GetCaptchaThunkType = () => {\r\n\r\n    return (dispath: Dispatch) => {\r\n\r\n        const promise = dispath(authProfileThunk())\r\n\r\n        promise\r\n            .then(() => {\r\n                return\r\n            })\r\n            .finally(() => {\r\n            dispath(initializedApp())\r\n        })\r\n    }\r\n};\r\n\r\n","import React, {CSSProperties, useEffect} from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport s from  './app.module.css'\r\nimport {Nav} from './Components/nav/Nav';\r\nimport {DialogContainer} from \"./Components/dialogs/DialogContainer\";\r\nimport {News} from \"./Components/news/News\";\r\nimport {Settings} from './Components/settings/Settings';\r\nimport {ActionCreatorsType} from \"./redux/TypesForRedux\";\r\nimport {UsersContainer} from './Components/users/UsersContainer';\r\nimport {ProfileContainerWithURL} from \"./Components/profile/ProfileContainer\";\r\nimport HeaderContainer from \"./Components/header/HeaderContainer\";\r\nimport LoginContainer from \"./Components/login/Login\";\r\nimport { initializedAppThunk } from './thunks/appThunk';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {stateType} from \"./redux/redux-store\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\ntype propsType = {\r\n    state: stateType\r\n    dispatch: (action:ActionCreatorsType) => void\r\n}\r\n\r\nconst App:React.FC<propsType> = (props) => {\r\n\r\n    const isInitialized = useSelector<stateType, boolean>(state => state.app.isInitialized)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializedAppThunk())\r\n    }, [])\r\n\r\n\r\n    if(!isInitialized){\r\n        return <CircularProgress className={s.circleProgress} />\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.app__wrapper}>\r\n            <HeaderContainer />\r\n            <Nav navPage={props.state.navPage} />\r\n            <div className={s.app__wrapper_content}>\r\n                <Route path={'/profile/:userId?'} render={() => <ProfileContainerWithURL />}/>\r\n                <Route path={'/dialogs'} render={() => <DialogContainer />}/>\r\n                <Route path={'/users'}  render={() => <UsersContainer />}/>\r\n                <Route path={'/news'}  render={() => <News />}/>\r\n                <Route path={'/settings'} render={() => <Settings />}/>\r\n                <Route path={'/login'} render={() => <LoginContainer />}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n","import {ActionCreatorsType, typeOfActionDispatch} from \"../TypesForRedux\";\r\nimport {CommonDataProfileType, profilePostsType} from \"../redux-store\";\r\n\r\n\r\nexport type profilePageType = typeof initialState\r\n\r\nexport type profilePageReducerType = (state: profilePageType, action: ActionCreatorsType) => profilePageType\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hey girls\"},\r\n        {id: 2, message: \"Hey guys\"}\r\n    ] as Array<profilePostsType>,\r\n    userProfile: {} as CommonDataProfileType,\r\n    isFetching: false,\r\n    profileStatus: '',\r\n}\r\n\r\n\r\nexport const profilePageReducer: profilePageReducerType = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.ADD_POST:\r\n            let newPostValue = action.value\r\n            let newPost = {id: 5, message: newPostValue}\r\n\r\n            state = {...state, posts: [...state.posts, newPost]}\r\n            return state;\r\n        case typeOfActionDispatch.SET_USER_PROFILE:\r\n            return {...state, userProfile: action.userProfile}\r\n        case typeOfActionDispatch.SET_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case typeOfActionDispatch.SET_STATUS_PROFILE:\r\n            return {...state, profileStatus: action.statusProfile}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import {ActionCreatorsType, typeOfActionDispatch} from \"../TypesForRedux\";\r\nimport {dialogsPageType} from \"../redux-store\";\r\n\r\n\r\nexport type dialogsPageReducerType = (state: dialogsPageType, action: ActionCreatorsType) => dialogsPageType\r\n\r\nconst initialState:dialogsPageType = {\r\n    names: [\r\n        {id: 1, name: 'Marat', path: '/dialogs/1'},\r\n        {id: 2, name: 'Anton', path: '/dialogs/2'},\r\n        {id: 3, name: 'Arkasha', path: '/dialogs/3'},\r\n        {id: 4, name: 'Tolik', path: '/dialogs/4'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hey man!'},\r\n        {id: 2, message: 'How is it going?'},\r\n        {id: 3, message: 'You forgot about my birthday(('},\r\n        {id: 4, message: 'I want to break up with you, sorry'}\r\n    ]\r\n}\r\n\r\nexport const dialogsPageReducer: dialogsPageReducerType = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.ADD_MESSAGE:\r\n            let newMessageValue = action.message\r\n            let newMessage = {id: 5, message:newMessageValue}\r\n\r\n            state = {...state, messages: [...state.messages, newMessage]}\r\n            return state;\r\n        default:\r\n            return state\r\n    }\r\n}","import {ActionCreatorsType} from \"../TypesForRedux\";\r\nimport {navPageType} from \"../redux-store\";\r\n\r\n\r\nexport type navPageReducerType = (state: navPageType, action: ActionCreatorsType) => navPageType\r\n\r\nconst initialState:navPageType = {\r\n    navTitles: [\r\n        {id: 1, title: 'Profile', path: '/profile'},\r\n        {id: 2, title: 'Dialogs', path: '/dialogs'},\r\n        {id: 3, title: 'Users', path: '/users'},\r\n        {id: 4, title: 'News', path: '/news'},\r\n        {id: 5, title: 'Settings', path: '/settings'}\r\n    ],\r\n    friends: [\r\n        {id: 1, name: 'Marat', pathToDialog: '/dialogs/1', isOnline: true},\r\n        {id: 2, name: 'Anton', pathToDialog: '/dialogs/2', isOnline: false},\r\n        {id: 3, name: 'Arkasha', pathToDialog: '/dialogs/3', isOnline: true},\r\n        {id: 4, name: 'Tolik', pathToDialog: '/dialogs/4', isOnline: false}\r\n    ]\r\n}\r\n\r\nexport const navPageReducer: navPageReducerType = (state = initialState, action) => {\r\n    return {...state}\r\n}","import {ActionCreatorsType, typeOfActionDispatch} from \"../TypesForRedux\";\r\nimport {UsersStateType} from \"../redux-store\";\r\n\r\n\r\n//typization for reducer\r\ntype usersReducerType = (state: UsersStateType, action: ActionCreatorsType) => UsersStateType\r\n\r\n\r\nconst initialUsersState: UsersStateType = {\r\n    users: [],\r\n    totalUsersCount: 0,\r\n    pageSize: 100,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    isFollowingInProgress: [],\r\n}\r\n\r\nexport const usersReducer: usersReducerType = (state = initialUsersState, action): UsersStateType => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.FOLLOW_TO_USER:\r\n            return {...state, users: state.users.map(u => (u.id === action.userId) ? {...u, followed: true} : u)}\r\n\r\n        case typeOfActionDispatch.UNFOLLOW_TO_USER:\r\n            return {...state, users: state.users.map(u => (u.id === action.userId) ? {...u, followed: false} : u)}\r\n\r\n        case typeOfActionDispatch.SET_USERS:\r\n            return {...state, users: [...action.users]}\r\n\r\n        case typeOfActionDispatch.SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n\r\n        case typeOfActionDispatch.SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case typeOfActionDispatch.SET_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case typeOfActionDispatch.SET_FOLLOWING_IN_PROGRESS:\r\n            return {\r\n                ...state, isFollowingInProgress: action.isFollowingProgress ?\r\n                    [...state.isFollowingInProgress, action.userId] :\r\n                    [...state.isFollowingInProgress.filter(id => id !== action.userId)]\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import {ActionCreatorsType, typeOfActionDispatch} from \"../TypesForRedux\"\r\nimport {IAuthData} from \"../redux-store\";\r\n\r\n\r\n//typization for reducer\r\ntype usersReducerType = (state: IAuthData, action: ActionCreatorsType) => IAuthData\r\n\r\n\r\nconst initialAuthState: IAuthData = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    captcha: '',\r\n    isAuth: false,\r\n    error: null,\r\n}\r\n\r\nexport const authReducer: usersReducerType = (state = initialAuthState, action) => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.SET_AUTH_DATA:\r\n\r\n            let copyState = {...state, ...action.authData}\r\n            let isAuth = (copyState.login) ? true : false\r\n            return {...copyState, isAuth}\r\n\r\n        case typeOfActionDispatch.SET_AUTH_ERROR:\r\n\r\n            return {...state, error: (action.error) ? action.error : null}\r\n\r\n        case typeOfActionDispatch.SET_CAPTCHA_VALUE:\r\n            return {...state, captcha: action.captcha}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n","import {ActionCreatorsType, typeOfActionDispatch} from \"../TypesForRedux\"\r\n\r\n\r\n//typization for reducer\r\ntype AppReducerType = (state: InitialAppStateType, action: ActionCreatorsType) => InitialAppStateType\r\n\r\nexport type InitialAppStateType = typeof initialAppState\r\n\r\nconst initialAppState = {\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer: AppReducerType = (state = initialAppState, action) => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.INITIALIZED_APP:\r\n            return {...state, isInitialized: true}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {profilePageReducer, profilePageType} from \"./reducers/profilePage-reducer\";\r\nimport {dialogsPageReducer} from \"./reducers/dialogsPage-reducer\";\r\nimport {navPageReducer} from \"./reducers/navPage-reducer\";\r\nimport {usersReducer} from \"./reducers/usersPage-reducer\";\r\nimport {authReducer} from \"./reducers/auth-reducer\";\r\nimport thunk from 'redux-thunk';\r\nimport { appReducer, InitialAppStateType } from \"./reducers/app-reducer\";\r\n\r\nexport type PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\nexport type dialogsNamesType = {\r\n    id: number,\r\n    name: string,\r\n    path: string\r\n}\r\nexport type dialogsMessagesType = {\r\n    id: number,\r\n    message: string | number\r\n}\r\nexport type profilePostsType = {\r\n    id: number,\r\n    message: string | number\r\n}\r\nexport type navTitlesType = {\r\n    id: number,\r\n    title: string,\r\n    path: string\r\n}\r\nexport type FriendsNavType = {\r\n    id: number\r\n    name: string\r\n    pathToDialog: string\r\n    isOnline: boolean\r\n}\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string | null\r\n    photos: PhotosType\r\n    status: string | null\r\n    followed: boolean\r\n}\r\n\r\n//Profile data\r\nexport type SocialContactsType = {\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    github: string\r\n    youtube: string\r\n    mainLink: string\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ntype PhotoUserType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\n\r\nexport type CommonDataUsersType<T> = {\r\n    error: string | null\r\n    items: T\r\n    totalCount: number\r\n}\r\nexport type CommonDataProfileType = {\r\n    aboutMe: string | null\r\n    contacts: SocialContactsType\r\n    fullName: string | null\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    photos: PhotoUserType | null\r\n    userId: number\r\n}\r\n\r\n//auth data\r\nexport type CommonAuthStateType = {\r\n    resultCode: number\r\n    messages: string[]\r\n    fieldsErrors: [] | null\r\n    data: AuthDataType\r\n}\r\n\r\n//follow and unfollow data\r\nexport type CommonSibscribeDataType = {\r\n    data: {}\r\n    fieldsErrors: []\r\n    messages: string[] | null\r\n    resultCode: number\r\n}\r\n\r\n\r\n//\r\n// export type profilePageType = {\r\n//     posts: Array<profilePostsType>\r\n//     newPost: string | number\r\n//     userProfile: CommonDataProfileType | null\r\n//     isFetching: boolean\r\n//     profileStatus: string\r\n// }\r\n\r\nexport type dialogsPageType = {\r\n    names: Array<dialogsNamesType>\r\n    messages: Array<dialogsMessagesType>\r\n}\r\nexport type navPageType = {\r\n    navTitles: Array<navTitlesType>\r\n    friends: Array<FriendsNavType>\r\n}\r\nexport type UsersStateType = {\r\n    users: Array<UserType>\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    isFollowingInProgress: number[]\r\n}\r\nexport type AuthDataType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    captcha?: string\r\n}\r\n\r\nexport interface IAuthData extends AuthDataType{\r\n    isAuth: boolean\r\n    error: string | null\r\n}\r\n\r\n\r\nexport type stateType = {\r\n    profilePage: profilePageType\r\n    dialogsPage: dialogsPageType\r\n    navPage: navPageType\r\n    usersPage: UsersStateType\r\n    auth: IAuthData\r\n    app: InitialAppStateType\r\n}\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profilePageReducer,\r\n    dialogsPage: dialogsPageReducer,\r\n    navPage: navPageReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n});\r\n\r\n\r\nexport let store = createStore(reducers, applyMiddleware(thunk))\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport ReactDOM from \"react-dom\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport {store, stateType} from \"./redux/redux-store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nexport type renderAppTreeType = (state: stateType) => void\r\n\r\n\r\nexport const renderAppTree: renderAppTreeType = (state: stateType) => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <HashRouter>\r\n                <Provider store={store}>\r\n                    <App state={state}\r\n                         dispatch={store.dispatch.bind(store)}/>\r\n                </Provider>\r\n            </HashRouter>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nrenderAppTree(store.getState());\r\n\r\nstore.subscribe(() => renderAppTree(store.getState()))\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content__wrapper\":\"users_content__wrapper__I5n30\",\"content__item\":\"users_content__item__2Yyhu\",\"content__item_leftBlock\":\"users_content__item_leftBlock__3793k\",\"content__item_leftBlock_img\":\"users_content__item_leftBlock_img__3fPq6\",\"content__item_leftBlock_button\":\"users_content__item_leftBlock_button__1WpN3\",\"content__item_rightBlock\":\"users_content__item_rightBlock__3jFNO\",\"content__item_rightBlock_name\":\"users_content__item_rightBlock_name__3bU9i\",\"content__item_rightBlock_status\":\"users_content__item_rightBlock_status__10t-K\",\"content__item_rightBlock_location\":\"users_content__item_rightBlock_location__3hyxM\",\"page\":\"users_page__3334I\",\"active_page\":\"users_active_page__aZlPL\",\"circleProgress\":\"users_circleProgress__3z0Io\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__1LacB\",\"wrapper\":\"dialogs_wrapper__GqQdl\",\"wrapper__header\":\"dialogs_wrapper__header__2SJHX\",\"wrapper__header_left\":\"dialogs_wrapper__header_left__2Dara\",\"wrapper__header_right\":\"dialogs_wrapper__header_right__383cx\",\"dialogs__people\":\"dialogs_dialogs__people__1uaFk\",\"dialogs__messages\":\"dialogs_dialogs__messages__1tidq\",\"dialogs__messages_newMesssage\":\"dialogs_dialogs__messages_newMesssage__b5FW8\",\"dialogs__messages_newMesssage_textarea\":\"dialogs_dialogs__messages_newMesssage_textarea__1fPCD\",\"dialogs__messages_newMesssage_button\":\"dialogs_dialogs__messages_newMesssage_button__1mrcq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"captcha__content\":\"loginForm_captcha__content__3Pg_c\",\"captcha__content_img\":\"loginForm_captcha__content_img__2D3af\",\"styleError\":\"loginForm_styleError__rOP6O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"profileInfo_content__1NgHR\",\"content__avatar\":\"profileInfo_content__avatar__JkGN5\",\"content__description\":\"profileInfo_content__description__2dMvU\",\"content__description_aboutMe\":\"profileInfo_content__description_aboutMe__21nxh\",\"content__description_contacts\":\"profileInfo_content__description_contacts__1kNa-\",\"content__description_fullName\":\"profileInfo_content__description_fullName__3yYXC\",\"content__description_searchJob\":\"profileInfo_content__description_searchJob__1LMz1\",\"content__description_desriptionOfJob\":\"profileInfo_content__description_desriptionOfJob__2lpvY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__28bqR\",\"header__wrapper\":\"header_header__wrapper__1rCLi\",\"header__wrapper_img\":\"header_header__wrapper_img__3B4XV\",\"header__authBlock\":\"header_header__authBlock__3SaVn\",\"header__authBlock_login\":\"header_header__authBlock_login__3iRv5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav__friendsBlock_item\":\"friendsBlock_nav__friendsBlock_item__22hEe\",\"nav__friendsBlock_item_img\":\"friendsBlock_nav__friendsBlock_item_img__fQY5A\",\"nav__friendsBlock_item_name\":\"friendsBlock_nav__friendsBlock_item_name__1TGRU\",\"nav__friendsBlock_item_onlineStatus\":\"friendsBlock_nav__friendsBlock_item_onlineStatus__QYJgV\"};"],"sourceRoot":""}