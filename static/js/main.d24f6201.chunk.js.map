{"version":3,"sources":["app.module.css","Components/nav/nav.module.css","Components/dialogs/Messages/messages.module.css","Components/dialogs/Names/names.module.css","Components/profile/myPosts/myPost/myPost.module.css","Components/profile/myPosts/newPost/newPost.module.css","Components/login/login.module.css","Components/news/news.module.css","Components/settings/settings.module.css","Components/profile/profile.module.css","Components/profile/myPosts/myPosts.module.css","images/logo.png","serviceWorker.ts","redux/ActionCreators.ts","Components/nav/sideBar/SidebarTitle.tsx","Components/nav/friendsBlock/FriendsBlock.tsx","Components/nav/Nav.tsx","Components/dialogs/Messages/Messages.tsx","Components/dialogs/Names/Names.tsx","Components/dialogs/newMessageInput/NewMessageInput.tsx","Components/dialogs/newMessageInput/NewMessageInputContainer.tsx","hoc/authRedirectHOC.tsx","redux/selectors/DialogSelectors.ts","Components/dialogs/DialogContainer.tsx","Components/news/News.tsx","Components/settings/Settings.tsx","Components/users/UserItem.tsx","Components/users/UsersAPI.tsx","API/API.ts","redux/selectors/UsersSelectors.ts","Components/users/UsersContainer.tsx","thunks/usersThunk.ts","Components/profile/myPosts/myPost/MyPost.tsx","Components/profile/myPosts/newPost/NewPost.tsx","Components/profile/myPosts/newPost/NewPostContainer.tsx","Components/profile/myPosts/MyPosts.tsx","Components/profile/profileInfo/EditableStatus.tsx","Components/profile/profileInfo/ProfileInfo.tsx","Components/profile/Profile.tsx","redux/selectors/ProfileSelectors.ts","Components/profile/ProfileContainer.tsx","thunks/profileThunk.ts","Components/header/Header.tsx","thunks/authThunk.ts","redux/selectors/LoginSelectors.ts","redux/selectors/HeaderSelectors.ts","Components/header/HeaderContainer.tsx","Components/login/LoginForm.tsx","Components/login/Login.tsx","thunks/appThunk.ts","App.tsx","redux/reducers/profilePage-reducer.ts","redux/reducers/dialogsPage-reducer.ts","redux/reducers/navPage-reducer.ts","redux/reducers/usersPage-reducer.ts","redux/reducers/auth-reducer.ts","redux/reducers/app-reducer.ts","redux/redux-store.ts","index.tsx","Components/users/users.module.css","Components/profile/profileInfo/profileInfo.module.css","Components/nav/friendsBlock/friendsBlock.module.css","Components/dialogs/dialogs.module.css","Components/login/loginForm.module.css","Components/header/header.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","typeOfActionDispatch","SidebarTitle","props","to","path","title","CssAccordion","withStyles","root","padding","Accordion","useStyles","makeStyles","theme","createStyles","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","contentBlock","contentBlockWrapper","contentBlockWrapperRoot","FriendsBlock","classes","className","style","MuiPaperRoot","AccordionSummary","expandIcon","aria-controls","id","Typography","AccordionDetails","component","friends","map","f","key","nav__friendsBlock_item","nav__friendsBlock_item_img","src","alt","nav__friendsBlock_item_name","pathToDialog","name","isOnline","nav__friendsBlock_item_onlineStatus","Nav","isAuth","useSelector","state","auth","s","nav","wrap__title","navPage","navTitles","t","nav__friendsBlock","Messages","newMessage","newMessage__img","newMessage__content","message","Names","dialogs__people_name","dialogs__people_name_img","dialogs__people_name_content","setUsers","users","type","SET_USERS","setIsFetching","isFetching","SET_IS_FETCHING","setAuthData","authData","SET_AUTH_DATA","setFollowingInProgress","isFollowingProgress","userId","SET_FOLLOWING_IN_PROGRESS","setStatusProfile","statusProfile","SET_STATUS_PROFILE","setAuthError","error","SET_AUTH_ERROR","validationSchema","Yup","DialogMessageTextarea","max","DialogMessageForm","formik","useFormik","initialValues","onSubmit","values","resetForm","addMessage","undefined","FormControl","FormGroup","handleSubmit","Grid","container","direction","spacing","item","dialogs__messages_newMesssage_textarea","TextField","placeholder","label","multiline","rows","rowsMax","getFieldProps","errors","touched","color","dialogs__messages_newMesssage_button","Button","NewMessageInputContainer","connect","ADD_MESSAGE","dialogs__messages_newMesssage","mapStateForRedirect","authRedirectHOC","Component","restProps","getDialogPageSelector","createSelector","dialogsPage","dialogPage","DialogContainer","compose","dialogs","dialogs__people","names","n","dialogs__messages","messages","m","News","content","Settings","UserItem","content__item","content__item_img","photos","small","content__item_info","content__item_info_name","content__item_info_status","status","content__item_button","followed","onClick","unfollow","content__item_button_unfollow","disabled","isFollowingInProgress","some","follow","content__item_button_follow","useState","showScroll","setShowScroll","checkScrollTop","pageYOffset","useEffect","length","getUsers","currentPage","pageSize","addEventListener","removeEventListener","pageCount","Math","ceil","totalUsersCount","arrPageCount","i","push","content__wrapper","CircularProgress","circleProgress","content__wrapper_pagination","Pagination","count","siblingCount","onChange","_","page","p","pagination","scrollTop_wrapper","scrollTop","scrollTo","top","behavior","height","display","u","instance","axios","create","withCredentials","baseURL","headers","userAPI","get","delete","post","authAPI","email","password","rememberMe","captcha","profileAPI","put","getUsersSelector","usersPage","getTotalUsersCountSelector","getPageSizeSelector","getCurrentPageSelector","getIsFetchingSelector","getIsFollowingInProgressTypeSelector","getIsFollowingInProgress","UsersContainer","dispath","then","res","data","resultCode","FOLLOW_TO_USER","UNFOLLOW_TO_USER","items","totalCount","SET_TOTAL_USERS_COUNT","SET_CURRENT_PAGE","UsersAPI","MyPost","content__img","photo","content__text","textareaPost","ProfilePostForm","addPost","content__textArea","variant","content__button","NewPostContainer","value","ADD_POST","MyPosts","content__posts","posts","EditableStatus","editeMode","setEditeMode","localStatus","setLocalStatus","e","currentTarget","onBlur","updateStatus","autoFocus","content__mainInfo_contactStatus_spanContent","onDoubleClick","ProfileInfo","React","memo","contacts","userProfile","Object","keys","content__socialLinks","content__profileInfo","content__mainInfo","content__mainInfo_avatar","large","content__mainInfo_contactStatus","content__description_fullName","fullName","content__description","content__description_aboutMe","aboutMe","content__description_searchJob","lookingForAJob","content__description_desriptionOfJob","lookingForAJobDescription","content__description_contacts","Profile","profilePage","position","left","bottom","right","margin","profileStatus","getProfilePageSelector","profile","getUserIdSelector","ProfileContainer","this","params","authUserId","toString","history","setUserProfile","PureComponent","ProfileContainerWithURL","withRouter","dispatch","SET_USER_PROFILE","Header","header","header__wrapper","header__wrapper_img","logo","header__authBlock","header__authBlock_login","login","header__logOutBtn","logOutProfile","getCaptchaThunk","url","SET_CAPTCHA_VALUE","authProfileThunk","getIsAuthSelector","getServerErrorSelector","serverError","getCaptchaSelector","getLoginSelector","HeaderContainer","required","min","LoginForm","getCaptcha","useCallback","InputProps","fieldErr","styleError","FormControlLabel","control","Checkbox","captcha__content","captcha__content_img","Login","login__content","login__content_inner_textHelper","login__content_inner","postLoginData","initializedAppThunk","finally","INITIALIZED_APP","App","isInitialized","app","useDispatch","app__wrapper","app__wrapper_content","render","initialState","uuid","initialUsersState","initialAuthState","initialAppState","reducers","combineReducers","action","newPostValue","newPost","filter","copyState","store","createStore","applyMiddleware","thunk","renderAppTree","ReactDOM","StrictMode","bind","document","getElementById","getState","subscribe","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.d24f6201.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app__wrapper\":\"app_app__wrapper__3zjyW\",\"app__wrapper_content\":\"app_app__wrapper_content__30D5Q\",\"circleProgress\":\"app_circleProgress__2rhjH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"nav_nav__32Dtx\",\"wrap__title\":\"nav_wrap__title__1fJvA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newMessage\":\"messages_newMessage__H-XRi\",\"newMessage__img\":\"messages_newMessage__img__2RyBM\",\"newMessage__content\":\"messages_newMessage__content__g6ttP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs__people_name\":\"names_dialogs__people_name__RNTJh\",\"dialogs__people_name_img\":\"names_dialogs__people_name_img__LSXv8\",\"dialogs__people_name_content\":\"names_dialogs__people_name_content__37Vw_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"myPost_content__1RSxM\",\"content__img\":\"myPost_content__img__ab0v1\",\"content__text\":\"myPost_content__text__2GZxT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"newPost_content__2nJOh\",\"content__textArea\":\"newPost_content__textArea__2sjje\",\"content__button\":\"newPost_content__button__3yZ3B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login__content\":\"login_login__content__1Gnuf\",\"login__content_inner\":\"login_login__content_inner__LIZKO\",\"login__content_inner_textHelper\":\"login_login__content_inner_textHelper__aDKMn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"news_content__kswPX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"settings_content__3LtiA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"profile_content__1q3D6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content__posts\":\"myPosts_content__posts__2Gi5V\"};","module.exports = __webpack_public_path__ + \"static/media/logo.d243bdd9.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached profile has been fetched,\n              // but the previous service worker will still serve the older\n              // profile until all client tabs are closed.\n              console.log(\n                'New profile is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Profile is cached for offline use.\" message.\n              console.log('Profile is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('profile-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {AuthDataType} from \"./reducers/auth-reducer\";\r\nimport {UserType} from \"./reducers/usersPage-reducer\";\r\nimport {CommonDataProfileType} from \"./reducers/profilePage-reducer\";\r\n\r\nexport enum typeOfActionDispatch {\r\n    ADD_MESSAGE = \"ADD_MESSAGE\",\r\n    ADD_POST = \"ADD_POST\",\r\n    UPDATE_POST = \"UPDATE_POST\",\r\n    FOLLOW_TO_USER = \"FOLLOW_TO_USER\",\r\n    UNFOLLOW_TO_USER = \"UNFOLLOW_TO_USER\",\r\n    SET_USERS = \"SET_USERS\",\r\n    SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\",\r\n    SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\",\r\n    SET_IS_FETCHING = \"SET_IS_FETCHING\",\r\n    SET_USER_PROFILE = \"SET_USER_PROFILE\",\r\n    SET_AUTH_DATA = \"SET_AUTH_DATA\",\r\n    SET_FOLLOWING_IN_PROGRESS = \"SET_FOLLOWING_IN_PROGRESS\",\r\n    SET_STATUS_PROFILE = \"SET_STATUS_PROFILE\",\r\n    SET_AUTH_ERROR = \"SET_AUTH_ERROR\",\r\n    SET_CAPTCHA_VALUE = \"SET_CAPTCHA_VALUE\",\r\n    INITIALIZED_APP = \"INITIALIZED_APP\",\r\n}\r\n\r\nexport type ActionCreatorsType = ReturnType<typeof addPost> |\r\n    ReturnType<typeof addMessage> |\r\n    ReturnType<typeof follow> |\r\n    ReturnType<typeof unfollow> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setTotalUsersCount> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setIsFetching> |\r\n    ReturnType<typeof setUserProfile> |\r\n    ReturnType<typeof setAuthData> |\r\n    ReturnType<typeof setFollowingInProgress> |\r\n    ReturnType<typeof setStatusProfile> |\r\n    ReturnType<typeof setAuthError> |\r\n    ReturnType<typeof setCaptchaValue>|\r\n    ReturnType<typeof initializedApp>\r\n\r\n//actionCreators\r\nexport const addPost = (value: string) => {\r\n    return {\r\n        type: typeOfActionDispatch.ADD_POST,\r\n        value\r\n    } as const\r\n};\r\nexport const addMessage = (newMessage: string) => {\r\n    return (\r\n        {type: typeOfActionDispatch.ADD_MESSAGE, message: newMessage}\r\n    ) as const\r\n};\r\nexport const follow = (userId: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.FOLLOW_TO_USER, userId}\r\n    ) as const\r\n};\r\nexport const unfollow = (userId: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.UNFOLLOW_TO_USER, userId}\r\n    ) as const\r\n};\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_USERS, users}\r\n    ) as const\r\n};\r\nexport const setTotalUsersCount = (totalUsersCount: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_TOTAL_USERS_COUNT, totalUsersCount}\r\n    ) as const\r\n};\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_CURRENT_PAGE, currentPage}\r\n    ) as const\r\n};\r\nexport const setIsFetching = (isFetching: boolean) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_IS_FETCHING, isFetching}\r\n    ) as const\r\n};\r\nexport const setUserProfile = (userProfile: CommonDataProfileType) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_USER_PROFILE, userProfile}\r\n    ) as const\r\n};\r\nexport const setAuthData = (authData: AuthDataType) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_AUTH_DATA, authData}\r\n    ) as const\r\n};\r\nexport const setFollowingInProgress = (isFollowingProgress: boolean, userId: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_FOLLOWING_IN_PROGRESS, isFollowingProgress, userId}\r\n    ) as const\r\n};\r\nexport const setStatusProfile = (statusProfile: string) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_STATUS_PROFILE, statusProfile}\r\n    ) as const\r\n}\r\nexport const setAuthError = (error: string | null) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_AUTH_ERROR, error}\r\n    ) as const\r\n};\r\nexport const setCaptchaValue = (captcha: string) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_CAPTCHA_VALUE, captcha}\r\n    ) as const\r\n};\r\nexport const initializedApp = () => {\r\n    return (\r\n        {type: typeOfActionDispatch.INITIALIZED_APP}\r\n    ) as const\r\n};\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    path: string\r\n    title: string\r\n    key: string\r\n}\r\n\r\nexport const SidebarTitle: React.FC<PropsType> = (props) => {\r\n\r\n    return <>\r\n        <NavLink to={props.path}>\r\n            <li>{props.title}</li>\r\n        </NavLink>\r\n    </>\r\n}","import React from \"react\";\r\nimport style from './friendsBlock.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport {AccordionDetails, AccordionSummary, createStyles, Typography} from \"@material-ui/core\";\r\nimport {makeStyles, withStyles, Theme} from \"@material-ui/core/styles\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport {FriendsNavType} from \"../../../redux/reducers/navPage-reducer\";\r\n\r\ntype PropsType = {\r\n    friends: FriendsNavType[]\r\n}\r\n\r\nconst CssAccordion = withStyles({\r\n    root: {\r\n        '& .MuiAccordionDetails-root': {\r\n            padding: '0px',\r\n        },\r\n    },\r\n})(Accordion);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            \"& .MuiAccordionDetails\": {\r\n                padding: '0px',\r\n            },\r\n        },\r\n        heading: {\r\n            fontSize: theme.typography.pxToRem(15),\r\n            fontWeight: theme.typography.fontWeightRegular,\r\n        },\r\n        contentBlock: {\r\n            width: '100%',\r\n        },\r\n        contentBlockWrapper: {\r\n            width: '100%',\r\n        },\r\n        contentBlockWrapperRoot: {\r\n            width: '100%',\r\n        },\r\n    }),\r\n);\r\n\r\nexport const FriendsBlock: React.FC<PropsType> = (props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return <>\r\n        <CssAccordion className={`${style.MuiPaperRoot} ${style.contentBlockWrapperRoot}`}>\r\n            <AccordionSummary\r\n                expandIcon={<ExpandMoreIcon/>}\r\n                aria-controls=\"panel1a-content\"\r\n                id=\"panel1a-header\"\r\n            >\r\n                <Typography className={classes.heading}>Friends</Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails className={classes.contentBlockWrapper}>\r\n                <Typography component={'span'} className={classes.contentBlock}>\r\n                    {props.friends.map(f => <div key={f.id} className={style.nav__friendsBlock_item}>\r\n                            <div className={style.nav__friendsBlock_item_img}>\r\n                                <img src=\"https://i.ibb.co/F8yML1z/image.png\" alt=\"\"/>\r\n                            </div>\r\n                            <div className={style.nav__friendsBlock_item_name}>\r\n                                <NavLink to={f.pathToDialog}>{f.name}</NavLink>\r\n                            </div>\r\n                            {f.isOnline && <div className={style.nav__friendsBlock_item_onlineStatus}/>\r\n                            }\r\n                        </div>\r\n                    )}\r\n                </Typography>\r\n            </AccordionDetails>\r\n        </CssAccordion>\r\n    </>\r\n}","import React from \"react\";\r\nimport s from './nav.module.css';\r\nimport {SidebarTitle} from \"./sideBar/SidebarTitle\";\r\nimport {FriendsBlock} from \"./friendsBlock/FriendsBlock\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {NavPageType} from \"../../redux/reducers/navPage-reducer\";\r\n\r\ntype propsType = {\r\n    navPage: NavPageType\r\n}\r\n\r\nexport const Nav: React.FC<propsType> = (props) => {\r\n\r\n    const isAuth = useSelector<stateType, boolean>(state => state.auth.isAuth)\r\n\r\n    return <div className={s.nav}>\r\n        <div className={s.wrap__title}>\r\n            {props.navPage.navTitles.map((t) => <SidebarTitle key={t.id}\r\n                                                              title={t.title}\r\n                                                              path={t.path}/>)}\r\n        </div>\r\n        <div className={s.nav__friendsBlock}>\r\n            {isAuth && <>\r\n                <FriendsBlock friends={props.navPage.friends}/>\r\n            </>}\r\n        </div>\r\n    </div>\r\n}","import React from \"react\";\nimport style from './messages.module.css'\n\ntype propsType = {\n    message: string | number\n}\n\nexport const Messages: React.FC<propsType> = (props) => {\n\n    let defaultAvatarPhoto = `https://i.ibb.co/F8yML1z/image.png`\n\n    return <div className={style.newMessage}>\n        <div className={style.newMessage__img}>\n            <img src={defaultAvatarPhoto} alt={'avatarPhoto'}/>\n        </div>\n        <div className={style.newMessage__content}>\n            <span>{props.message}</span>\n        </div>\n    </div>\n}","import React from \"react\";\nimport style from './names.module.css'\nimport {NavLink} from \"react-router-dom\";\n\ntype propsType = {\n    name: string,\n    path: string\n}\n\nexport const Names: React.FC<propsType> = (props) => {\n    return <div className={style.dialogs__people_name}>\n        <div className={style.dialogs__people_name_img}>\n            <img src={'https://i.ibb.co/F8yML1z/image.png'} alt=\"\"/>\n        </div>\n        <div className={style.dialogs__people_name_content}>\n            <NavLink to={props.path}><span>{props.name}</span></NavLink>\n        </div>\n    </div>\n}","import React from \"react\";\r\nimport style from \"../dialogs.module.css\";\r\nimport {Button, FormControl, FormGroup, Grid, TextField} from \"@material-ui/core\";\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\n\r\ntype NewMessageInputType = {\r\n    addMessage: (newMessage: string) => void\r\n}\r\n\r\nexport const NewMessageInput: React.FC<NewMessageInputType> = (props) => {\r\n\r\n    return <div className={style.dialogs__messages_newMesssage}>\r\n        <DialogMessageForm addMessage={props.addMessage}/>\r\n    </div>\r\n}\r\n\r\n\r\ntype IDialogMessageForm = {\r\n    addMessage: (newMessage: string) => void\r\n}\r\n\r\nconst validationSchema = Yup.object({\r\n    DialogMessageTextarea: Yup.string()\r\n        .max(300, 'message should consists 300 char or less')\r\n});\r\n\r\n\r\n\r\nconst DialogMessageForm: React.FC<IDialogMessageForm> = (props) => {\r\n\r\n    const formik = useFormik({\r\n            initialValues: {\r\n                DialogMessageTextarea: \"\",\r\n            },\r\n            validationSchema,\r\n            onSubmit: (values, {resetForm}) => {\r\n                props.addMessage(values.DialogMessageTextarea)\r\n                resetForm({values: '' || undefined})\r\n            },\r\n        })\r\n    ;\r\n\r\n    const errorStyle = {\r\n        color: \"red\",\r\n    }\r\n\r\n    return <>\r\n        <FormControl>\r\n            <FormGroup>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Grid container direction={'column'} spacing={2}>\r\n                        <Grid item>\r\n                            <div className={style.dialogs__messages_newMesssage_textarea}>\r\n                                <TextField placeholder={'enter your message...'}\r\n                                           name={'DialogMessageTextarea'}\r\n                                           label={'message field'}\r\n                                           multiline\r\n                                           rows={2}\r\n                                           rowsMax={4}\r\n                                           {...formik.getFieldProps('DialogMessageTextarea')}/>\r\n                            </div>\r\n                            {formik.errors.DialogMessageTextarea && formik.touched.DialogMessageTextarea ?\r\n                                <div style={errorStyle}>{formik.errors.DialogMessageTextarea}</div> : null}\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <div className={style.dialogs__messages_newMesssage_button}>\r\n                                <Button color={'primary'} type={'submit'}>Send</Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </FormGroup>\r\n        </FormControl>\r\n    </>\r\n\r\n}","import {addMessage} from \"../../../redux/ActionCreators\";\r\nimport {NewMessageInput} from \"./NewMessageInput\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../../redux/redux-store\";\r\n\r\ntype MapDispatchToProps = {\r\n    addMessage: (newMessage: string) => void\r\n}\r\n\r\nexport const NewMessageInputContainer = connect<{}, MapDispatchToProps, {}, stateType>(null, {addMessage})\r\n(NewMessageInput);","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {stateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateForRedirectType = {\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchForRedirectType = {}\r\n\r\nconst mapStateForRedirect = (state: stateType): MapStateForRedirectType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function authRedirectHOC<HOCPropsType>(Component: ComponentType<HOCPropsType>) {\r\n\r\n    function authRedirectComponent(props: MapDispatchForRedirectType & MapStateForRedirectType) {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) {\r\n            return <Redirect to={'/login'}/>\r\n        }\r\n\r\n        return <Component {...restProps as HOCPropsType} />\r\n\r\n    }\r\n\r\n    return connect<MapStateForRedirectType, MapDispatchForRedirectType, HOCPropsType, stateType>(mapStateForRedirect)\r\n    (authRedirectComponent)\r\n\r\n}","import {createSelector} from 'reselect'\r\nimport {stateType} from \"../redux-store\";\r\nimport {DialogsPageType} from \"../reducers/dialogsPage-reducer\";\r\n\r\ntype GetDialogPageType = (state: stateType) => DialogsPageType\r\n\r\n\r\n\r\n\r\n//dialogPage\r\nconst getDialogPage:GetDialogPageType = (state) => state.dialogsPage\r\n\r\nexport const getDialogPageSelector = createSelector(getDialogPage,(dialogPage) => {\r\n        return dialogPage\r\n})","import React, {ComponentType} from \"react\";\r\nimport style from './dialogs.module.css'\r\nimport {Messages} from \"./Messages/Messages\";\r\nimport {Names} from \"./Names/Names\";\r\nimport {NewMessageInputContainer} from \"./newMessageInput/NewMessageInputContainer\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {authRedirectHOC} from \"../../hoc/authRedirectHOC\";\r\nimport {compose} from \"redux\";\r\nimport {getDialogPageSelector} from \"../../redux/selectors/DialogSelectors\";\r\nimport {DialogsPageType} from \"../../redux/reducers/dialogsPage-reducer\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogPage: DialogsPageType\r\n}\r\n\r\ntype PropsType = MapStateToPropsType\r\n\r\nexport const Dialog = (props: PropsType) => {\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n                <div className={style.dialogs__people}>\r\n                    {props.dialogPage.names.map((n) => <Names key={n.id} name={n.name} path={n.path}/>)}\r\n                </div>\r\n                <div className={style.dialogs__messages}>\r\n                    {props.dialogPage.messages.map((m) => <Messages key={m.id} message={m.message}/>)}\r\n                    <NewMessageInputContainer/>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: stateType): MapStateToPropsType => ({\r\n    dialogPage: getDialogPageSelector(state)\r\n})\r\n\r\n\r\nexport const DialogContainer = compose<ComponentType<{}>>(\r\n    authRedirectHOC,\r\n    (connect<MapStateToPropsType, {}, {}, stateType>(mapStateToProps)))(Dialog)\r\n","import React from 'react';\r\nimport style from './news.module.css'\r\n\r\nexport const News= () => {\r\n    return (\r\n        <div className={style.content}>\r\n           The page of news is being developed\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport style from './settings.module.css'\r\n\r\nexport const Settings= () => {\r\n    return (\r\n        <div className={style.content}>\r\n           The page of settings is being developed\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./users.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PhotoUserType} from \"../../redux/reducers/profilePage-reducer\";\r\n\r\n\r\ntype UserItemType = {\r\n    id: number\r\n    photos: PhotoUserType\r\n    followed: boolean\r\n    name: string | null\r\n    status: string | null\r\n    isFollowingInProgress: number[]\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\n\r\nexport const UserItem: React.FC<UserItemType> = (props) => {\r\n\r\n\r\n    const follow = () => {\r\n        props.follow(props.id)\r\n    }\r\n\r\n    const unfollow = () => {\r\n        props.unfollow(props.id)\r\n    }\r\n\r\n    let defaultAvatarPhoto = `https://i.ibb.co/F8yML1z/image.png`;\r\n\r\n    return <div className={s.content__item}>\r\n        <div className={s.content__item_img}>\r\n            <NavLink to={'/profile/' + props.id}>\r\n                <img\r\n                    src={(props.photos.small) ? props.photos.small : defaultAvatarPhoto}\r\n                    alt=\"\"/>\r\n            </NavLink>\r\n        </div>\r\n        <div className={s.content__item_info}>\r\n            <div className={s.content__item_info_name}>\r\n                <span>{props.name}</span>\r\n            </div>\r\n            <div className={s.content__item_info_status}>\r\n                <span>{props.status}</span>\r\n            </div>\r\n        </div>\r\n        <div className={s.content__item_button}>\r\n            {(props.followed) ? <button onClick={unfollow} className={s.content__item_button_unfollow}\r\n                                        disabled={props.isFollowingInProgress.some(id => id == props.id)}><img src=\"https://img.icons8.com/material-sharp/24/000000/unsubscribe.png\" alt=\"\"/></button> :\r\n                <button onClick={follow} className={s.content__item_button_follow}\r\n                        disabled={props.isFollowingInProgress.some(id => id == props.id)}><img src=\"https://img.icons8.com/fluent-systems-filled/24/000000/subscription.png\" alt=\"\"/></button>}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import React, {FC, useEffect, useState} from 'react';\r\nimport s from './users.module.css'\r\nimport {UserItem} from \"./UserItem\";\r\nimport {authRedirectHOC} from \"../../hoc/authRedirectHOC\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport {Pagination} from \"@material-ui/lab\";\r\nimport {FaArrowCircleUp} from 'react-icons/fa';\r\nimport {UserType} from \"../../redux/reducers/usersPage-reducer\";\r\n\r\n\r\n//type for button up\r\ntype StyleButtonUpType = {\r\n    transition: string\r\n    strokeDasharray?: string\r\n    strokeDashoffset?: number\r\n}\r\n\r\nexport type UsersPropsType = {\r\n    follow: (userId: number) => void,\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setIsFetching: (isFetching: boolean) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n    pagination: (page: number, pageSize: number) => void\r\n    users: Array<UserType>\r\n    totalUsersCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    isFollowingInProgress: number[]\r\n}\r\n\r\nexport const UsersAPI: FC<UsersPropsType> = (props) => {\r\n\r\n    const [showScroll, setShowScroll] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        if (props.users.length === 0) {\r\n            props.getUsers(props.currentPage, props.pageSize)\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (props.isFetching) {\r\n            window.addEventListener('scroll', checkScrollTop, true)\r\n        }\r\n        return () => window.removeEventListener('scroll', checkScrollTop)\r\n\r\n    }, [window.pageYOffset, props.currentPage])\r\n\r\n    // button up\r\n\r\n    function checkScrollTop() {\r\n        if (!showScroll && window.pageYOffset > 300) {\r\n            setShowScroll(true)\r\n        } else {\r\n            setShowScroll(false)\r\n        }\r\n    };\r\n\r\n\r\n    const scrollTop = () => {\r\n        window.scrollTo({top: 0, behavior: 'smooth'});\r\n    };\r\n\r\n    // --- button up ---\r\n\r\n    let setCurrentPage = (p: number) => {\r\n        props.pagination(p, props.pageSize)\r\n    }\r\n\r\n\r\n    //pagination\r\n    let pageCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let arrPageCount = [];\r\n\r\n\r\n    for (let i = 1; pageCount >= i; i++) {\r\n        arrPageCount.push(i)\r\n    }\r\n    // ---- pagination ----\r\n\r\n    return (\r\n        <div className={s.content__wrapper}>\r\n            {props.isFetching && <CircularProgress className={s.circleProgress}/>}\r\n            {/*pagination*/}\r\n            {\r\n                <div className={s.content__wrapper_pagination}>\r\n                    <Pagination count={pageCount} siblingCount={1} color=\"primary\"\r\n                                onChange={(_, page) => setCurrentPage(page)}/>\r\n                </div>\r\n            }\r\n            {/*-----pagination-----*/}\r\n            {/*button up*/}\r\n            <div className={s.scrollTop_wrapper}>\r\n                <FaArrowCircleUp\r\n                    className={s.scrollTop}\r\n                    onClick={scrollTop}\r\n                    style={{height: 40, display: showScroll ? 'flex' : 'none'}}\r\n                />\r\n            </div>\r\n            {/*--- button up ---*/}\r\n            {\r\n                props.users.map(u => {\r\n\r\n                    const unfollow = (userId: number) => {\r\n                        props.unfollow(userId)\r\n                    }\r\n\r\n                    const follow = (userId: number) => {\r\n                        props.follow(userId)\r\n                    }\r\n\r\n                    return <UserItem key={u.id}\r\n                                     id={u.id}\r\n                                     status={u.status}\r\n                                     photos={u.photos}\r\n                                     followed={u.followed}\r\n                                     unfollow={unfollow}\r\n                                     follow={follow}\r\n                                     name={u.name}\r\n                                     isFollowingInProgress={props.isFollowingInProgress}/>\r\n\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default authRedirectHOC(UsersAPI)\r\n","import axios from 'axios';\r\nimport {UserType} from \"../redux/reducers/usersPage-reducer\";\r\nimport {CommonDataProfileType} from \"../redux/reducers/profilePage-reducer\";\r\nimport {AuthDataType} from \"../redux/reducers/auth-reducer\";\r\n\r\n\r\n\r\n//for getting users for UsersPage\r\nexport type CommonDataUsersType<D = {}> = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: D\r\n}\r\n\r\n\r\nexport type CommonResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    fieldsErrors: string[]\r\n    data: D\r\n}\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": '959808d3-8efe-42bd-88eb-3693675e6c98'\r\n    }\r\n})\r\n\r\n\r\nexport const userAPI = {\r\n    setUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<CommonDataUsersType<UserType[]>>(`users?page=${currentPage}&count=${pageSize}`)\r\n    },\r\n    unfollow(userId:number) {\r\n        return instance.delete<CommonResponseType<{}>>(`follow/${userId}`)\r\n    },\r\n    follow(userId:number) {\r\n        return instance.post<CommonResponseType<{}>>(`follow/${userId}`)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    setAuth() {\r\n        return instance.get<CommonResponseType<AuthDataType>>('auth/me')\r\n    },\r\n    logIn(email:string, password: string, rememberMe:boolean, captcha?: string) {\r\n        return instance.post<CommonResponseType<{userId: number}>>('auth/login', {email, password, rememberMe, captcha})\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonResponseType<{}>>('auth/login')\r\n    },\r\n    getCaptcha(){\r\n        return instance.get<{url: string}>(`/security/get-captcha-url`)\r\n    },\r\n\r\n}\r\n\r\nexport const profileAPI = {\r\n\r\n    setUserProfile(userId:string) {\r\n        return instance.get<CommonDataProfileType>(`profile/${userId}`)\r\n    },\r\n    setStatusProfile(userId:string) {\r\n        return instance.get<string>(`profile/status/${userId}`)\r\n    },\r\n    updateStatusProfile(status:string) {\r\n        return instance.put<string>(`profile/status`, {status})\r\n    },\r\n}","import {createSelector} from 'reselect'\r\nimport {stateType} from \"../redux-store\";\r\nimport {UserType} from \"../reducers/usersPage-reducer\";\r\n\r\ntype GetUsersType = (state: stateType) => UserType[]\r\ntype GetTotalUsersCountType = (state: stateType) => number\r\ntype GetPageSizeType = (state: stateType) => number\r\ntype GetCurrentPageType = (state: stateType) => number\r\ntype GetIsFetchingType = (state: stateType) => boolean\r\ntype GetIsFollowingInProgressType = (state: stateType) => number[]\r\n\r\n\r\n\r\n\r\n//Users\r\nconst getUsers:GetUsersType = (state) => state.usersPage.users\r\n\r\nexport const getUsersSelector = createSelector(getUsers,(users) => {\r\n        return users\r\n})\r\n\r\n\r\n//totalUsersCount\r\nconst getTotalUsersCount:GetTotalUsersCountType = (state) => state.usersPage.totalUsersCount\r\n\r\nexport const getTotalUsersCountSelector = createSelector(getTotalUsersCount,(totalUsersCount) => {\r\n        return totalUsersCount\r\n})\r\n\r\n\r\n//pageSize\r\nconst getPageSize:GetPageSizeType = (state) => state.usersPage.pageSize\r\n\r\nexport const getPageSizeSelector = createSelector(getPageSize,(pageSize) => {\r\n        return pageSize\r\n})\r\n\r\n//currentPage\r\nconst getCurrentPage:GetCurrentPageType = (state) => state.usersPage.currentPage\r\n\r\nexport const getCurrentPageSelector = createSelector(getCurrentPage,(currentPage) => {\r\n        return currentPage\r\n})\r\n\r\n//isFetching\r\nconst getIsFetching:GetIsFetchingType = (state) => state.usersPage.isFetching\r\n\r\nexport const getIsFetchingSelector = createSelector(getIsFetching,(isFetching) => {\r\n        return isFetching\r\n})\r\n\r\n//getIsFollowingInProgress\r\nconst getIsFollowingInProgress:GetIsFollowingInProgressType = (state) => state.usersPage.isFollowingInProgress\r\n\r\nexport const getIsFollowingInProgressTypeSelector = createSelector(getIsFollowingInProgress,(getIsFollowingInProgress) => {\r\n        return getIsFollowingInProgress\r\n})","import {connect} from 'react-redux';\r\nimport UsersAPI from \"./UsersAPI\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {followToUserThunk, getUsersThunk, paginationThunk, unfollowToUserThunk} from '../../thunks/usersThunk';\r\nimport {\r\n    getCurrentPageSelector,\r\n    getIsFetchingSelector,\r\n    getIsFollowingInProgressTypeSelector,\r\n    getPageSizeSelector,\r\n    getTotalUsersCountSelector,\r\n    getUsersSelector\r\n} from '../../redux/selectors/UsersSelectors';\r\nimport {UserType} from \"../../redux/reducers/usersPage-reducer\";\r\n\r\ntype MapStateToPropsType = {\r\n    users: Array<UserType>\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    isFollowingInProgress: number[]\r\n}\r\ntype MapDispatchToPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n    pagination: (page: number, pageSize: number) => void\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: stateType): MapStateToPropsType => ({\r\n    users: getUsersSelector(state),\r\n    totalUsersCount: getTotalUsersCountSelector(state),\r\n    pageSize: getPageSizeSelector(state),\r\n    currentPage: getCurrentPageSelector(state),\r\n    isFetching: getIsFetchingSelector(state),\r\n    isFollowingInProgress: getIsFollowingInProgressTypeSelector(state),\r\n})\r\n\r\n\r\nexport const UsersContainer = connect<MapStateToPropsType, MapDispatchToPropsType,any, stateType>(mapStateToProps, {\r\n    follow: followToUserThunk,\r\n    unfollow: unfollowToUserThunk,\r\n    getUsers: getUsersThunk,\r\n    pagination: paginationThunk,\r\n})(UsersAPI)","import {userAPI} from \"../API/API\";\r\nimport {\r\n    setIsFetching,\r\n    setUsers,\r\n    setTotalUsersCount,\r\n    setFollowingInProgress,\r\n    unfollow,\r\n    follow,\r\n    setCurrentPage\r\n} from \"../redux/ActionCreators\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype GetUsersThunkType = (currentPage: number, pageSize: number) => void\r\ntype FollowToUserThunkType = (userId: number) => void\r\ntype UnfollowToUserThunkType = (userId: number) => void\r\ntype PaginationThunkType = (page: number, pageSize:number) => void\r\n\r\n\r\nexport const getUsersThunk: GetUsersThunkType = (currentPage, pageSize) => {\r\n\r\n    return (dispath: Dispatch) => {\r\n        dispath(setIsFetching(true))\r\n        userAPI.setUsers(currentPage, pageSize).then(res => {\r\n            dispath(setIsFetching(false))\r\n            dispath(setUsers(res.data.items))\r\n            dispath(setTotalUsersCount(res.data.totalCount))\r\n        })\r\n    }\r\n};\r\n\r\nexport const followToUserThunk: FollowToUserThunkType = (userId) => {\r\n\r\n    return (dispath: Dispatch) => {\r\n        dispath(setFollowingInProgress(true, userId))\r\n        userAPI.follow(userId)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispath(follow(userId))\r\n                    dispath(setFollowingInProgress(false, userId))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const unfollowToUserThunk: UnfollowToUserThunkType = (userId) => {\r\n\r\n    return (dispath: Dispatch) => {\r\n\r\n        dispath(setFollowingInProgress(true, userId))\r\n        userAPI.unfollow(userId)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispath(unfollow(userId))\r\n                    dispath(setFollowingInProgress(false, userId))\r\n                }\r\n            })\r\n    }\r\n};\r\n\r\nexport const paginationThunk: PaginationThunkType = (page, pageSize) => {\r\n\r\n    return (dispath: Dispatch) => {\r\n        dispath(setCurrentPage(page))\r\n        dispath(setIsFetching(true))\r\n        userAPI.setUsers(page, pageSize).then(res => {\r\n            dispath(setUsers(res.data.items))\r\n            dispath(setIsFetching(false))\r\n        })\r\n    }\r\n};","import React from 'react';\r\nimport style from './myPost.module.css'\r\n\r\ntype propsType = {\r\n    message: string | number\r\n    photo: string | null | undefined\r\n}\r\n\r\n\r\nexport const MyPost: React.FC<propsType> = (props) => {\r\n\r\n    let defaultAvatarPhoto = `https://i.ibb.co/F8yML1z/image.png`\r\n\r\n    return (\r\n        <div className={style.content}>\r\n            <div className={style.content__img}>\r\n                <img src={(props.photo) ? props.photo : defaultAvatarPhoto} alt=\"\"/>\r\n            </div>\r\n            <div className={style.content__text}>\r\n                <span>{props.message}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport style from './newPost.module.css'\r\nimport {useFormik} from \"formik\";\r\nimport {FormControl, FormGroup, Grid, TextField, Button} from \"@material-ui/core\";\r\nimport * as Yup from \"yup\";\r\n\r\ntype FormDataType = {\r\n    textareaPost: string\r\n}\r\n\r\ntype propsType = {\r\n    addPost: (newPostValue: string) => void\r\n}\r\n\r\nexport const NewPost: React.FC<propsType> = (props) => {\r\n\r\n    return (\r\n        <div className={style.content}>\r\n            <ProfilePostForm addPost={props.addPost}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface IProfilePostForm {\r\n    addPost: (newPostValue: string) => void\r\n}\r\n\r\nconst validationSchema = Yup.object({\r\n    textareaPost: Yup.string()\r\n        .max(300,'post should consists 300 char or less')\r\n});\r\n\r\n\r\nexport const ProfilePostForm: React.FC<IProfilePostForm> = (props) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            textareaPost: '',\r\n        },\r\n        validationSchema,\r\n        onSubmit: (values,{resetForm}) => {\r\n            if (values.textareaPost) {\r\n                props.addPost(values.textareaPost)\r\n            }\r\n            resetForm({values: '' || undefined})\r\n        },\r\n    });\r\n\r\n    const errorStype = {\r\n        color: \"red\",\r\n    }\r\n\r\n    return <>\r\n        <FormControl>\r\n            <FormGroup>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Grid container direction={\"column\"} spacing={3}>\r\n                        <Grid item>\r\n                            <div className={style.content__textArea}>\r\n                                <TextField placeholder={'enter some text...'}\r\n                                           name={'textareaPost'}\r\n                                           variant=\"outlined\"\r\n                                           multiline\r\n                                           rows={2}\r\n                                           rowsMax={4}\r\n                                           {...formik.getFieldProps('textareaPost')}/>\r\n                            </div>\r\n                            {formik.errors.textareaPost && formik.touched.textareaPost ?\r\n                                <div style={errorStype}>{formik.errors.textareaPost}</div> : null}\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <div className={style.content__button}>\r\n                                <Button type={'submit'} variant='contained'>PUBLISH</Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </FormGroup>\r\n        </FormControl>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport {addPost} from \"../../../../redux/ActionCreators\";\r\nimport {connect} from \"react-redux\";\r\nimport {NewPost} from \"./NewPost\";\r\n\r\ntype MapDispatchToProps = {\r\n    addPost:(value: string) => void\r\n}\r\n\r\nexport const NewPostContainer = connect<{}, MapDispatchToProps, {}, {}>(null, {addPost})(NewPost);\r\n","import React from \"react\";\r\nimport s from './myPosts.module.css'\r\nimport {MyPost} from \"./myPost/MyPost\";\r\nimport {NewPostContainer} from \"./newPost/NewPostContainer\";\r\nimport {ProfilePostsType} from \"../../../redux/reducers/profilePage-reducer\";\r\n\r\n\r\ntype propsType = {\r\n    posts: Array<ProfilePostsType>\r\n    photo: string | null | undefined\r\n}\r\n\r\nexport const MyPosts: React.FC<propsType> = (props) => {\r\n\r\n    return (\r\n        <div className={s.content__posts}>\r\n            <h4><span>Create a new post:</span></h4>\r\n            <NewPostContainer/>\r\n            {props.posts.map((p) => <MyPost message={p.message}\r\n                                            key={p.id}\r\n                                            photo={props.photo}/>)}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from './profileInfo.module.css';\r\n\r\ntype EditebleStatusPropsType = {\r\n    status: string\r\n    updateStatus: (title: string) => void\r\n    userId: string\r\n}\r\n\r\n\r\nexport const EditableStatus: React.FC<EditebleStatusPropsType> = (props) => {\r\n\r\n    let userId = props.userId\r\n\r\n    if (!userId) {\r\n        userId = '7788'\r\n    }\r\n\r\n    const [editeMode, setEditeMode] = useState<boolean>(false)\r\n    const [localStatus, setLocalStatus] = useState<string>(props.status)\r\n\r\n    const onBlurHandler = () => {\r\n        props.updateStatus(localStatus)\r\n        setEditeMode(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setLocalStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return <div>\r\n        <span><b>Status: </b></span>\r\n        {(editeMode && userId == '7788') ?\r\n            <div>\r\n                <input type=\"text\" value={localStatus} onChange={onChangeHandler} onBlur={onBlurHandler}\r\n                       autoFocus={true}/></div> :\r\n            <div className={s.content__mainInfo_contactStatus_spanContent}>\r\n                <span onDoubleClick={() => setEditeMode(true)}>{props.status}</span>\r\n            </div>}\r\n    </div>\r\n}","import React from \"react\";\r\nimport s from './profileInfo.module.css';\r\nimport {EditableStatus} from \"./EditableStatus\";\r\nimport style from \"../../nav/friendsBlock/friendsBlock.module.css\";\r\nimport {AccordionDetails, AccordionSummary, createStyles, Typography} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport {makeStyles, Theme, withStyles} from \"@material-ui/core/styles\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport {CommonDataProfileType, SocialContactsType} from \"../../../redux/reducers/profilePage-reducer\";\r\n\r\ntype PropsType = {\r\n    userProfile: CommonDataProfileType\r\n    status: string\r\n    updateStatus: (title: string) => void\r\n    userId: string\r\n}\r\n\r\nexport const ProfileInfo: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    let contacts: any\r\n    if (props.userProfile && props.userProfile.contacts) {\r\n        let keys = Object.keys(props.userProfile.contacts)\r\n        contacts = keys.map((key) => {\r\n            return (\r\n                <div className={s.content__socialLinks} key={key}>\r\n                    <span>{key}: {props.userProfile.contacts[key as keyof SocialContactsType]}</span>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    let defaultAvatarPhoto = `https://i.imgur.com/d8HZHxF.jpg`\r\n\r\n    const CssAccordion = withStyles({\r\n        root: {\r\n            '& .MuiAccordionDetails-root': {\r\n                padding: '0px',\r\n            },\r\n        },\r\n    })(Accordion);\r\n\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            root: {\r\n                width: '100%',\r\n                \"& .MuiAccordionDetails\": {\r\n                    padding: '0px',\r\n                },\r\n            },\r\n            heading: {\r\n                fontSize: theme.typography.pxToRem(15),\r\n                fontWeight: theme.typography.fontWeightRegular,\r\n            },\r\n            contentBlock: {\r\n                width: '100%',\r\n            },\r\n            contentBlockWrapper: {\r\n                width: '100%',\r\n            },\r\n            contentBlockWrapperRoot: {\r\n                width: '100%',\r\n            },\r\n        }),\r\n    );\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n    return <div className={s.content__profileInfo}>\r\n        <div className={s.content__mainInfo}>\r\n            <div className={s.content__mainInfo_avatar}>\r\n                <img src={(props.userProfile?.photos?.large) ? props.userProfile?.photos?.large :\r\n                    defaultAvatarPhoto}\r\n                     alt=\"\"/>\r\n            </div>\r\n            <div className={s.content__mainInfo_contactStatus}>\r\n                <div className={s.content__description_fullName}>\r\n                    <b>FullName</b>: {props.userProfile?.fullName}\r\n                </div>\r\n                <EditableStatus status={props.status} updateStatus={props.updateStatus} userId={props.userId}/>\r\n            </div>\r\n        </div>\r\n        <div className={s.content__description}>\r\n            <div className={s.content__description_aboutMe}>\r\n                <b>AboutMe</b>: {props.userProfile?.aboutMe}\r\n            </div>\r\n            <div className={s.content__description_searchJob}>\r\n                <b>Search a job:</b> {(props.userProfile?.lookingForAJob) ? \"Yes\" : \"No\"}\r\n            </div>\r\n            <div className={s.content__description_desriptionOfJob}>\r\n                <b>Description of job:</b> {(props.userProfile?.lookingForAJobDescription) ?\r\n                props.userProfile.lookingForAJobDescription :\r\n                \"No description\"}\r\n            </div>\r\n            <div className={s.content__description_contacts}>\r\n                <CssAccordion className={`${style.MuiPaperRoot} ${style.contentBlockWrapperRoot}`}>\r\n                    <AccordionSummary\r\n                        expandIcon={<ExpandMoreIcon/>}\r\n                        aria-controls=\"panel1a-content\"\r\n                        id=\"panel1a-header\"\r\n                    >\r\n                        <Typography className={classes.heading}><b>Contacts:</b></Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails className={classes.contentBlockWrapper}>\r\n                        <Typography className={classes.contentBlock} component={'span'}>\r\n                            {contacts}\r\n                        </Typography>\r\n                    </AccordionDetails>\r\n                </CssAccordion>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n})","import React, {CSSProperties} from 'react';\r\nimport style from './profile.module.css'\r\nimport {MyPosts} from \"./myPosts/MyPosts\";\r\nimport {ProfileInfo} from \"./profileInfo/ProfileInfo\";\r\nimport {ProfilePageType} from \"../../redux/reducers/profilePage-reducer\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\ntype propsType = {\r\n    profilePage: ProfilePageType\r\n    updateStatus: (title: string) => void\r\n    userId: string\r\n}\r\n\r\nexport const Profile: React.FC<propsType> = (props) => {\r\n\r\n    const circleProgressStyle: CSSProperties = {\r\n        display: 'block',\r\n        position: \"absolute\",\r\n        top: '0',\r\n        left: '0',\r\n        bottom: '0',\r\n        right: '0',\r\n        margin: 'auto',\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.content}>\r\n            {props.profilePage.isFetching ?\r\n                <CircularProgress style={circleProgressStyle}/> : <>\r\n                    <ProfileInfo userProfile={props.profilePage.userProfile}\r\n                                 status={props.profilePage.profileStatus}\r\n                                 updateStatus={props.updateStatus}\r\n                                 userId={props.userId}/>\r\n                    <MyPosts posts={props.profilePage.posts}\r\n                             photo={props.profilePage.userProfile.photos?.large}/>\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n\r\n}","import { createSelector } from 'reselect'\r\nimport {stateType} from \"../redux-store\";\r\nimport { ProfilePageType } from '../reducers/profilePage-reducer';\r\n\r\ntype GetProfilePageType = (state: stateType) => ProfilePageType\r\ntype GetUserIdType = (state: stateType) => number | null\r\n\r\n\r\n\r\n\r\n//profilePage\r\nconst getProfilePage:GetProfilePageType = (state) => state.profilePage\r\n\r\nexport const getProfilePageSelector = createSelector(getProfilePage,(profile) => {\r\n        return profile\r\n})\r\n\r\n\r\n//profilePage\r\nconst getUserId:GetUserIdType = (state) => state.auth.id\r\n\r\nexport const getUserIdSelector = createSelector(getUserId,(userId) => {\r\n        return userId\r\n})","import React, {ComponentType} from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {setUserProfileThunk, setUserStatusThunk, updateUserStatusThunk} from \"../../thunks/profileThunk\";\r\nimport {authRedirectHOC} from '../../hoc/authRedirectHOC';\r\nimport {compose} from 'redux';\r\nimport {ProfilePageType} from '../../redux/reducers/profilePage-reducer';\r\nimport {getProfilePageSelector, getUserIdSelector} from '../../redux/selectors/ProfileSelectors';\r\n\r\ntype MstpType = {\r\n    profilePage: ProfilePageType\r\n    authUserId: number | null\r\n}\r\n\r\ntype MdtpType = {\r\n    setUserProfile: (userId: string) => void\r\n    setStatusProfile: (userId: string) => void\r\n    updateStatus: (title: string) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & MdtpType & MstpType\r\n\r\nexport class ProfileContainer extends React.PureComponent<PropsType> {\r\n\r\n    componentDidMount(): void {\r\n\r\n        let userId = this.props.match.params.userId;\r\n\r\n        if (!userId) {\r\n            if(this.props.authUserId !== null){\r\n                userId = this.props.authUserId.toString();\r\n            } else {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n\r\n        this.props.setUserProfile(userId)\r\n         this.props.setStatusProfile(userId)\r\n    }\r\n\r\n\r\n    render(): React.ReactNode {\r\n        return (\r\n            <Profile profilePage={this.props.profilePage}\r\n                     updateStatus={this.props.updateStatus}\r\n                     userId={this.props.match.params.userId}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: stateType): MstpType => {\r\n    return {\r\n        profilePage: getProfilePageSelector(state),\r\n        authUserId: getUserIdSelector(state),\r\n    }\r\n}\r\n\r\nexport const ProfileContainerWithURL = compose<ComponentType<{}>>(\r\n    authRedirectHOC,\r\n    withRouter,\r\n    connect<MstpType, MdtpType, {}, stateType>(mapStateToProps, {\r\n        setUserProfile: setUserProfileThunk,\r\n        setStatusProfile: setUserStatusThunk,\r\n        updateStatus: updateUserStatusThunk,\r\n    }))(ProfileContainer)\r\n\r\n","import {profileAPI} from \"../API/API\";\r\nimport {setIsFetching, setStatusProfile, setUserProfile} from \"../redux/ActionCreators\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype SetUserProfileThunkType = (userId: string) => void\r\ntype SetUserStatusThunkType = (userId: string) => void\r\ntype UpdateUserStatusThunkType = (userId: string) => void\r\ntype UpdateProfilePhotoThunk = (photoURL: File) => void\r\n\r\n\r\nexport const setUserProfileThunk: SetUserProfileThunkType = (userId) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n\r\n        dispatch(setIsFetching(true))\r\n        profileAPI.setUserProfile(userId)\r\n            .then(res => {\r\n                dispatch(setUserProfile(res.data))\r\n                dispatch(setIsFetching(false))\r\n            })\r\n    }\r\n};\r\nexport const setUserStatusThunk: SetUserStatusThunkType = (userId) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n\r\n        dispatch(setIsFetching(true))\r\n        profileAPI.setStatusProfile(userId)\r\n            .then(res => {\r\n                dispatch(setStatusProfile(res.data))\r\n            })\r\n    }\r\n};\r\nexport const updateUserStatusThunk: UpdateUserStatusThunkType = (title) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.updateStatusProfile(title)\r\n            .then(() => {\r\n                dispatch(setStatusProfile(title))\r\n            })\r\n    }\r\n};\r\n","import React from 'react';\r\nimport style from './header.module.css'\r\nimport logo from '../../images/logo.png'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {Button} from '@material-ui/core';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\ntype PropsType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n    logOutProfile:() => void\r\n}\r\n\r\n\r\nexport const Header: React.FC<PropsType> = (props) => {\r\n\r\n    const logOut = () => {\r\n        props.logOutProfile()\r\n    }\r\n\r\n    return (\r\n        <div className={style.header}>\r\n            <div className={style.header__wrapper}>\r\n                <div className={style.header__wrapper_img}>\r\n                    <img src={logo} alt=\"logo\"/>\r\n                </div>\r\n                <div className={style.header__authBlock}>\r\n                    {props.isAuth ?\r\n                        <div className={style.header__authBlock_login}>\r\n                            <span>{props.login}</span>\r\n                            <div className={style.header__logOutBtn}>\r\n                                <Button variant=\"contained\" onClick={logOut}>\r\n                                    <ExitToAppIcon />\r\n                                    LOG OUT\r\n                                </Button>\r\n                            </div>\r\n                        </div> :\r\n                        <NavLink to={'/login'}>Sign In</NavLink>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../API/API\";\r\nimport {setAuthData, setAuthError, setCaptchaValue} from \"../redux/ActionCreators\";\r\n\r\n\r\nexport const getCaptchaThunk = () => {\r\n\r\n    return (dispath: Dispatch) => {\r\n        authAPI.getCaptcha()\r\n            .then(res => {\r\n                    dispath(setCaptchaValue(res.data.url))\r\n                }\r\n            )\r\n\r\n    }\r\n};\r\n\r\nexport const authProfileThunk = () => {\r\n\r\n    return (dispath: Dispatch) => {\r\n        return authAPI.setAuth()\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispath(setAuthData(res.data.data))\r\n                }\r\n            })\r\n\r\n    }\r\n};\r\n\r\nexport const logInProfileThunk = (email: string, password: string, rememberMe: boolean, captcha?: string) => {\r\n\r\n    return (dispath: Dispatch<any>) => {\r\n        dispath(setAuthError(null))\r\n        authAPI.logIn(email, password, rememberMe, captcha)\r\n            .then(res => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispath(authProfileThunk())\r\n                    } else if (res.data.resultCode === 10) {\r\n                        dispath(getCaptchaThunk())\r\n                    } else {\r\n                        if (res.data.messages.length) {\r\n                            dispath(setAuthError(res.data.messages[0]))\r\n                        }\r\n                    }\r\n                }\r\n            )\r\n\r\n    }\r\n};\r\n\r\nexport const logOutProfileThunk = () => {\r\n\r\n    return (dispath: Dispatch) => {\r\n\r\n        authAPI.logout()\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispath(setAuthData({email: null, login: null, id: null}))\r\n                }\r\n            })\r\n\r\n    }\r\n}","import { createSelector } from 'reselect'\r\nimport {stateType} from \"../redux-store\";\r\n\r\ntype GetIsAuthType = (state: stateType) => boolean\r\ntype GetServerErrorType = (state: stateType) => string | null\r\ntype GetCaptchaType = (state: stateType) => any\r\n\r\n\r\n\r\n\r\n//isAuth\r\nconst getIsAuth:GetIsAuthType = (state) => state.auth.isAuth\r\n\r\nexport const getIsAuthSelector = createSelector(getIsAuth,(isAuth) => {\r\n        return isAuth\r\n})\r\n\r\n\r\n//serverError\r\nconst getServerError:GetServerErrorType = (state) => state.auth.error\r\n\r\nexport const getServerErrorSelector = createSelector(getServerError,(serverError) => {\r\n        return serverError\r\n})\r\n\r\n//getCaptcha\r\nconst getCaptcha:GetCaptchaType = (state) => state.auth.captcha\r\n\r\nexport const getCaptchaSelector = createSelector(getCaptcha,(captcha) => {\r\n        return captcha\r\n})","import { createSelector } from 'reselect'\r\nimport {stateType} from \"../redux-store\";\r\n\r\ntype GetLoginType = (state: stateType) => string | null\r\n\r\n\r\n\r\n\r\n//login\r\nconst getLogin:GetLoginType = (state) => state.auth.login\r\n\r\nexport const getLoginSelector = createSelector(getLogin,(login) => {\r\n        return login\r\n})\r\n\r\n\r\n","import React from 'react';\r\nimport {Header} from \"./Header\";\r\nimport {connect} from 'react-redux';\r\nimport {stateType} from '../../redux/redux-store';\r\nimport {logOutProfileThunk} from '../../thunks/authThunk';\r\nimport {getIsAuthSelector} from \"../../redux/selectors/LoginSelectors\";\r\nimport { getLoginSelector } from '../../redux/selectors/HeaderSelectors';\r\n\r\ntype MstpType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\ntype MdtpType = {\r\n    logOutProfile: () => void\r\n}\r\n\r\ntype PropsType = MstpType & MdtpType\r\n\r\nclass HeaderContainer extends React.Component<PropsType> {\r\n\r\n    render(): React.ReactNode {\r\n        return <Header isAuth={this.props.isAuth}\r\n                       login={this.props.login}\r\n                       logOutProfile={this.props.logOutProfile}/>\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: stateType): MstpType => {\r\n    return {\r\n        isAuth: getIsAuthSelector(state),\r\n        login: getLoginSelector(state),\r\n    }\r\n}\r\n\r\n// ???\r\nexport default connect<MstpType, any , any, stateType>(mapStateToProps, {logOutProfile: logOutProfileThunk})(HeaderContainer)","import React, {useCallback} from \"react\";\r\nimport s from \"./loginForm.module.css\";\r\nimport classes from \"./loginForm.module.css\";\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, Grid, TextField,} from \"@material-ui/core\";\r\nimport * as Yup from 'yup';\r\nimport {useFormik} from \"formik\";\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\ninterface IFormData {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n    error: string | null\r\n    captcha?: string\r\n    getCaptcha: () => void\r\n}\r\n\r\ntype InitialValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\n\r\nconst validationSchema = Yup.object({\r\n    email: Yup.string()\r\n        .email('Enter a valid email')\r\n        .required('Email is required'),\r\n    password: Yup.string()\r\n        .min(8, 'Minimum 8 characters length')\r\n        .max(20, 'Max 20 characters length')\r\n        .required('Password is required'),\r\n\r\n});\r\n\r\n\r\nexport const LoginForm: React.FC<IFormData> = (props) => {\r\n\r\n    const {error, login, captcha} = props\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n            captcha: '',\r\n        },\r\n\r\n        validationSchema,\r\n        onSubmit: (values: InitialValuesType, {resetForm}) => {\r\n            login(values.email, values.password, values.rememberMe, values.captcha)\r\n            resetForm({values: '' || undefined})\r\n        },\r\n    });\r\n\r\n    const getCaptcha = useCallback(() => {\r\n        props.getCaptcha()\r\n    }, [])\r\n\r\n\r\n    return <>\r\n        <FormControl>\r\n            <FormGroup>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Grid container direction={\"column\"} spacing={2}>\r\n                        <Grid item>\r\n                            <div>\r\n                                <TextField name={'email'}\r\n                                           label={'email'}\r\n                                           variant=\"outlined\"\r\n                                           {...formik.getFieldProps('email')}\r\n                                           InputProps={{\r\n                                               classes: {\r\n                                                   root: classes.fieldErr,\r\n                                               }\r\n                                           }}\r\n                                />\r\n                            </div>\r\n                            {formik.errors.email && formik.touched.email ? (\r\n                                <div className={s.styleError}>{formik.errors.email}</div>) : null}\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <div>\r\n                                <TextField name={'password'}\r\n                                           label={'password'}\r\n                                           type=\"password\"\r\n                                           variant=\"outlined\"\r\n                                           {...formik.getFieldProps('password')}/>\r\n                            </div>\r\n                            {!formik.errors.password && error ? <div className={s.styleError}>{error}</div> : null}\r\n                            {formik.errors.password && formik.touched.password ? (\r\n                                <div className={s.styleError}>{formik.errors.password}</div>) : null}\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <div>\r\n                                <FormControlLabel\r\n                                    label={'Remember me'}\r\n                                    control={<Checkbox\r\n                                        name={'rememberMe'}\r\n                                        {...formik.getFieldProps('rememberMe')}\r\n                                    />}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        {\r\n                            captcha && <Grid item>\r\n                                <div className={s.captcha__content}>\r\n                                    <img src={captcha} alt=\"\"/>\r\n                                    <div className={s.captcha__content_img}>\r\n                                        <RefreshIcon style={{fontSize: 30}} onClick={getCaptcha}/>\r\n                                    </div>\r\n                                </div>\r\n                                <TextField name={'captcha'}\r\n                                           label={'captcha'}\r\n                                           {...formik.getFieldProps('captcha')}/>\r\n                            </Grid>\r\n                        }\r\n                        <Grid item>\r\n                            <div>\r\n                                <Button type={'submit'} variant=\"contained\">LOG IN</Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </FormGroup>\r\n        </FormControl>\r\n    </>\r\n}\r\n","import React from \"react\";\r\nimport {LoginForm} from \"./LoginForm\";\r\nimport s from './login.module.css';\r\nimport {connect} from \"react-redux\";\r\nimport {getCaptchaThunk, logInProfileThunk} from \"../../thunks/authThunk\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getIsAuthSelector, getServerErrorSelector, getCaptchaSelector} from \"../../redux/selectors/LoginSelectors\";\r\n\r\n//for Login\r\ntype LoginPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n    isAuth: boolean\r\n    error: string | null\r\n    captcha?: string\r\n    getCaptcha: () => void\r\n}\r\n\r\n//for LoginContainer\r\ntype MapDispatchToPropsType = {\r\n    postLoginData: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n    getCaptcha: () => void\r\n}\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    error: string | null\r\n    captcha?: string\r\n}\r\ntype LoginContainerPropsType = {}\r\ntype CommonLoginContainerType = MapStateToPropsType & MapDispatchToPropsType & LoginContainerPropsType\r\n\r\n\r\nexport const Login: React.FC<LoginPropsType> = (props) => {\r\n\r\n    const getCaptcha = () => {\r\n        props.getCaptcha()\r\n    }\r\n\r\n    return (\r\n        <div className={s.login__content}>\r\n            <div className={s.login__content_inner_textHelper}>\r\n                <h4>You can enter and test features using those data:</h4>\r\n                <span>login:</span><b> vladby86@gmail.com</b><br/>\r\n                <span>password:</span><b> HardPassword_2020</b>\r\n            </div>\r\n            {(props.isAuth) ? <Redirect to={'/profile'}/> :\r\n                <div className={s.login__content_inner}>\r\n                    <h1>Login</h1>\r\n                    <LoginForm login={props.login}\r\n                               error={props.error}\r\n                               captcha={props.captcha}\r\n                               getCaptcha={getCaptcha}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst LoginContainer: React.FC<CommonLoginContainerType> = (props) => {\r\n\r\n    const postLogin = (email: string, password: string, rememberMe: boolean, captcha: string) => {\r\n        props.postLoginData(email, password, rememberMe, captcha)\r\n    }\r\n    return <Login login={postLogin}\r\n                  isAuth={props.isAuth}\r\n                  error={props.error}\r\n                  captcha={props.captcha}\r\n                  getCaptcha={props.getCaptcha}/>\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: stateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: getIsAuthSelector(state),\r\n        error: getServerErrorSelector(state),\r\n        captcha: getCaptchaSelector(state),\r\n    }\r\n}\r\n\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, LoginContainerPropsType, stateType>(mapStateToProps, {\r\n    postLoginData: logInProfileThunk,\r\n    getCaptcha: getCaptchaThunk,\r\n})(LoginContainer)\r\n","import {Dispatch} from \"redux\";\r\nimport {authProfileThunk} from \"./authThunk\";\r\nimport {initializedApp} from \"../redux/ActionCreators\";\r\n\r\n\r\n\r\n\r\nexport const initializedAppThunk: any = () => {\r\n\r\n    return (dispath: any) => {\r\n\r\n        const promise = dispath(authProfileThunk())\r\n\r\n        promise.then(() => {\r\n                return\r\n            })\r\n            .finally(() => {\r\n            dispath(initializedApp())\r\n        })\r\n    }\r\n};\r\n\r\n","import React, {useEffect} from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport s from './app.module.css'\r\nimport {Nav} from './Components/nav/Nav';\r\nimport {DialogContainer} from \"./Components/dialogs/DialogContainer\";\r\nimport {News} from \"./Components/news/News\";\r\nimport {Settings} from './Components/settings/Settings';\r\nimport {ActionCreatorsType} from \"./redux/ActionCreators\";\r\nimport {UsersContainer} from './Components/users/UsersContainer';\r\nimport {ProfileContainerWithURL} from \"./Components/profile/ProfileContainer\";\r\nimport HeaderContainer from \"./Components/header/HeaderContainer\";\r\nimport LoginContainer from \"./Components/login/Login\";\r\nimport {initializedAppThunk} from './thunks/appThunk';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {stateType} from \"./redux/redux-store\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\ntype propsType = {\r\n    state: stateType\r\n    dispatch: (action:ActionCreatorsType) => void\r\n}\r\n\r\n\r\nconst App:React.FC<propsType> = (props) => {\r\n\r\n    const isInitialized = useSelector<stateType, boolean>(state => state.app.isInitialized);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(initializedAppThunk())\r\n    }, []);\r\n\r\n\r\n    if(!isInitialized){\r\n        return <CircularProgress className={s.circleProgress} />\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.app__wrapper}>\r\n            <HeaderContainer />\r\n            <Nav navPage={props.state.navPage} />\r\n            <div className={s.app__wrapper_content}>\r\n                <Route path={'/profile/:userId?'} render={() => <ProfileContainerWithURL />}/>\r\n                <Route path={'/dialogs'} render={() => <DialogContainer />}/>\r\n                <Route path={'/users'}  render={() => <UsersContainer />}/>\r\n                <Route path={'/news'}  render={() => <News />}/>\r\n                <Route path={'/settings'} render={() => <Settings />}/>\r\n                <Route path={'/login'} render={() => <LoginContainer />}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n","import {ActionCreatorsType, typeOfActionDispatch} from \"../ActionCreators\";\r\nimport {v4 as uuid} from 'uuid';\r\n\r\nexport type ProfilePostsType = {\r\n    id: string,\r\n    message: string\r\n}\r\n\r\nexport type SocialContactsType = {\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    github: string\r\n    youtube: string\r\n    mainLink: string\r\n\r\n}\r\n\r\nexport type PhotoUserType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\n\r\nexport type CommonDataProfileType = {\r\n    aboutMe: string | null\r\n    contacts: SocialContactsType\r\n    fullName: string | null\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    photos: PhotoUserType | null\r\n    userId: number\r\n}\r\n\r\nexport type ProfilePageType = typeof initialState\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {id: uuid(), message: \"Hey girls\"},\r\n        {id: uuid(), message: \"Hey guys\"}\r\n    ] as Array<ProfilePostsType>,\r\n    userProfile: {} as CommonDataProfileType,\r\n    isFetching: false,\r\n    profileStatus: '',\r\n};\r\n\r\n\r\nexport const profilePageReducer = (state:ProfilePageType = initialState, action:ActionCreatorsType):ProfilePageType => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.ADD_POST:\r\n            let newPostValue = action.value\r\n            let newPost = {id: uuid(), message: newPostValue};\r\n\r\n            state = {...state, posts: [...state.posts, newPost]};\r\n            return state;\r\n        case typeOfActionDispatch.SET_USER_PROFILE:\r\n            return {...state, userProfile: action.userProfile};\r\n        case typeOfActionDispatch.SET_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching};\r\n\r\n        case typeOfActionDispatch.SET_STATUS_PROFILE:\r\n            return {...state, profileStatus: action.statusProfile};\r\n\r\n        default:\r\n            return state\r\n    }\r\n};","import {ActionCreatorsType, typeOfActionDispatch} from \"../ActionCreators\";\r\nimport {v4 as uuid} from 'uuid';\r\n\r\n\r\nexport type DialogsNamesType = {\r\n    id: string,\r\n    name: string,\r\n    path: string\r\n}\r\n\r\nexport type DialogsMessagesType = {\r\n    id: string,\r\n    message: string\r\n}\r\n\r\nexport type DialogsPageType = typeof initialState\r\n\r\nconst initialState = {\r\n    names: [\r\n        {id: uuid(), name: 'Marat', path: '/dialogs/1'},\r\n        {id: uuid(), name: 'Anton', path: '/dialogs/2'},\r\n        {id: uuid(), name: 'Arkasha', path: '/dialogs/3'},\r\n        {id: uuid(), name: 'Tolik', path: '/dialogs/4'},\r\n    ] as DialogsNamesType[],\r\n    messages: [\r\n        {id: uuid(), message: 'Hey man!'},\r\n        {id: uuid(), message: 'How is it going?'},\r\n        {id: uuid(), message: 'You forgot about my birthday(('},\r\n        {id: uuid(), message: 'I want to break up with you, sorry'},\r\n    ] as DialogsMessagesType[]\r\n};\r\n\r\nexport const dialogsPageReducer = (state: DialogsPageType = initialState, action: ActionCreatorsType): DialogsPageType => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.ADD_MESSAGE:\r\n            let message = action.message;\r\n            let newMessage = {id: uuid(), message};\r\n            state = {...state, messages: [...state.messages, newMessage]};\r\n            return state;\r\n\r\n        default:\r\n            return state\r\n    }\r\n};","import {ActionCreatorsType} from \"../ActionCreators\";\r\nimport {v4 as id} from 'uuid';\r\n\r\n\r\nexport type NavTitlesType = {\r\n    id: string\r\n    title: string\r\n    path: string\r\n}\r\n\r\nexport type FriendsNavType = {\r\n    id: string\r\n    name: string\r\n    pathToDialog: string\r\n    isOnline: boolean\r\n}\r\n\r\nexport type NavPageType = typeof initialState\r\n\r\n\r\nconst initialState = {\r\n    navTitles: [\r\n        {id: id(), title: 'Profile', path: '/profile'},\r\n        {id: id(), title: 'Dialogs', path: '/dialogs'},\r\n        {id: id(), title: 'Users', path: '/users'},\r\n        {id: id(), title: 'News', path: '/news'},\r\n        {id: id(), title: 'Settings', path: '/settings'}\r\n    ] as NavTitlesType[],\r\n    friends: [\r\n        {id: id(), name: 'Marat', pathToDialog: '/dialogs/1', isOnline: true},\r\n        {id: id(), name: 'Anton', pathToDialog: '/dialogs/2', isOnline: false},\r\n        {id: id(), name: 'Arkasha', pathToDialog: '/dialogs/3', isOnline: true},\r\n        {id: id(), name: 'Tolik', pathToDialog: '/dialogs/4', isOnline: false}\r\n    ] as FriendsNavType[]\r\n};\r\n\r\nexport const navPageReducer = (state:NavPageType = initialState, action:ActionCreatorsType):NavPageType => {\r\n    return {...state}\r\n}","import {ActionCreatorsType, typeOfActionDispatch} from \"../ActionCreators\";\r\nimport {PhotoUserType} from \"./profilePage-reducer\";\r\n\r\n\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string | null\r\n    photos: PhotoUserType\r\n    status: string | null\r\n    followed: boolean\r\n}\r\n\r\nexport type UsersStateType = typeof initialUsersState\r\n\r\nconst initialUsersState = {\r\n    users: [] as UserType[],\r\n    totalUsersCount: 0,\r\n    pageSize: 100,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    isFollowingInProgress: [] as number[],\r\n};\r\n\r\nexport const usersReducer = (state:UsersStateType = initialUsersState, action:ActionCreatorsType): UsersStateType => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.FOLLOW_TO_USER:\r\n            return {...state, users: state.users.map(u => (u.id === action.userId) ? {...u, followed: true} : u)};\r\n\r\n        case typeOfActionDispatch.UNFOLLOW_TO_USER:\r\n            return {...state, users: state.users.map(u => (u.id === action.userId) ? {...u, followed: false} : u)};\r\n\r\n        case typeOfActionDispatch.SET_USERS:\r\n            return {...state, users: [...action.users]};\r\n\r\n        case typeOfActionDispatch.SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.totalUsersCount};\r\n\r\n        case typeOfActionDispatch.SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage};\r\n\r\n        case typeOfActionDispatch.SET_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching};\r\n\r\n        case typeOfActionDispatch.SET_FOLLOWING_IN_PROGRESS:\r\n            return {\r\n                ...state, isFollowingInProgress: action.isFollowingProgress ?\r\n                    [...state.isFollowingInProgress, action.userId] :\r\n                    [...state.isFollowingInProgress.filter(id => id !== action.userId)]\r\n            };\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import {ActionCreatorsType, typeOfActionDispatch} from \"../ActionCreators\"\r\n\r\n\r\n//typization for reducer\r\nexport type AuthDataType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    captcha?: string\r\n}\r\n\r\nexport interface IAuthData extends AuthDataType{\r\n    isAuth: boolean\r\n    error: string | null\r\n}\r\n\r\nconst initialAuthState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    captcha: '',\r\n    isAuth: false,\r\n    error: null,\r\n};\r\n\r\nexport const authReducer = (state:IAuthData = initialAuthState, action: ActionCreatorsType):IAuthData => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.SET_AUTH_DATA:\r\n\r\n            let copyState = {...state, ...action.authData}\r\n            let isAuth = (copyState.login) ? true : false\r\n            return {...copyState, isAuth}\r\n\r\n        case typeOfActionDispatch.SET_AUTH_ERROR:\r\n\r\n            return {...state, error: (action.error) ? action.error : null}\r\n\r\n        case typeOfActionDispatch.SET_CAPTCHA_VALUE:\r\n            return {...state, captcha: action.captcha}\r\n\r\n        default:\r\n            return state\r\n    }\r\n};","import {ActionCreatorsType, typeOfActionDispatch} from \"../ActionCreators\"\r\n\r\n\r\nexport type InitialAppStateType = typeof initialAppState\r\n\r\nconst initialAppState = {\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state:InitialAppStateType = initialAppState, action:ActionCreatorsType):InitialAppStateType => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.INITIALIZED_APP:\r\n            return {...state, isInitialized: true}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {profilePageReducer, ProfilePageType} from \"./reducers/profilePage-reducer\";\r\nimport {dialogsPageReducer, DialogsPageType} from \"./reducers/dialogsPage-reducer\";\r\nimport {navPageReducer, NavPageType} from \"./reducers/navPage-reducer\";\r\nimport {usersReducer, UsersStateType} from \"./reducers/usersPage-reducer\";\r\nimport {authReducer, IAuthData} from \"./reducers/auth-reducer\";\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer, InitialAppStateType} from \"./reducers/app-reducer\";\r\n\r\n\r\nexport type stateType = {\r\n    profilePage: ProfilePageType\r\n    dialogsPage: DialogsPageType\r\n    navPage: NavPageType\r\n    usersPage: UsersStateType\r\n    auth: IAuthData\r\n    app: InitialAppStateType\r\n}\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profilePageReducer,\r\n    dialogsPage: dialogsPageReducer,\r\n    navPage: navPageReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n});\r\n\r\n\r\nexport let store = createStore(reducers, applyMiddleware(thunk))\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport ReactDOM from \"react-dom\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport {store, stateType} from \"./redux/redux-store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nexport type renderAppTreeType = (state: stateType) => void\r\n\r\n\r\nexport const renderAppTree: renderAppTreeType = (state: stateType) => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <HashRouter>\r\n                <Provider store={store}>\r\n                    <App state={state}\r\n                         dispatch={store.dispatch.bind(store)}/>\r\n                </Provider>\r\n            </HashRouter>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nrenderAppTree(store.getState());\r\n\r\nstore.subscribe(() => renderAppTree(store.getState()))\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content__wrapper\":\"users_content__wrapper__I5n30\",\"content__wrapper_pagination\":\"users_content__wrapper_pagination__1MNj0\",\"content__item\":\"users_content__item__2Yyhu\",\"content__item_img\":\"users_content__item_img__1D76Z\",\"content__item_button_unfollow\":\"users_content__item_button_unfollow__2pV61\",\"content__item_button_follow\":\"users_content__item_button_follow__AmX_9\",\"content__item_info\":\"users_content__item_info__1Xs8f\",\"content__item_info_name\":\"users_content__item_info_name__2HvF9\",\"content__item_info_status\":\"users_content__item_info_status__3AGlj\",\"page\":\"users_page__3334I\",\"active_page\":\"users_active_page__aZlPL\",\"circleProgress\":\"users_circleProgress__3z0Io\",\"scrollTop_wrapper\":\"users_scrollTop_wrapper__uMiAi\",\"scrollTop\":\"users_scrollTop__pkMse\",\"fadeIn\":\"users_fadeIn__2Gngt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content__profileInfo\":\"profileInfo_content__profileInfo__P8qcm\",\"content__mainInfo\":\"profileInfo_content__mainInfo__10Oib\",\"content__mainInfo_avatar\":\"profileInfo_content__mainInfo_avatar__1toRH\",\"content__mainInfo_contactStatus\":\"profileInfo_content__mainInfo_contactStatus__s_GZD\",\"content__mainInfo_contactStatus_spanContent\":\"profileInfo_content__mainInfo_contactStatus_spanContent__3l0nE\",\"content__description\":\"profileInfo_content__description__2dMvU\",\"content__description_aboutMe\":\"profileInfo_content__description_aboutMe__21nxh\",\"content__description_contacts\":\"profileInfo_content__description_contacts__1kNa-\",\"content__description_fullName\":\"profileInfo_content__description_fullName__3yYXC\",\"content__description_searchJob\":\"profileInfo_content__description_searchJob__1LMz1\",\"content__description_desriptionOfJob\":\"profileInfo_content__description_desriptionOfJob__2lpvY\",\"content__socialLinks\":\"profileInfo_content__socialLinks__BbwaC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav__friendsBlock_item\":\"friendsBlock_nav__friendsBlock_item__22hEe\",\"nav__friendsBlock_item_img\":\"friendsBlock_nav__friendsBlock_item_img__fQY5A\",\"nav__friendsBlock_item_name\":\"friendsBlock_nav__friendsBlock_item_name__1TGRU\",\"nav__friendsBlock_item_onlineStatus\":\"friendsBlock_nav__friendsBlock_item_onlineStatus__QYJgV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__1LacB\",\"wrapper__header\":\"dialogs_wrapper__header__2SJHX\",\"dialogs__people\":\"dialogs_dialogs__people__1uaFk\",\"dialogs__messages\":\"dialogs_dialogs__messages__1tidq\",\"dialogs__messages_newMesssage\":\"dialogs_dialogs__messages_newMesssage__b5FW8\",\"dialogs__messages_newMesssage_textarea\":\"dialogs_dialogs__messages_newMesssage_textarea__1fPCD\",\"dialogs__messages_newMesssage_button\":\"dialogs_dialogs__messages_newMesssage_button__1mrcq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"captcha__content\":\"loginForm_captcha__content__3Pg_c\",\"captcha__content_img\":\"loginForm_captcha__content_img__2D3af\",\"styleError\":\"loginForm_styleError__rOP6O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__28bqR\",\"header__wrapper\":\"header_header__wrapper__1rCLi\",\"header__wrapper_img\":\"header_header__wrapper_img__3B4XV\",\"header__authBlock\":\"header_header__authBlock__3SaVn\",\"header__authBlock_login\":\"header_header__authBlock_login__3iRv5\",\"header__logOutBtn\":\"header_header__logOutBtn__1lZF5\"};"],"sourceRoot":""}