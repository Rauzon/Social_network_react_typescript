{"version":3,"sources":["Components/nav/friendsBlock/friendsBlock.module.css","Components/header/header.module.css","Components/nav/nav.module.css","Components/profile/myPosts/myPost/myPost.module.css","Components/profile/myPosts/newPost/newPost.module.css","Components/dialogs/Messages/messages.module.css","Components/users/users.module.css","images/logo.png","Components/nav/sideBar/sideBar.module.css","Components/profile/profile.module.css","Components/profile/myPosts/myPosts.module.css","Components/dialogs/Names/names.module.css","Components/news/news.module.css","Components/settings/settings.module.css","Components/dialogs/dialogs.module.css","serviceWorker.ts","redux/TypesForRedux.ts","Components/header/Header.tsx","Components/nav/sideBar/SidebarTitle.tsx","Components/nav/friendsBlock/FriendsBlock.tsx","Components/nav/Nav.tsx","Components/profile/myPosts/myPost/MyPost.tsx","redux/reducers/profilePage-reducer.ts","Components/profile/myPosts/newPost/NewPostContainer.tsx","Components/profile/myPosts/newPost/NewPost.tsx","Components/profile/myPosts/myPosts.tsx","Components/profile/profileInfo/ProfileInfo.tsx","Components/profile/Profile.tsx","Components/dialogs/Messages/Messages.tsx","Components/dialogs/Names/Names.tsx","Components/dialogs/newMessageInput/NewMessageInputContainer.tsx","Components/dialogs/newMessageInput/NewMessageInput.tsx","Components/dialogs/Dialogs.tsx","Components/news/News.tsx","Components/settings/Settings.tsx","Components/users/UserItem.tsx","Components/preloader/Preloader.tsx","Components/users/UsersAPI.tsx","Components/users/UsersContainer.tsx","App.tsx","redux/reducers/dialogsPage-reducer.ts","redux/reducers/navPage-reducer.ts","redux/reducers/usersPage-reducer.ts","redux/redux-store.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","typeOfActionDispatch","Header","props","className","style","header","header__wrapper","header__wrapper_img","src","logo","alt","SidebarTitle","nav__wrap_menu","to","path","title","FriendsBlock","friends","map","f","key","id","nav__friendsBlock_item","nav__friendsBlock_item_img","nav__friendsBlock_item_name","pathToDialog","name","isOnline","nav__friendsBlock_item_onlineStatus","Nav","nav","navPage","navTitles","t","nav__friendsBlock","nav__friendsBlock_title","MyPost","content","content__img","content__text","message","NewPostContainer","connect","state","newPost","profilePage","dispatch","addPost","type","ADD_POST","updatePost","newPostValue","UPDATE_POST","refPost","React","createRef","content__textArea","placeholder","ref","value","onChange","current","content__button","onClick","MyPosts","posts","p","ProfileInfo","Profile","Messages","newMessage","newMessage__img","newMessage__content","Names","dialogs__people_name","NewMessageInputContainer","newMessageValue","dialogsPage","updateMessageValue","messageValue","UPDATE_MESSAGE","addNewMessage","ADD_MESSAGE","refTextarea","dialogs__messages_newMesssage","dialogs__messages_newMesssage_textarea","dialogs__messages_newMesssage_button","Dialogs","dialogs","wrapper__header","wrapper__header_left","wrapper__header_right","wrapper","dialogs__people","dialogPage","names","n","dialogs__messages","messages","m","News","Settings","UserItem","s","content__item","content__item_leftBlock","content__item_leftBlock_img","photos","small","content__item_leftBlock_button","followed","userId","unfollow","follow","content__item_rightBlock","content__item_rightBlock_name","content__item_rightBlock_status","status","content__item_rightBlock_location","Preloader","UsersAPI","setCurrentPage","setIsFetching","axios","get","pageSize","then","res","setUsers","data","items","this","users","length","currentPage","setTotalUsersCount","totalCount","pageCount","Math","ceil","totalUsersCount","arrPageCount","i","push","content__wrapper","isFetching","page","active_page","u","Component","UsersContainer","usersPage","FOLLOW_TO_USER","followToUserAC","UNFOLLOW_TO_USER","unfollowToUserAC","SET_USERS","setUsersAC","SET_TOTAL_USERS_COUNT","setTotalUsersCountAC","SET_CURRENT_PAGE","setCurrentPageAC","SET_IS_FETCHING","setIsFetchingAC","App","render","initialState","initialUsersState","reducers","combineReducers","action","isFollowed","store","createStore","renderAppTree","ReactDOM","StrictMode","bind","document","getElementById","getState","subscribe","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.d9187ee2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav__friendsBlock_item\":\"friendsBlock_nav__friendsBlock_item__22hEe\",\"nav__friendsBlock_item_img\":\"friendsBlock_nav__friendsBlock_item_img__fQY5A\",\"nav__friendsBlock_item_name\":\"friendsBlock_nav__friendsBlock_item_name__1TGRU\",\"nav__friendsBlock_item_onlineStatus\":\"friendsBlock_nav__friendsBlock_item_onlineStatus__QYJgV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__28bqR\",\"header__wrapper_img\":\"header_header__wrapper_img__3B4XV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"nav_nav__32Dtx\",\"nav__friendsBlock_title\":\"nav_nav__friendsBlock_title__OPYtZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"myPost_content__1RSxM\",\"content__img\":\"myPost_content__img__ab0v1\",\"content__text\":\"myPost_content__text__2GZxT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"newPost_content__2nJOh\",\"content__textArea\":\"newPost_content__textArea__2sjje\",\"content__button\":\"newPost_content__button__3yZ3B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newMessage\":\"messages_newMessage__H-XRi\",\"newMessage__img\":\"messages_newMessage__img__2RyBM\",\"newMessage__content\":\"messages_newMessage__content__g6ttP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content__wrapper\":\"users_content__wrapper__I5n30\",\"content__item\":\"users_content__item__2Yyhu\",\"content__item_leftBlock\":\"users_content__item_leftBlock__3793k\",\"content__item_leftBlock_img\":\"users_content__item_leftBlock_img__3fPq6\",\"content__item_leftBlock_button\":\"users_content__item_leftBlock_button__1WpN3\",\"content__item_rightBlock\":\"users_content__item_rightBlock__3jFNO\",\"content__item_rightBlock_name\":\"users_content__item_rightBlock_name__3bU9i\",\"content__item_rightBlock_status\":\"users_content__item_rightBlock_status__10t-K\",\"content__item_rightBlock_location\":\"users_content__item_rightBlock_location__3hyxM\",\"page\":\"users_page__3334I\",\"active_page\":\"users_active_page__aZlPL\"};","module.exports = __webpack_public_path__ + \"static/media/logo.d243bdd9.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav__wrap_menu\":\"sideBar_nav__wrap_menu__39L7R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"profile_content__1q3D6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"myPosts_posts__2csMZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs__people_name\":\"names_dialogs__people_name__RNTJh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"news_content__kswPX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"settings_content__3LtiA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__1LacB\",\"wrapper\":\"dialogs_wrapper__GqQdl\",\"wrapper__header\":\"dialogs_wrapper__header__2SJHX\",\"wrapper__header_left\":\"dialogs_wrapper__header_left__2Dara\",\"wrapper__header_right\":\"dialogs_wrapper__header_right__383cx\",\"dialogs__people\":\"dialogs_dialogs__people__1uaFk\",\"dialogs__messages\":\"dialogs_dialogs__messages__1tidq\",\"dialogs__messages_newMesssage\":\"dialogs_dialogs__messages_newMesssage__b5FW8\",\"dialogs__messages_newMesssage_textarea\":\"dialogs_dialogs__messages_newMesssage_textarea__1fPCD\",\"dialogs__messages_newMesssage_button\":\"dialogs_dialogs__messages_newMesssage_button__1mrcq\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached profile has been fetched,\n              // but the previous service worker will still serve the older\n              // profile until all client tabs are closed.\n              console.log(\n                'New profile is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Profile is cached for offline use.\" message.\n              console.log('Profile is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('profile-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {UserType} from \"./redux-store\";\r\n\r\nexport enum typeOfActionDispatch {\r\n    ADD_MESSAGE = \"ADD_MESSAGE\",\r\n    ADD_POST = \"ADD_POST\",\r\n    UPDATE_MESSAGE = \"UPDATE_MESSAGE\",\r\n    UPDATE_POST = \"UPDATE_POST\",\r\n    FOLLOW_TO_USER = \"FOLLOW_TO_USER\",\r\n    UNFOLLOW_TO_USER = \"UNFOLLOW_TO_USER\",\r\n    SET_USERS = \"SET_USERS\",\r\n    SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\",\r\n    SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\",\r\n    SET_IS_FETCHING = \"SET_IS_FETCHING\",\r\n}\r\n\r\nexport type ActionCreatorsType = ReturnType<typeof updatePostAC> |\r\n    ReturnType<typeof addPostAC> |\r\n    ReturnType<typeof updateMessageAC> |\r\n    ReturnType<typeof addMessageAC> |\r\n    ReturnType<typeof followToUserAC> |\r\n    ReturnType<typeof unfollowToUserAC> |\r\n    ReturnType<typeof setUsersAC> |\r\n    ReturnType<typeof setTotalUsersCountAC> |\r\n    ReturnType<typeof setCurrentPageAC> |\r\n    ReturnType<typeof setIsFetchingAC>\r\n\r\n//actionCreators\r\nexport const updatePostAC =(newPostValue: string) => {\r\n    return {\r\n        type: typeOfActionDispatch.UPDATE_POST,\r\n        newPostValue\r\n    } as const\r\n};\r\nexport const addPostAC =() =>{\r\n    return {\r\n        type: typeOfActionDispatch.ADD_POST\r\n    } as const\r\n};\r\nexport const updateMessageAC = (newMessageValue: string) => {\r\n    return (\r\n        {type: typeOfActionDispatch.UPDATE_MESSAGE, newMessageValue}\r\n    ) as const\r\n};\r\nexport const addMessageAC = () => {\r\n    return (\r\n        {type: typeOfActionDispatch.ADD_MESSAGE}\r\n    ) as const\r\n};\r\nexport const followToUserAC = (userId:number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.FOLLOW_TO_USER, userId}\r\n    ) as const\r\n};\r\nexport const unfollowToUserAC = (userId: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.UNFOLLOW_TO_USER, userId}\r\n    ) as const\r\n};\r\nexport const setUsersAC = (users: Array<UserType>) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_USERS, users}\r\n    ) as const\r\n};\r\nexport const setTotalUsersCountAC = (totalUsersCount: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_TOTAL_USERS_COUNT, totalUsersCount}\r\n    ) as const\r\n};\r\nexport const setCurrentPageAC = (currentPage: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_CURRENT_PAGE, currentPage}\r\n    ) as const\r\n};\r\nexport const setIsFetchingAC = (isFetching: boolean) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_IS_FETCHING, isFetching}\r\n    ) as const\r\n};\r\n","import React from 'react';\r\nimport style from './header.module.css'\r\nimport logo from '../../images/logo.png'\r\n\r\nexport const Header: React.FC = (props: any) => {\r\n\r\n    return (\r\n        <div className={style.header}>\r\n            <div className={style.header__wrapper}>\r\n                <div className={style.header__wrapper_img}>\r\n                    <img src={logo} alt=\"logo\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React from \"react\";\r\nimport style from './sideBar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    path: string,\r\n    title: string\r\n}\r\n\r\nexport const SidebarTitle: React.FC<PropsType> = (props) => {\r\n    return <>\r\n        <div className={style.nav__wrap_menu}>\r\n            <NavLink to={props.path}>\r\n                <li>{props.title}</li>\r\n            </NavLink>\r\n        </div>\r\n    </>\r\n}","import React from \"react\";\r\nimport style from './friendsBlock.module.css';\r\nimport {FriendsNavType} from \"../../../redux/store\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    friends: FriendsNavType[]\r\n}\r\n\r\nexport const FriendsBlock: React.FC<PropsType> = (props) => {\r\n\r\n    return <>\r\n        {props.friends.map(f => <div key={f.id} className={style.nav__friendsBlock_item}>\r\n                <div className={style.nav__friendsBlock_item_img}>\r\n                    <img src=\"https://icon-library.com/images/avatar-icon-images/avatar-icon-images-4.jpg\" alt=\"\"/>\r\n                </div>\r\n                <div className={style.nav__friendsBlock_item_name}>\r\n                    <NavLink to={f.pathToDialog}>{f.name}</NavLink>\r\n                </div>\r\n                {f.isOnline && <div className={style.nav__friendsBlock_item_onlineStatus}></div>}\r\n            </div>\r\n        )}\r\n    </>\r\n}","import React from \"react\";\r\nimport style from './nav.module.css';\r\nimport { SidebarTitle } from \"./sideBar/SidebarTitle\";\r\nimport {FriendsBlock} from \"./friendsBlock/FriendsBlock\";\r\nimport {navPageType} from \"../../redux/store\";\r\n\r\ntype propsType = {\r\n    navPage: navPageType\r\n}\r\n\r\nexport const Nav:React.FC<propsType> = (props) => {\r\n    return <div className={style.nav}>\r\n        {props.navPage.navTitles.map((t) => <SidebarTitle key={t.id} title={t.title} path={t.path}/>)}\r\n        <div className={style.nav__friendsBlock}>\r\n            <div className={style.nav__friendsBlock_title}>\r\n                <h4>Friends:</h4>\r\n            </div>\r\n            <FriendsBlock friends={props.navPage.friends}/>\r\n        </div>\r\n    </div>\r\n}","import React from 'react';\r\nimport style from './myPost.module.css'\r\n\r\ntype propsType = {\r\n    message: string | number\r\n}\r\n\r\n\r\nexport const MyPost: React.FC<propsType> = (props) => {\r\n    return (\r\n        <div className={style.content}>\r\n            <div className={style.content__img}>\r\n                <img src={'https://tr.rbxcdn.com/47055e576c5566fb6b384a8fccf98c64/420/420/Decal/Png'} alt=\"\"/>\r\n            </div>\r\n            <div className={style.content__text}>\r\n                <span>{props.message}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import {profilePageType} from \"../store\"\r\nimport {ActionCreatorsType} from \"../TypesForRedux\";\r\n\r\nenum typeOfActionDispatch {\r\n    ADD_POST = \"ADD_POST\",\r\n    UPDATE_POST = \"UPDATE_POST\",\r\n}\r\n\r\n\r\nexport type profilePageReducerType = (state: profilePageType, action: ActionCreatorsType) => profilePageType\r\n\r\nconst initialState:profilePageType = {\r\n    posts: [\r\n        {id: 1, message: \"Hey girls\"},\r\n        {id: 2, message: \"Hey guys\"}\r\n    ],\r\n    newPost: ''\r\n}\r\n\r\nexport const profilePageReducer: profilePageReducerType = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.ADD_POST:\r\n            let newPostValue = state.newPost\r\n            let newPost = {id: 5, message: newPostValue}\r\n\r\n            state = {...state, posts: [...state.posts, newPost]}\r\n            state.newPost = '';\r\n            return state;\r\n        case typeOfActionDispatch.UPDATE_POST:\r\n            state = {...state}\r\n            state.newPost = action.newPostValue;\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\r\nimport {ActionCreatorsType, addPostAC, updatePostAC} from \"../../../../redux/TypesForRedux\";\r\nimport {NewPost} from \"./NewPost\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: () => void\r\n    updatePost: (newPostValue: string) => void\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    newPost: string | number\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: stateType):MapStateToPropsType => {\r\n\r\n    return {\r\n        newPost: state.profilePage.newPost\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<ActionCreatorsType>):MapDispatchToPropsType =>\r\n    ({\r\n            addPost: () => {\r\n                dispatch(addPostAC())\r\n            },\r\n            updatePost: (newPost: string) => {\r\n                dispatch(updatePostAC(newPost))\r\n            }\r\n        }\r\n    )\r\n\r\n\r\nexport const NewPostContainer = connect(mapStateToProps, mapDispatchToProps)(NewPost);\r\n","import React, { RefObject } from 'react';\r\nimport style from './newPost.module.css'\r\n\r\n\r\ntype propsType = {\r\n    newPost: number | string\r\n    updatePost: (newPost: string) => void\r\n    addPost: () => void\r\n}\r\n\r\nexport const NewPost:React.FC<propsType> = (props) => {\r\n\r\n    let refPost:RefObject<HTMLTextAreaElement> = React.createRef()\r\n\r\n    const addPost = () => {\r\n        props.addPost()\r\n    }\r\n\r\n    const changeValue = () => {\r\n        if(refPost.current){\r\n            let newPost = refPost.current.value;\r\n            props.updatePost(newPost);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style.content}>\r\n            <div className={style.content__textArea}>\r\n                <textarea placeholder={'Enter text...'} ref={refPost}\r\n                          value={props.newPost} onChange={changeValue}></textarea>\r\n            </div>\r\n            <div className={style.content__button}>\r\n                <button onClick={addPost}>Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport style from './myPosts.module.css'\r\nimport { MyPost } from \"./myPost/MyPost\";\r\nimport {profilePostsType} from \"../../../redux/store\";\r\nimport {NewPostContainer} from \"./newPost/NewPostContainer\";\r\n\r\ntype propsType = {\r\n    posts:Array<profilePostsType>\r\n    newPost:string | number\r\n}\r\n\r\nexport const MyPosts:React.FC<propsType> = (props) => {\r\n\r\n    return (\r\n        <div className={style.posts}>\r\n            <div className=\"content__posts\">\r\n                Create a new post:\r\n                <NewPostContainer />\r\n                {props.posts.map((p) => <MyPost message ={p.message} key={p.id} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport style from './profileInfo.module.css';\r\n\r\n\r\nexport const ProfileInfo = () => {\r\n    return <>\r\n        <div className=\"content__avatar\">\r\n            avatar_icon\r\n        </div>\r\n        <div className=\"content__description\">\r\n            description\r\n        </div>\r\n    </>\r\n}","import React from 'react';\r\nimport style from './profile.module.css'\r\nimport {MyPosts} from \"./myPosts/myPosts\";\r\nimport {ProfileInfo} from \"./profileInfo/ProfileInfo\";\r\nimport {profilePageType} from \"../../redux/store\";\r\nimport {ActionCreatorsType} from \"../../redux/TypesForRedux\";\r\n\r\ntype propsType = {\r\n    profilePage:profilePageType\r\n}\r\n\r\nexport const Profile:React.FC<propsType>= (props) => {\r\n    return (\r\n        <div className={style.content}>\r\n            <ProfileInfo />\r\n            <MyPosts posts={props.profilePage.posts} newPost={props.profilePage.newPost} />\r\n        </div>\r\n    )\r\n\r\n}","import React from \"react\";\nimport style from './messages.module.css'\n\ntype propsType = {\n    message: string | number\n}\n\nexport const Messages: React.FC<propsType> = (props) => {\n    return <div className={style.newMessage}>\n        <div className={style.newMessage__img}>\n            <img src=\"https://icon-library.com/images/avatar-icon-images/avatar-icon-images-4.jpg\"/>\n        </div>\n        <div className={style.newMessage__content}>\n            <span>{props.message}</span>\n        </div>\n    </div>\n}","import React from \"react\";\nimport style from './names.module.css'\nimport {NavLink} from \"react-router-dom\";\n\ntype propsType = {\n    name: string,\n    path: string\n}\n\nexport const Names: React.FC<propsType> = (props) => {\n    return <>\n        <div className={style.dialogs__people_name}>\n            <NavLink to={props.path}><span>{props.name}</span></NavLink>\n        </div>\n    </>\n}","import React from \"react\";\r\nimport {ActionCreatorsType, addMessageAC, updateMessageAC} from \"../../../redux/TypesForRedux\";\r\nimport {NewMessageInput} from \"./NewMessageInput\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    newMessageValue: string | number\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    updateMessageValue: (messageValue:string) => void\r\n    addNewMessage: () => void\r\n}\r\n\r\n\r\nconst mapStateToProps = (state:stateType): mapStateToPropsType => {\r\n    return {\r\n        newMessageValue: state.dialogsPage.newMessage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch:Dispatch<ActionCreatorsType>):mapDispatchToPropsType => {\r\n    return {\r\n        updateMessageValue: (messageValue:string) => {\r\n            dispatch(updateMessageAC(messageValue))\r\n        },\r\n        addNewMessage: () => {\r\n            dispatch(addMessageAC())\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const NewMessageInputContainer = connect(mapStateToProps, mapDispatchToProps)(NewMessageInput)","import React, {RefObject} from \"react\";\r\nimport style from \"../dialogs.module.css\";\r\n\r\n\r\ntype NewMessageInputType = {\r\n    newMessageValue: string | number\r\n    updateMessageValue: (messageValue: string) => void\r\n    addNewMessage: () => void\r\n}\r\n\r\nexport const NewMessageInput: React.FC<NewMessageInputType> = (props) => {\r\n\r\n    let refTextarea: RefObject<HTMLTextAreaElement> = React.createRef()\r\n\r\n    const addNewMessage = () => {\r\n        props.addNewMessage()\r\n    }\r\n\r\n    const changeMessageValue = () => {\r\n        if (refTextarea.current) {\r\n            let newMessage = refTextarea.current.value;\r\n            props.updateMessageValue(newMessage)\r\n        }\r\n    }\r\n\r\n    return <div className={style.dialogs__messages_newMesssage}>\r\n        <div className={style.dialogs__messages_newMesssage_textarea}>\r\n                            <textarea placeholder='Enter new message...' ref={refTextarea} onChange={changeMessageValue}\r\n                                      value={props.newMessageValue}></textarea>\r\n        </div>\r\n        <div className={style.dialogs__messages_newMesssage_button}>\r\n            <button onClick={addNewMessage}>Send</button>\r\n        </div>\r\n    </div>\r\n}","import React from \"react\";\r\nimport style from './dialogs.module.css'\r\nimport {Messages} from \"./Messages/Messages\";\r\nimport {Names} from \"./Names/Names\";\r\nimport { dialogsPageType } from \"../../redux/store\";\r\nimport { ActionCreatorsType } from \"../../redux/TypesForRedux\";\r\nimport { NewMessageInputContainer } from \"./newMessageInput/NewMessageInputContainer\";\r\n\r\ntype propsType = {\r\n    dialogPage: dialogsPageType\r\n    dispatch: (action:ActionCreatorsType) => void\r\n}\r\n\r\n\r\nexport const Dialogs:React.FC<propsType> = (props) => {\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.wrapper__header}>\r\n                <div className={style.wrapper__header_left}>Messages</div>\r\n                <div className={style.wrapper__header_right}>Some name</div>\r\n            </div>\r\n            <div className={style.wrapper}>\r\n                <div className={style.dialogs__people}>\r\n                    {props.dialogPage.names.map((n) => <Names key={n.id} name={n.name} path={n.path}/>)}\r\n                </div>\r\n                <div className={style.dialogs__messages}>\r\n                    {props.dialogPage.messages.map((m) => <Messages key={m.id} message={m.message}/>)}\r\n                    <NewMessageInputContainer />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react';\r\nimport style from './news.module.css'\r\n\r\nexport const News= () => {\r\n    return (\r\n        <div className={style.content}>\r\n           News\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport style from './settings.module.css'\r\n\r\nexport const Settings= () => {\r\n    return (\r\n        <div className={style.content}>\r\n           Settings\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./users.module.css\";\r\nimport {PhotosType} from \"../../redux/redux-store\";\r\nimport { Preloader } from \"../preloader/Preloader\";\r\n\r\n\r\ntype UserItemType = {\r\n    id: number\r\n    photos: PhotosType\r\n    followed: boolean\r\n    name: string | null\r\n    status: string | null\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\n\r\nexport const UserItem:React.FC<UserItemType> = (props) => {\r\n\r\n\r\n    const follow = (userId:number) => {\r\n        props.follow(userId)\r\n    }\r\n\r\n    const unfollow = (userId:number) => {\r\n        props.unfollow(userId)\r\n    }\r\n\r\n    return <div className={s.content__item} key={props.id}>\r\n        <div className={s.content__item_leftBlock}>\r\n            <div className={s.content__item_leftBlock_img}>\r\n                <img\r\n                    src={(props.photos.small) ? props.photos.small : \"https://i.pinimg.com/originals/1d/a5/a0/1da5a0d16d1f7dd7e43b6da4b68cdf46.png\"}\r\n                    alt=\"\"/>\r\n            </div>\r\n            <div className={s.content__item_leftBlock_button}>\r\n                {(props.followed) ? <button onClick={() => unfollow(props.id)}>unfollow</button> :\r\n                    <button onClick={() => follow(props.id)}>follow</button>}\r\n            </div>\r\n        </div>\r\n        <div className={s.content__item_rightBlock}>\r\n            <div className={s.content__item_rightBlock_name}>\r\n                <span>{props.name}</span>\r\n            </div>\r\n            <div className={s.content__item_rightBlock_status}>\r\n                <span>{props.status}</span>\r\n            </div>\r\n            <div className={s.content__item_rightBlock_location}>\r\n                <span>{'some city'}</span>\r\n                <span>{'some country'}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nexport const Preloader = (props: any) => {\r\n    return <div>\r\n        <img src='https://i.pinimg.com/originals/59/22/20/5922208e18658f5e83b6ad801b895f71.gif' alt=\"\"/>\r\n    </div>\r\n}","import React from 'react';\r\nimport s from './users.module.css'\r\nimport {UserType, CommonDataType} from \"../../redux/redux-store\";\r\nimport {UserItem} from \"./UserItem\";\r\nimport axios from 'axios';\r\nimport { Preloader } from '../preloader/Preloader';\r\n\r\ntype UsersPropsType = {\r\n    follow: (userId: number) => void,\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n    setTotalUsersCount: (totalUserCount: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setIsFetching: (isFetching: boolean) => void\r\n    users: Array<UserType>\r\n    totalUsersCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n}\r\n\r\n\r\nexport class UsersAPI extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount(): void {\r\n\r\n        if (this.props.users.length === 0) {\r\n            this.props.setIsFetching(true)\r\n            axios.get<CommonDataType<UserType[]>>(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\r\n                .then(res => {\r\n                    this.props.setIsFetching(false)\r\n                    this.props.setUsers(res.data.items)\r\n                    this.props.setTotalUsersCount(res.data.totalCount)\r\n                })\r\n        }\r\n    }\r\n\r\n    setCurrentPage = (p: number) => {\r\n        this.props.setCurrentPage(p)\r\n        this.props.setIsFetching(true)\r\n        axios.get<CommonDataType<UserType[]>>(`https://social-network.samuraijs.com/api/1.0/users?page=${p}&count=${this.props.pageSize}`)\r\n            .then(res => {\r\n                this.props.setIsFetching(false)\r\n                this.props.setUsers(res.data.items)\r\n                this.props.setIsFetching(false)\r\n\r\n            })\r\n    }\r\n\r\n\r\n    render(): React.ReactNode {\r\n\r\n        //pagination\r\n        let pageCount = Math.ceil(this.props.totalUsersCount / this.props.pageSize)\r\n        let arrPageCount = [];\r\n\r\n\r\n        for (let i = 1; pageCount >= i; i++) {\r\n            arrPageCount.push(i)\r\n        }\r\n        // ---- pagination ----\r\n\r\n        return (\r\n            <div className={s.content__wrapper}>\r\n                {this.props.isFetching && <Preloader/>}\r\n                {/*pagination*/}\r\n                {\r\n                    arrPageCount.map(p => {\r\n                        return <span key={p}\r\n                                     className={(this.props.currentPage === p) ? `${s.page} ${s.active_page}` : `${s.page}`}\r\n                                     onClick={() => this.setCurrentPage(p)}> {p} </span>\r\n                    })\r\n                }\r\n                {/*-----pagination-----*/}\r\n                {\r\n                    this.props.users.map(u => {\r\n\r\n                        const unfollow = (userId: number) => this.props.unfollow(userId)\r\n                        const follow = (userId: number) => this.props.follow(userId)\r\n\r\n                        return <UserItem key={u.id}\r\n                                         id={u.id}\r\n                                         status={u.status}\r\n                                         photos={u.photos}\r\n                                         followed={u.followed}\r\n                                         unfollow={unfollow}\r\n                                         follow={follow}\r\n                                         name={u.name}/>\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {UsersAPI} from \"./UsersAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {\r\n    ActionCreatorsType,\r\n    followToUserAC,\r\n    unfollowToUserAC,\r\n    setUsersAC,\r\n    setTotalUsersCountAC, setCurrentPageAC, setIsFetchingAC\r\n} from \"../../redux/TypesForRedux\";\r\nimport {stateType, UserType} from \"../../redux/redux-store\";\r\n\r\ntype mapStateToPropsType = {\r\n    users: Array<UserType>\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    follow: (userId: number) => void,\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n    setTotalUsersCount: (totalUsersCount: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setIsFetching: (isFetching: boolean) => void\r\n}\r\n\r\nconst mapStateToProps = (state: stateType): mapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        pageSize: state.usersPage.pageSize,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<ActionCreatorsType>): mapDispatchToPropsType => {\r\n    return {\r\n        follow: (userId) => {\r\n            dispatch(followToUserAC(userId))\r\n        },\r\n        unfollow: (userId) => {\r\n            dispatch(unfollowToUserAC(userId))\r\n        },\r\n        setUsers: (users) => {\r\n            dispatch(setUsersAC(users))\r\n        },\r\n        setTotalUsersCount: (totalUsersCount) => {\r\n            dispatch(setTotalUsersCountAC(totalUsersCount))\r\n        },\r\n        setCurrentPage: (currentPage) => {\r\n            dispatch(setCurrentPageAC(currentPage))\r\n        },\r\n        setIsFetching: (isFetching) => {\r\n            dispatch(setIsFetchingAC(isFetching))\r\n        }\r\n    }\r\n}\r\n\r\nexport const UsersContainer = connect(mapStateToProps, mapDispatchToProps)(UsersAPI)","import React from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport './App.css'\r\nimport {Header} from './Components/header/Header';\r\nimport {Nav} from './Components/nav/Nav';\r\nimport {Profile} from './Components/profile/Profile';\r\nimport {Dialogs} from \"./Components/dialogs/Dialogs\";\r\nimport {News} from \"./Components/news/News\";\r\nimport { Settings } from './Components/settings/Settings';\r\nimport {stateType} from './redux/store';\r\nimport {ActionCreatorsType} from \"./redux/TypesForRedux\";\r\nimport { UsersContainer } from './Components/users/UsersContainer';\r\n\r\ntype propsType = {\r\n    state: stateType\r\n    dispatch: (action:ActionCreatorsType) => void\r\n}\r\n\r\nconst App:React.FC<propsType> = (props) => {\r\n    return (\r\n        <div className={'app__wrapper'}>\r\n            <Header/>\r\n            <Nav navPage={props.state.navPage} />\r\n            <div className=\"app__wrapper_content\">\r\n                <Route path={'/profile'} render={() => <Profile profilePage={props.state.profilePage}/>}/>\r\n                <Route path={'/dialogs'} render={() => <Dialogs dialogPage={props.state.dialogsPage}\r\n                                                                dispatch={props.dispatch}/>}/>\r\n                <Route path={'/users'}  render={() => <UsersContainer />}/>\r\n                <Route path={'/news'}  render={() => <News />}/>\r\n                <Route path={'/settings'} render={() => <Settings />}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n","import {dialogsPageType} from \"../store\"\r\nimport {ActionCreatorsType} from \"../TypesForRedux\";\r\n\r\nenum typeOfActionDispatch {\r\n    UPDATE_MESSAGE = \"UPDATE_MESSAGE\",\r\n    ADD_MESSAGE = \"ADD_MESSAGE\",\r\n}\r\n\r\nexport type dialogsPageReducerType = (state: dialogsPageType, action: ActionCreatorsType) => dialogsPageType\r\n\r\nconst initialState:dialogsPageType = {\r\n    names: [\r\n        {id: 1, name: 'Marat', path: '/dialogs/1'},\r\n        {id: 2, name: 'Anton', path: '/dialogs/2'},\r\n        {id: 3, name: 'Arkasha', path: '/dialogs/3'},\r\n        {id: 4, name: 'Tolik', path: '/dialogs/4'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hey man!'},\r\n        {id: 2, message: 'How is it going?'},\r\n        {id: 3, message: 'You forgot about my birthday(('},\r\n        {id: 4, message: 'I want to break up with you, sorry'}\r\n    ],\r\n    newMessage: ''\r\n}\r\n\r\nexport const dialogsPageReducer: dialogsPageReducerType = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.ADD_MESSAGE:\r\n            let newMessageValue = state.newMessage\r\n            let newMessage = {id: 5, message:newMessageValue}\r\n\r\n            state = {...state, messages: [...state.messages, newMessage]}\r\n            state.newMessage = '';\r\n            return state;\r\n        case typeOfActionDispatch.UPDATE_MESSAGE:\r\n            state = {...state}\r\n            state.newMessage = action.newMessageValue;\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}","import {navPageType} from \"../store\"\r\nimport {ActionCreatorsType} from \"../TypesForRedux\";\r\n\r\n\r\nexport type navPageReducerType = (state: navPageType, action: ActionCreatorsType) => navPageType\r\n\r\nconst initialState:navPageType = {\r\n    navTitles: [\r\n        {id: 1, title: 'Profile', path: '/profile'},\r\n        {id: 2, title: 'Dialogs', path: '/dialogs'},\r\n        {id: 3, title: 'Users', path: '/users'},\r\n        {id: 4, title: 'News', path: '/news'},\r\n        {id: 5, title: 'Settings', path: '/settings'}\r\n    ],\r\n    friends: [\r\n        {id: 1, name: 'Marat', pathToDialog: '/dialogs/1', isOnline: true},\r\n        {id: 2, name: 'Anton', pathToDialog: '/dialogs/2', isOnline: false},\r\n        {id: 3, name: 'Arkasha', pathToDialog: '/dialogs/3', isOnline: true},\r\n        {id: 4, name: 'Tolik', pathToDialog: '/dialogs/4', isOnline: false}\r\n    ]\r\n}\r\n\r\nexport const navPageReducer: navPageReducerType = (state = initialState, action) => {\r\n    return state\r\n}","import {ActionCreatorsType, typeOfActionDispatch} from \"../TypesForRedux\";\r\nimport {UsersStateType} from \"../redux-store\";\r\n\r\n\r\n//typization for reducer\r\ntype usersReducerType = (state: UsersStateType, action: ActionCreatorsType) => UsersStateType\r\n\r\n\r\nconst initialUsersState: UsersStateType = {\r\n    users: [],\r\n    totalUsersCount: 0,\r\n    pageSize: 100,\r\n    currentPage: 1,\r\n    isFetching: true\r\n}\r\n\r\nexport const usersReducer: usersReducerType = (state = initialUsersState, action): UsersStateType => {\r\n\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.FOLLOW_TO_USER:\r\n            return {...state, users: state.users.map(u => (u.id === action.userId) ? {...u, isFollowed: true} : u)}\r\n\r\n        case typeOfActionDispatch.UNFOLLOW_TO_USER:\r\n            return {...state, users: state.users.map(u => (u.id === action.userId) ? {...u, isFollowed: false} : u)}\r\n\r\n        case typeOfActionDispatch.SET_USERS:\r\n            return {...state, users: [...action.users]}\r\n\r\n        case typeOfActionDispatch.SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n\r\n        case typeOfActionDispatch.SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case typeOfActionDispatch.SET_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {profilePageReducer} from \"./reducers/profilePage-reducer\";\r\nimport {dialogsPageReducer} from \"./reducers/dialogsPage-reducer\";\r\nimport {navPageReducer} from \"./reducers/navPage-reducer\";\r\nimport {usersReducer} from \"./reducers/usersPage-reducer\";\r\n\r\nexport type PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\nexport type dialogsNamesType = {\r\n    id: number,\r\n    name: string,\r\n    path: string\r\n}\r\nexport type dialogsMessagesType = {\r\n    id: number,\r\n    message: string | number\r\n}\r\nexport type profilePostsType = {\r\n    id: number,\r\n    message: string | number\r\n}\r\nexport type navTitlesType = {\r\n    id: number,\r\n    title: string,\r\n    path: string\r\n}\r\nexport type FriendsNavType = {\r\n    id: number\r\n    name: string\r\n    pathToDialog: string\r\n    isOnline: boolean\r\n}\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string | null\r\n    photos: PhotosType\r\n    status: string | null\r\n    followed: boolean\r\n}\r\n\r\nexport type CommonDataType<T> = {\r\n    error: string | null\r\n    items: T\r\n    totalCount: number\r\n}\r\n\r\nexport type profilePageType = {\r\n    posts: Array<profilePostsType>\r\n    newPost: string | number\r\n}\r\nexport type dialogsPageType = {\r\n    names: Array<dialogsNamesType>\r\n    messages: Array<dialogsMessagesType>\r\n    newMessage: number | string\r\n}\r\nexport type navPageType = {\r\n    navTitles: Array<navTitlesType>\r\n    friends: Array<FriendsNavType>\r\n}\r\nexport type UsersStateType = {\r\n    users: Array<UserType>\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n}\r\n\r\nexport type stateType = {\r\n    profilePage: profilePageType\r\n    dialogsPage: dialogsPageType\r\n    navPage: navPageType\r\n    usersPage: UsersStateType\r\n}\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profilePageReducer,\r\n    dialogsPage: dialogsPageReducer,\r\n    navPage: navPageReducer,\r\n    usersPage: usersReducer\r\n});\r\n\r\n\r\nexport let store = createStore(reducers)","import React from 'react';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport ReactDOM from \"react-dom\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport {stateType} from \"./redux/store\";\r\nimport {store} from \"./redux/redux-store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nexport type renderAppTreeType = (state: stateType) => void\r\n\r\n\r\nexport const renderAppTree: renderAppTreeType = (state: stateType) => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <HashRouter>\r\n                <Provider store={store}>\r\n                    <App state={state}\r\n                         dispatch={store.dispatch.bind(store)}/>\r\n                </Provider>\r\n            </HashRouter>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nrenderAppTree(store.getState());\r\n\r\nstore.subscribe(() => renderAppTree(store.getState()))\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}