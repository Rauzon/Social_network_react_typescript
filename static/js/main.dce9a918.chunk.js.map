{"version":3,"sources":["Components/profile/profileInfo/profileInfo.module.css","Components/nav/friendsBlock/friendsBlock.module.css","Components/header/header.module.css","Components/nav/nav.module.css","Components/dialogs/Messages/messages.module.css","Components/profile/myPosts/myPost/myPost.module.css","Components/profile/myPosts/newPost/newPost.module.css","Components/users/users.module.css","images/logo.png","Components/nav/sideBar/sideBar.module.css","Components/dialogs/Names/names.module.css","Components/news/news.module.css","Components/settings/settings.module.css","Components/profile/profile.module.css","Components/profile/myPosts/myPosts.module.css","Components/dialogs/dialogs.module.css","serviceWorker.ts","redux/TypesForRedux.ts","Components/header/Header.tsx","Components/nav/sideBar/SidebarTitle.tsx","Components/nav/friendsBlock/FriendsBlock.tsx","Components/nav/Nav.tsx","Components/dialogs/Messages/Messages.tsx","Components/dialogs/Names/Names.tsx","redux/reducers/dialogsPage-reducer.ts","Components/dialogs/newMessageInput/NewMessageInputContainer.tsx","Components/dialogs/newMessageInput/NewMessageInput.tsx","Components/dialogs/Dialogs.tsx","Components/news/News.tsx","Components/settings/Settings.tsx","Components/users/UserItem.tsx","Components/preloader/Preloader.tsx","Components/users/UsersAPI.tsx","Components/users/UsersContainer.tsx","Components/profile/myPosts/myPost/MyPost.tsx","Components/profile/myPosts/newPost/NewPostContainer.tsx","Components/profile/myPosts/newPost/NewPost.tsx","Components/profile/myPosts/myPosts.tsx","Components/profile/profileInfo/ProfileInfo.tsx","Components/profile/Profile.tsx","Components/profile/ProfileContainer.tsx","App.tsx","redux/reducers/profilePage-reducer.ts","redux/reducers/navPage-reducer.ts","redux/reducers/usersPage-reducer.ts","redux/redux-store.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","typeOfActionDispatch","Header","props","className","style","header","header__wrapper","header__wrapper_img","src","logo","alt","SidebarTitle","nav__wrap_menu","to","path","title","FriendsBlock","friends","map","f","key","id","nav__friendsBlock_item","nav__friendsBlock_item_img","nav__friendsBlock_item_name","pathToDialog","name","isOnline","nav__friendsBlock_item_onlineStatus","Nav","nav","navPage","navTitles","t","nav__friendsBlock","nav__friendsBlock_title","Messages","newMessage","newMessage__img","newMessage__content","message","Names","dialogs__people_name","setIsFetching","isFetching","type","SET_IS_FETCHING","NewMessageInputContainer","connect","state","newMessageValue","dialogsPage","addMessage","ADD_MESSAGE","updateMessage","UPDATE_MESSAGE","refTextarea","React","createRef","dialogs__messages_newMesssage","dialogs__messages_newMesssage_textarea","placeholder","ref","onChange","current","value","dialogs__messages_newMesssage_button","onClick","Dialogs","dialogs","wrapper__header","wrapper__header_left","wrapper__header_right","wrapper","dialogs__people","dialogPage","names","n","dialogs__messages","messages","m","News","content","Settings","UserItem","s","content__item","content__item_leftBlock","content__item_leftBlock_img","photos","small","content__item_leftBlock_button","followed","userId","unfollow","follow","content__item_rightBlock","content__item_rightBlock_name","content__item_rightBlock_status","status","content__item_rightBlock_location","Preloader","UsersAPI","setCurrentPage","p","axios","get","pageSize","then","res","setUsers","data","items","this","users","length","currentPage","setTotalUsersCount","totalCount","pageCount","Math","ceil","totalUsersCount","arrPageCount","i","push","content__wrapper","page","active_page","u","Component","UsersContainer","usersPage","FOLLOW_TO_USER","UNFOLLOW_TO_USER","SET_USERS","SET_TOTAL_USERS_COUNT","SET_CURRENT_PAGE","MyPost","content__img","content__text","NewPostContainer","newPost","profilePage","addPost","ADD_POST","updatePost","newPostValue","UPDATE_POST","refPost","content__textArea","content__button","MyPosts","posts","ProfileInfo","content__avatar","userProfile","large","content__description","content__description_fullName","fullName","content__description_aboutMe","aboutMe","content__description_contacts","content__description_searchJob","lookingForAJob","content__description_desriptionOfJob","lookingForAJobDescription","Profile","ProfileContainer","params","setUserProfile","ProfileContainerWithURL","withRouter","SET_USER_PROFILE","App","render","dispatch","initialState","initialUsersState","reducers","combineReducers","action","isFollowed","store","createStore","renderAppTree","ReactDOM","StrictMode","bind","document","getElementById","getState","subscribe","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.dce9a918.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"profileInfo_content__1NgHR\",\"content__avatar\":\"profileInfo_content__avatar__JkGN5\",\"content__description\":\"profileInfo_content__description__2dMvU\",\"content__description_aboutMe\":\"profileInfo_content__description_aboutMe__21nxh\",\"content__description_contacts\":\"profileInfo_content__description_contacts__1kNa-\",\"content__description_fullName\":\"profileInfo_content__description_fullName__3yYXC\",\"content__description_searchJob\":\"profileInfo_content__description_searchJob__1LMz1\",\"content__description_desriptionOfJob\":\"profileInfo_content__description_desriptionOfJob__2lpvY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav__friendsBlock_item\":\"friendsBlock_nav__friendsBlock_item__22hEe\",\"nav__friendsBlock_item_img\":\"friendsBlock_nav__friendsBlock_item_img__fQY5A\",\"nav__friendsBlock_item_name\":\"friendsBlock_nav__friendsBlock_item_name__1TGRU\",\"nav__friendsBlock_item_onlineStatus\":\"friendsBlock_nav__friendsBlock_item_onlineStatus__QYJgV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__28bqR\",\"header__wrapper_img\":\"header_header__wrapper_img__3B4XV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"nav_nav__32Dtx\",\"nav__friendsBlock_title\":\"nav_nav__friendsBlock_title__OPYtZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newMessage\":\"messages_newMessage__H-XRi\",\"newMessage__img\":\"messages_newMessage__img__2RyBM\",\"newMessage__content\":\"messages_newMessage__content__g6ttP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"myPost_content__1RSxM\",\"content__img\":\"myPost_content__img__ab0v1\",\"content__text\":\"myPost_content__text__2GZxT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"newPost_content__2nJOh\",\"content__textArea\":\"newPost_content__textArea__2sjje\",\"content__button\":\"newPost_content__button__3yZ3B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content__wrapper\":\"users_content__wrapper__I5n30\",\"content__item\":\"users_content__item__2Yyhu\",\"content__item_leftBlock\":\"users_content__item_leftBlock__3793k\",\"content__item_leftBlock_img\":\"users_content__item_leftBlock_img__3fPq6\",\"content__item_leftBlock_button\":\"users_content__item_leftBlock_button__1WpN3\",\"content__item_rightBlock\":\"users_content__item_rightBlock__3jFNO\",\"content__item_rightBlock_name\":\"users_content__item_rightBlock_name__3bU9i\",\"content__item_rightBlock_status\":\"users_content__item_rightBlock_status__10t-K\",\"content__item_rightBlock_location\":\"users_content__item_rightBlock_location__3hyxM\",\"page\":\"users_page__3334I\",\"active_page\":\"users_active_page__aZlPL\"};","module.exports = __webpack_public_path__ + \"static/media/logo.d243bdd9.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav__wrap_menu\":\"sideBar_nav__wrap_menu__39L7R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs__people_name\":\"names_dialogs__people_name__RNTJh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"news_content__kswPX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"settings_content__3LtiA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"profile_content__1q3D6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"myPosts_posts__2csMZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__1LacB\",\"wrapper\":\"dialogs_wrapper__GqQdl\",\"wrapper__header\":\"dialogs_wrapper__header__2SJHX\",\"wrapper__header_left\":\"dialogs_wrapper__header_left__2Dara\",\"wrapper__header_right\":\"dialogs_wrapper__header_right__383cx\",\"dialogs__people\":\"dialogs_dialogs__people__1uaFk\",\"dialogs__messages\":\"dialogs_dialogs__messages__1tidq\",\"dialogs__messages_newMesssage\":\"dialogs_dialogs__messages_newMesssage__b5FW8\",\"dialogs__messages_newMesssage_textarea\":\"dialogs_dialogs__messages_newMesssage_textarea__1fPCD\",\"dialogs__messages_newMesssage_button\":\"dialogs_dialogs__messages_newMesssage_button__1mrcq\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached profile has been fetched,\n              // but the previous service worker will still serve the older\n              // profile until all client tabs are closed.\n              console.log(\n                'New profile is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Profile is cached for offline use.\" message.\n              console.log('Profile is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('profile-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {CommonDataProfileType, UserType} from \"./redux-store\";\r\n\r\nexport enum typeOfActionDispatch {\r\n    ADD_MESSAGE = \"ADD_MESSAGE\",\r\n    ADD_POST = \"ADD_POST\",\r\n    UPDATE_MESSAGE = \"UPDATE_MESSAGE\",\r\n    UPDATE_POST = \"UPDATE_POST\",\r\n    FOLLOW_TO_USER = \"FOLLOW_TO_USER\",\r\n    UNFOLLOW_TO_USER = \"UNFOLLOW_TO_USER\",\r\n    SET_USERS = \"SET_USERS\",\r\n    SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\",\r\n    SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\",\r\n    SET_IS_FETCHING = \"SET_IS_FETCHING\",\r\n    SET_USER_PROFILE = \"SET_USER_PROFILE\",\r\n}\r\n\r\nexport type ActionCreatorsType = ReturnType<typeof updatePost> |\r\n    ReturnType<typeof addPost> |\r\n    ReturnType<typeof updateMessage> |\r\n    ReturnType<typeof addMessage> |\r\n    ReturnType<typeof follow> |\r\n    ReturnType<typeof unfollow> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setTotalUsersCount> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setIsFetching> |\r\n    ReturnType<typeof setUserProfile>\r\n\r\n//actionCreators\r\nexport const updatePost =(newPostValue: string) => {\r\n    return {\r\n        type: typeOfActionDispatch.UPDATE_POST,\r\n        newPostValue\r\n    } as const\r\n};\r\nexport const addPost =() =>{\r\n    return {\r\n        type: typeOfActionDispatch.ADD_POST\r\n    } as const\r\n};\r\nexport const updateMessage = (newMessageValue: string) => {\r\n    return (\r\n        {type: typeOfActionDispatch.UPDATE_MESSAGE, newMessageValue}\r\n    ) as const\r\n};\r\nexport const addMessage = () => {\r\n    return (\r\n        {type: typeOfActionDispatch.ADD_MESSAGE}\r\n    ) as const\r\n};\r\nexport const follow = (userId:number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.FOLLOW_TO_USER, userId}\r\n    ) as const\r\n};\r\nexport const unfollow = (userId: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.UNFOLLOW_TO_USER, userId}\r\n    ) as const\r\n};\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_USERS, users}\r\n    ) as const\r\n};\r\nexport const setTotalUsersCount = (totalUsersCount: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_TOTAL_USERS_COUNT, totalUsersCount}\r\n    ) as const\r\n};\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_CURRENT_PAGE, currentPage}\r\n    ) as const\r\n};\r\nexport const setIsFetching = (isFetching: boolean) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_IS_FETCHING, isFetching}\r\n    ) as const\r\n};\r\nexport const setUserProfile = (userProfile: CommonDataProfileType) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_USER_PROFILE, userProfile}\r\n    ) as const\r\n};\r\n","import React from 'react';\r\nimport style from './header.module.css'\r\nimport logo from '../../images/logo.png'\r\n\r\nexport const Header: React.FC = (props: any) => {\r\n\r\n    return (\r\n        <div className={style.header}>\r\n            <div className={style.header__wrapper}>\r\n                <div className={style.header__wrapper_img}>\r\n                    <img src={logo} alt=\"logo\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React from \"react\";\r\nimport style from './sideBar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    path: string,\r\n    title: string\r\n}\r\n\r\nexport const SidebarTitle: React.FC<PropsType> = (props) => {\r\n    return <>\r\n        <div className={style.nav__wrap_menu}>\r\n            <NavLink to={props.path}>\r\n                <li>{props.title}</li>\r\n            </NavLink>\r\n        </div>\r\n    </>\r\n}","import React from \"react\";\r\nimport style from './friendsBlock.module.css';\r\nimport {FriendsNavType} from \"../../../redux/store\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    friends: FriendsNavType[]\r\n}\r\n\r\nexport const FriendsBlock: React.FC<PropsType> = (props) => {\r\n\r\n    return <>\r\n        {props.friends.map(f => <div key={f.id} className={style.nav__friendsBlock_item}>\r\n                <div className={style.nav__friendsBlock_item_img}>\r\n                    <img src=\"https://icon-library.com/images/avatar-icon-images/avatar-icon-images-4.jpg\" alt=\"\"/>\r\n                </div>\r\n                <div className={style.nav__friendsBlock_item_name}>\r\n                    <NavLink to={f.pathToDialog}>{f.name}</NavLink>\r\n                </div>\r\n                {f.isOnline && <div className={style.nav__friendsBlock_item_onlineStatus}></div>}\r\n            </div>\r\n        )}\r\n    </>\r\n}","import React from \"react\";\r\nimport style from './nav.module.css';\r\nimport { SidebarTitle } from \"./sideBar/SidebarTitle\";\r\nimport {FriendsBlock} from \"./friendsBlock/FriendsBlock\";\r\nimport {navPageType} from \"../../redux/store\";\r\n\r\ntype propsType = {\r\n    navPage: navPageType\r\n}\r\n\r\nexport const Nav:React.FC<propsType> = (props) => {\r\n    return <div className={style.nav}>\r\n        {props.navPage.navTitles.map((t) => <SidebarTitle key={t.id} title={t.title} path={t.path}/>)}\r\n        <div className={style.nav__friendsBlock}>\r\n            <div className={style.nav__friendsBlock_title}>\r\n                <h4>Friends:</h4>\r\n            </div>\r\n            <FriendsBlock friends={props.navPage.friends}/>\r\n        </div>\r\n    </div>\r\n}","import React from \"react\";\nimport style from './messages.module.css'\n\ntype propsType = {\n    message: string | number\n}\n\nexport const Messages: React.FC<propsType> = (props) => {\n    return <div className={style.newMessage}>\n        <div className={style.newMessage__img}>\n            <img src=\"https://icon-library.com/images/avatar-icon-images/avatar-icon-images-4.jpg\"/>\n        </div>\n        <div className={style.newMessage__content}>\n            <span>{props.message}</span>\n        </div>\n    </div>\n}","import React from \"react\";\nimport style from './names.module.css'\nimport {NavLink} from \"react-router-dom\";\n\ntype propsType = {\n    name: string,\n    path: string\n}\n\nexport const Names: React.FC<propsType> = (props) => {\n    return <>\n        <div className={style.dialogs__people_name}>\n            <NavLink to={props.path}><span>{props.name}</span></NavLink>\n        </div>\n    </>\n}","import {ActionCreatorsType} from \"../TypesForRedux\";\r\nimport {dialogsPageType} from \"../redux-store\";\r\n\r\nenum typeOfActionDispatch {\r\n    UPDATE_MESSAGE = \"UPDATE_MESSAGE\",\r\n    ADD_MESSAGE = \"ADD_MESSAGE\",\r\n}\r\n\r\nexport type dialogsPageReducerType = (state: dialogsPageType, action: ActionCreatorsType) => dialogsPageType\r\n\r\nconst initialState:dialogsPageType = {\r\n    names: [\r\n        {id: 1, name: 'Marat', path: '/dialogs/1'},\r\n        {id: 2, name: 'Anton', path: '/dialogs/2'},\r\n        {id: 3, name: 'Arkasha', path: '/dialogs/3'},\r\n        {id: 4, name: 'Tolik', path: '/dialogs/4'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hey man!'},\r\n        {id: 2, message: 'How is it going?'},\r\n        {id: 3, message: 'You forgot about my birthday(('},\r\n        {id: 4, message: 'I want to break up with you, sorry'}\r\n    ],\r\n    newMessage: ''\r\n}\r\n\r\nexport const dialogsPageReducer: dialogsPageReducerType = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.ADD_MESSAGE:\r\n            let newMessageValue = state.newMessage\r\n            let newMessage = {id: 5, message:newMessageValue}\r\n\r\n            state = {...state, messages: [...state.messages, newMessage]}\r\n            state.newMessage = '';\r\n            return state;\r\n        case typeOfActionDispatch.UPDATE_MESSAGE:\r\n            state = {...state}\r\n            state.newMessage = action.newMessageValue;\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}","import React from \"react\";\r\nimport {addMessage, updateMessage} from \"../../../redux/TypesForRedux\";\r\nimport {NewMessageInput} from \"./NewMessageInput\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../../redux/redux-store\";\r\n\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    newMessageValue: string | number\r\n}\r\n\r\nconst mapStateToProps = (state:stateType): mapStateToPropsType => {\r\n    return {\r\n        newMessageValue: state.dialogsPage.newMessage\r\n    }\r\n}\r\n\r\nexport const NewMessageInputContainer = connect(mapStateToProps, {addMessage, updateMessage})(NewMessageInput)","import React, {RefObject} from \"react\";\r\nimport style from \"../dialogs.module.css\";\r\n\r\n\r\ntype NewMessageInputType = {\r\n    newMessageValue: string | number\r\n    updateMessage: (messageValue: string) => void\r\n    addMessage: () => void\r\n}\r\n\r\nexport const NewMessageInput: React.FC<NewMessageInputType> = (props) => {\r\n\r\n    let refTextarea: RefObject<HTMLTextAreaElement> = React.createRef()\r\n\r\n    const addNewMessage = () => {\r\n        props.addMessage()\r\n    }\r\n\r\n    const changeMessageValue = () => {\r\n        if (refTextarea.current) {\r\n            let newMessage = refTextarea.current.value;\r\n            props.updateMessage(newMessage)\r\n        }\r\n    }\r\n\r\n    return <div className={style.dialogs__messages_newMesssage}>\r\n        <div className={style.dialogs__messages_newMesssage_textarea}>\r\n                            <textarea placeholder='Enter new message...' ref={refTextarea} onChange={changeMessageValue}\r\n                                      value={props.newMessageValue}></textarea>\r\n        </div>\r\n        <div className={style.dialogs__messages_newMesssage_button}>\r\n            <button onClick={addNewMessage}>Send</button>\r\n        </div>\r\n    </div>\r\n}","import React from \"react\";\r\nimport style from './dialogs.module.css'\r\nimport {Messages} from \"./Messages/Messages\";\r\nimport {Names} from \"./Names/Names\";\r\nimport { dialogsPageType } from \"../../redux/store\";\r\nimport { ActionCreatorsType } from \"../../redux/TypesForRedux\";\r\nimport { NewMessageInputContainer } from \"./newMessageInput/NewMessageInputContainer\";\r\n\r\n\r\ntype propsType = {\r\n    dialogPage: dialogsPageType\r\n    dispatch: (action:ActionCreatorsType) => void\r\n}\r\n\r\n\r\nexport const Dialogs:React.FC<propsType> = (props) => {\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.wrapper__header}>\r\n                <div className={style.wrapper__header_left}>Messages</div>\r\n                <div className={style.wrapper__header_right}>Some name</div>\r\n            </div>\r\n            <div className={style.wrapper}>\r\n                <div className={style.dialogs__people}>\r\n                    {props.dialogPage.names.map((n) => <Names key={n.id} name={n.name} path={n.path}/>)}\r\n                </div>\r\n                <div className={style.dialogs__messages}>\r\n                    {props.dialogPage.messages.map((m) => <Messages key={m.id} message={m.message}/>)}\r\n                    <NewMessageInputContainer />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react';\r\nimport style from './news.module.css'\r\n\r\nexport const News= () => {\r\n    return (\r\n        <div className={style.content}>\r\n           News\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport style from './settings.module.css'\r\n\r\nexport const Settings= () => {\r\n    return (\r\n        <div className={style.content}>\r\n           Settings\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./users.module.css\";\r\nimport {PhotosType} from \"../../redux/redux-store\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype UserItemType = {\r\n    id: number\r\n    photos: PhotosType\r\n    followed: boolean\r\n    name: string | null\r\n    status: string | null\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\n\r\nexport const UserItem: React.FC<UserItemType> = (props) => {\r\n\r\n\r\n    const follow = (userId: number) => {\r\n        props.follow(userId)\r\n    }\r\n\r\n    const unfollow = (userId: number) => {\r\n        props.unfollow(userId)\r\n    }\r\n\r\n    return <div className={s.content__item} key={props.id}>\r\n        <div className={s.content__item_leftBlock}>\r\n            <div className={s.content__item_leftBlock_img}>\r\n                <NavLink to={'/profile/' + props.id}>\r\n                    <img\r\n                        src={(props.photos.small) ? props.photos.small : \"https://i.pinimg.com/originals/1d/a5/a0/1da5a0d16d1f7dd7e43b6da4b68cdf46.png\"}\r\n                        alt=\"\"/>\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.content__item_leftBlock_button}>\r\n                {(props.followed) ? <button onClick={() => unfollow(props.id)}>unfollow</button> :\r\n                    <button onClick={() => follow(props.id)}>follow</button>}\r\n            </div>\r\n        </div>\r\n        <div className={s.content__item_rightBlock}>\r\n            <div className={s.content__item_rightBlock_name}>\r\n                <span>{props.name}</span>\r\n            </div>\r\n            <div className={s.content__item_rightBlock_status}>\r\n                <span>{props.status}</span>\r\n            </div>\r\n            <div className={s.content__item_rightBlock_location}>\r\n                <span>{'some city'}</span>\r\n                <span>{'some country'}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nexport const Preloader = (props: any) => {\r\n    return <div>\r\n        <img src='https://i.pinimg.com/originals/59/22/20/5922208e18658f5e83b6ad801b895f71.gif' alt=\"\"/>\r\n    </div>\r\n}","import React from 'react';\r\nimport s from './users.module.css'\r\nimport {UserType, CommonDataUsersType} from \"../../redux/redux-store\";\r\nimport {UserItem} from \"./UserItem\";\r\nimport axios from 'axios';\r\nimport { Preloader } from '../preloader/Preloader';\r\n\r\ntype UsersPropsType = {\r\n    follow: (userId: number) => void,\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n    setTotalUsersCount: (totalUserCount: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setIsFetching: (isFetching: boolean) => void\r\n    users: Array<UserType>\r\n    totalUsersCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n}\r\n\r\n\r\nexport class  UsersAPI extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount(): void {\r\n\r\n        if (this.props.users.length === 0) {\r\n            this.props.setIsFetching(true)\r\n            axios.get<CommonDataUsersType<UserType[]>>(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\r\n                .then(res => {\r\n                    this.props.setIsFetching(false)\r\n                    this.props.setUsers(res.data.items)\r\n                    this.props.setTotalUsersCount(res.data.totalCount)\r\n                })\r\n        }\r\n    }\r\n\r\n    setCurrentPage = (p: number) => {\r\n        this.props.setCurrentPage(p)\r\n        this.props.setIsFetching(true)\r\n        axios.get<CommonDataUsersType<UserType[]>>(`https://social-network.samuraijs.com/api/1.0/users?page=${p}&count=${this.props.pageSize}`)\r\n            .then(res => {\r\n                this.props.setIsFetching(false)\r\n                this.props.setUsers(res.data.items)\r\n                this.props.setIsFetching(false)\r\n\r\n            })\r\n    }\r\n\r\n\r\n    render(): React.ReactNode {\r\n\r\n        //pagination\r\n        let pageCount = Math.ceil(this.props.totalUsersCount / this.props.pageSize)\r\n        let arrPageCount = [];\r\n\r\n\r\n        for (let i = 1; pageCount >= i; i++) {\r\n            arrPageCount.push(i)\r\n        }\r\n        // ---- pagination ----\r\n\r\n        return (\r\n            <div className={s.content__wrapper}>\r\n                {this.props.isFetching && <Preloader/>}\r\n                {/*pagination*/}\r\n                {\r\n                    arrPageCount.map(p => {\r\n                        return <span key={p}\r\n                                     className={(this.props.currentPage === p) ? `${s.page} ${s.active_page}` : `${s.page}`}\r\n                                     onClick={() => this.setCurrentPage(p)}> {p} </span>\r\n                    })\r\n                }\r\n                {/*-----pagination-----*/}\r\n                {\r\n                    this.props.users.map(u => {\r\n\r\n                        const unfollow = (userId: number) => this.props.unfollow(userId)\r\n                        const follow = (userId: number) => this.props.follow(userId)\r\n\r\n                        return <UserItem key={u.id}\r\n                                         id={u.id}\r\n                                         status={u.status}\r\n                                         photos={u.photos}\r\n                                         followed={u.followed}\r\n                                         unfollow={unfollow}\r\n                                         follow={follow}\r\n                                         name={u.name}/>\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {UsersAPI} from \"./UsersAPI\";\r\nimport {\r\n    follow,\r\n    unfollow,\r\n    setUsers,\r\n    setTotalUsersCount, setCurrentPage, setIsFetching\r\n} from \"../../redux/TypesForRedux\";\r\nimport {stateType, UserType} from \"../../redux/redux-store\";\r\n\r\ntype mapStateToPropsType = {\r\n    users: Array<UserType>\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: stateType): mapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        pageSize: state.usersPage.pageSize,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n    }\r\n}\r\n\r\nexport const UsersContainer = connect(mapStateToProps, {\r\n    follow,\r\n    unfollow,\r\n    setUsers,\r\n    setTotalUsersCount,\r\n    setCurrentPage,\r\n    setIsFetching,\r\n})(UsersAPI)","import React from 'react';\r\nimport style from './myPost.module.css'\r\n\r\ntype propsType = {\r\n    message: string | number\r\n}\r\n\r\n\r\nexport const MyPost: React.FC<propsType> = (props) => {\r\n    return (\r\n        <div className={style.content}>\r\n            <div className={style.content__img}>\r\n                <img src={'https://tr.rbxcdn.com/47055e576c5566fb6b384a8fccf98c64/420/420/Decal/Png'} alt=\"\"/>\r\n            </div>\r\n            <div className={style.content__text}>\r\n                <span>{props.message}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react';\r\nimport {addPost, updatePost} from \"../../../../redux/TypesForRedux\";\r\nimport {NewPost} from \"./NewPost\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../../../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    newPost: string | number\r\n}\r\n\r\nconst mapStateToProps = (state: stateType):MapStateToPropsType => {\r\n\r\n    return {\r\n        newPost: state.profilePage.newPost\r\n    }\r\n}\r\n\r\nexport const NewPostContainer = connect(mapStateToProps, {addPost, updatePost})(NewPost);\r\n","import React, { RefObject } from 'react';\r\nimport style from './newPost.module.css'\r\n\r\n\r\ntype propsType = {\r\n    newPost: number | string\r\n    updatePost: (newPost: string) => void\r\n    addPost: () => void\r\n}\r\n\r\nexport const NewPost:React.FC<propsType> = (props) => {\r\n\r\n    let refPost:RefObject<HTMLTextAreaElement> = React.createRef()\r\n\r\n    const addPost = () => {\r\n        props.addPost()\r\n    }\r\n\r\n    const changeValue = () => {\r\n        if(refPost.current){\r\n            let newPost = refPost.current.value;\r\n            props.updatePost(newPost);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style.content}>\r\n            <div className={style.content__textArea}>\r\n                <textarea placeholder={'Enter text...'} ref={refPost}\r\n                          value={props.newPost} onChange={changeValue}></textarea>\r\n            </div>\r\n            <div className={style.content__button}>\r\n                <button onClick={addPost}>Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport style from './myPosts.module.css'\r\nimport { MyPost } from \"./myPost/MyPost\";\r\nimport {profilePostsType} from \"../../../redux/store\";\r\nimport {NewPostContainer} from \"./newPost/NewPostContainer\";\r\n\r\ntype propsType = {\r\n    posts:Array<profilePostsType>\r\n    newPost:string | number\r\n}\r\n\r\nexport const MyPosts:React.FC<propsType> = (props) => {\r\n\r\n    return (\r\n        <div className={style.posts}>\r\n            <div className=\"content__posts\">\r\n                Create a new post:\r\n                <NewPostContainer />\r\n                {props.posts.map((p) => <MyPost message ={p.message} key={p.id} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './profileInfo.module.css';\r\nimport {CommonDataProfileType} from \"../../../redux/redux-store\";\r\nimport {Preloader} from \"../../preloader/Preloader\";\r\n\r\ntype PropsType = {\r\n    userProfile: CommonDataProfileType | null\r\n    isFetching: boolean\r\n}\r\n\r\nexport const ProfileInfo: React.FC<PropsType> = (props) => {\r\n\r\n    return <>\r\n        {props.isFetching && <Preloader/>}\r\n        <div className={s.content__avatar}>\r\n            <img src={(props.userProfile?.photos?.large) ? props.userProfile?.photos?.large :\r\n                \"https://i.pinimg.com/originals/1d/a5/a0/1da5a0d16d1f7dd7e43b6da4b68cdf46.png\"} alt=\"\"/>\r\n        </div>\r\n        <div className={s.content__description}>\r\n            <div className={s.content__description_fullName}>\r\n                <b>FullName</b>: {props.userProfile?.fullName}\r\n            </div>\r\n            <div className={s.content__description_aboutMe}>\r\n                <b>AboutMe</b>: {props.userProfile?.aboutMe}\r\n            </div>\r\n            <div className={s.content__description_contacts}>\r\n                <b>Contacts</b>:\r\n\r\n                {/*{*/}\r\n                {/*    // @ts-ignore*/}\r\n                {/*    Object.keys(props.userProfile?.contacts).map(contact => (*/}\r\n                {/*        <span className=\"card-panel\">*/}\r\n                {/*            {*/}\r\n                {/*                // @ts-ignore*/}\r\n                {/*                props.userProfile?.contacts[contact]*/}\r\n                {/*            }*/}\r\n                {/*        </span>*/}\r\n                {/*    ))}*/}\r\n            </div>\r\n            <div className={s.content__description_searchJob}>\r\n                <b>Search a job:</b> {(props.userProfile?.lookingForAJob) ? \"Yes\" : \"No\"}\r\n            </div>\r\n            <div className={s.content__description_desriptionOfJob}>\r\n                <b>Description of job:</b> {(props.userProfile?.lookingForAJobDescription) ?\r\n                props.userProfile.lookingForAJobDescription :\r\n                \"No description\"}\r\n            </div>\r\n        </div>\r\n    </>\r\n}","import React from 'react';\r\nimport style from './profile.module.css'\r\nimport {MyPosts} from \"./myPosts/myPosts\";\r\nimport {ProfileInfo} from \"./profileInfo/ProfileInfo\";\r\nimport { profilePageType } from '../../redux/redux-store';\r\n\r\ntype propsType = {\r\n    profilePage:profilePageType\r\n}\r\n\r\nexport const Profile:React.FC<propsType>= (props) => {\r\n    return (\r\n        <div className={style.content}>\r\n            <ProfileInfo userProfile={props.profilePage.userProfile}\r\n                         isFetching={props.profilePage.isFetching}/>\r\n            <MyPosts posts={props.profilePage.posts} newPost={props.profilePage.newPost} />\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react';\r\nimport style from './profile.module.css'\r\nimport {Profile} from \"./Profile\";\r\nimport axios from 'axios';\r\nimport {connect} from \"react-redux\";\r\nimport {stateType, CommonDataProfileType, profilePageType} from \"../../redux/redux-store\";\r\nimport {setIsFetching, setUserProfile} from \"../../redux/TypesForRedux\";\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\r\n\r\n\r\n\r\ntype MstpType = {\r\n    profilePage: profilePageType\r\n}\r\n\r\ntype MdtpType = {\r\n    setUserProfile:(userProfile:CommonDataProfileType) => void\r\n    setIsFetching:(isFetching:boolean) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> &  MstpType & MdtpType\r\n\r\nexport class ProfileContainer extends React.Component<PropsType>{\r\n\r\n    componentDidMount(): void {\r\n\r\n        let userId = this.props.match.params.userId\r\n\r\n        if(!userId){\r\n            userId = '2'\r\n        }\r\n\r\n        this.props.setIsFetching(true)\r\n        axios.get<CommonDataProfileType>(`https://social-network.samuraijs.com/api/1.0/profile/${userId}`)\r\n            .then(res => {\r\n                this.props.setUserProfile(res.data)\r\n                this.props.setIsFetching(false)\r\n            })\r\n    }\r\n\r\n\r\n    render(): React.ReactNode {\r\n        return (\r\n                <Profile profilePage={this.props.profilePage} />\r\n        )\r\n    }\r\n}\r\n\r\nconst mstp = (state: stateType): MstpType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nexport const ProfileContainerWithURL = withRouter(connect(mstp, {setUserProfile, setIsFetching})(ProfileContainer))\r\n\r\n","import React from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport './App.css'\r\nimport {Header} from './Components/header/Header';\r\nimport {Nav} from './Components/nav/Nav';\r\nimport {Dialogs} from \"./Components/dialogs/Dialogs\";\r\nimport {News} from \"./Components/news/News\";\r\nimport { Settings } from './Components/settings/Settings';\r\nimport {stateType} from './redux/store';\r\nimport {ActionCreatorsType} from \"./redux/TypesForRedux\";\r\nimport {UsersContainer} from './Components/users/UsersContainer';\r\nimport {ProfileContainerWithURL} from \"./Components/profile/ProfileContainer\";\r\n\r\ntype propsType = {\r\n    state: stateType\r\n    dispatch: (action:ActionCreatorsType) => void\r\n}\r\n\r\nconst App:React.FC<propsType> = (props) => {\r\n    return (\r\n        <div className={'app__wrapper'}>\r\n            <Header/>\r\n            <Nav navPage={props.state.navPage} />\r\n            <div className=\"app__wrapper_content\">\r\n                <Route path={'/profile/:userId?'} render={() => <ProfileContainerWithURL />}/>\r\n                <Route path={'/dialogs'} render={() => <Dialogs dialogPage={props.state.dialogsPage}\r\n                                                                dispatch={props.dispatch}/>}/>\r\n                <Route path={'/users'}  render={() => <UsersContainer />}/>\r\n                <Route path={'/news'}  render={() => <News />}/>\r\n                <Route path={'/settings'} render={() => <Settings />}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n","import {ActionCreatorsType, typeOfActionDispatch} from \"../TypesForRedux\";\r\nimport {profilePageType} from \"../redux-store\";\r\n\r\n\r\nexport type profilePageReducerType = (state: profilePageType, action: ActionCreatorsType) => profilePageType\r\n\r\nconst initialState:profilePageType = {\r\n    posts: [\r\n        {id: 1, message: \"Hey girls\"},\r\n        {id: 2, message: \"Hey guys\"}\r\n    ],\r\n    newPost: '',\r\n    userProfile: null,\r\n    isFetching: false,\r\n}\r\n\r\nexport const profilePageReducer: profilePageReducerType = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.ADD_POST:\r\n            let newPostValue = state.newPost\r\n            let newPost = {id: 5, message: newPostValue}\r\n\r\n            state = {...state, posts: [...state.posts, newPost]}\r\n            state.newPost = '';\r\n            return state;\r\n        case typeOfActionDispatch.UPDATE_POST:\r\n            state = {...state}\r\n            state.newPost = action.newPostValue;\r\n            return state\r\n        case typeOfActionDispatch.SET_USER_PROFILE:\r\n            return {...state, userProfile: action.userProfile}\r\n        case typeOfActionDispatch.SET_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import {ActionCreatorsType} from \"../TypesForRedux\";\r\nimport {navPageType} from \"../redux-store\";\r\n\r\n\r\nexport type navPageReducerType = (state: navPageType, action: ActionCreatorsType) => navPageType\r\n\r\nconst initialState:navPageType = {\r\n    navTitles: [\r\n        {id: 1, title: 'Profile', path: '/profile'},\r\n        {id: 2, title: 'Dialogs', path: '/dialogs'},\r\n        {id: 3, title: 'Users', path: '/users'},\r\n        {id: 4, title: 'News', path: '/news'},\r\n        {id: 5, title: 'Settings', path: '/settings'}\r\n    ],\r\n    friends: [\r\n        {id: 1, name: 'Marat', pathToDialog: '/dialogs/1', isOnline: true},\r\n        {id: 2, name: 'Anton', pathToDialog: '/dialogs/2', isOnline: false},\r\n        {id: 3, name: 'Arkasha', pathToDialog: '/dialogs/3', isOnline: true},\r\n        {id: 4, name: 'Tolik', pathToDialog: '/dialogs/4', isOnline: false}\r\n    ]\r\n}\r\n\r\nexport const navPageReducer: navPageReducerType = (state = initialState, action) => {\r\n    return state\r\n}","import {ActionCreatorsType, typeOfActionDispatch} from \"../TypesForRedux\";\r\nimport {UsersStateType} from \"../redux-store\";\r\n\r\n\r\n//typization for reducer\r\ntype usersReducerType = (state: UsersStateType, action: ActionCreatorsType) => UsersStateType\r\n\r\n\r\nconst initialUsersState: UsersStateType = {\r\n    users: [],\r\n    totalUsersCount: 0,\r\n    pageSize: 100,\r\n    currentPage: 1,\r\n    isFetching: true\r\n}\r\n\r\nexport const usersReducer: usersReducerType = (state = initialUsersState, action): UsersStateType => {\r\n\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.FOLLOW_TO_USER:\r\n            return {...state, users: state.users.map(u => (u.id === action.userId) ? {...u, isFollowed: true} : u)}\r\n\r\n        case typeOfActionDispatch.UNFOLLOW_TO_USER:\r\n            return {...state, users: state.users.map(u => (u.id === action.userId) ? {...u, isFollowed: false} : u)}\r\n\r\n        case typeOfActionDispatch.SET_USERS:\r\n            return {...state, users: [...action.users]}\r\n\r\n        case typeOfActionDispatch.SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n\r\n        case typeOfActionDispatch.SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case typeOfActionDispatch.SET_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {profilePageReducer} from \"./reducers/profilePage-reducer\";\r\nimport {dialogsPageReducer} from \"./reducers/dialogsPage-reducer\";\r\nimport {navPageReducer} from \"./reducers/navPage-reducer\";\r\nimport {usersReducer} from \"./reducers/usersPage-reducer\";\r\n\r\nexport type PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\nexport type dialogsNamesType = {\r\n    id: number,\r\n    name: string,\r\n    path: string\r\n}\r\nexport type dialogsMessagesType = {\r\n    id: number,\r\n    message: string | number\r\n}\r\nexport type profilePostsType = {\r\n    id: number,\r\n    message: string | number\r\n}\r\nexport type navTitlesType = {\r\n    id: number,\r\n    title: string,\r\n    path: string\r\n}\r\nexport type FriendsNavType = {\r\n    id: number\r\n    name: string\r\n    pathToDialog: string\r\n    isOnline: boolean\r\n}\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string | null\r\n    photos: PhotosType\r\n    status: string | null\r\n    followed: boolean\r\n}\r\n\r\n//Profile data\r\ntype SocialContactsType = {\r\n    facebook: string | null\r\n    website: null | string\r\n    vk: string | null\r\n    twitter: string | null\r\n    instagram: string | null\r\n}\r\ntype PhotoUserType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\n\r\nexport type CommonDataUsersType<T> = {\r\n    error: string | null\r\n    items: T\r\n    totalCount: number\r\n}\r\nexport type CommonDataProfileType = {\r\n    aboutMe: string | null\r\n    contacts: SocialContactsType | null\r\n    fullName: string | null\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    photos: PhotoUserType | null\r\n    userId: number\r\n}\r\n\r\n\r\nexport type profilePageType = {\r\n    posts: Array<profilePostsType>\r\n    newPost: string | number\r\n    userProfile: CommonDataProfileType | null\r\n    isFetching: boolean\r\n}\r\nexport type dialogsPageType = {\r\n    names: Array<dialogsNamesType>\r\n    messages: Array<dialogsMessagesType>\r\n    newMessage: number | string\r\n}\r\nexport type navPageType = {\r\n    navTitles: Array<navTitlesType>\r\n    friends: Array<FriendsNavType>\r\n}\r\nexport type UsersStateType = {\r\n    users: Array<UserType>\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n}\r\n\r\nexport type stateType = {\r\n    profilePage: profilePageType\r\n    dialogsPage: dialogsPageType\r\n    navPage: navPageType\r\n    usersPage: UsersStateType\r\n}\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profilePageReducer,\r\n    dialogsPage: dialogsPageReducer,\r\n    navPage: navPageReducer,\r\n    usersPage: usersReducer\r\n});\r\n\r\n\r\nexport let store = createStore(reducers)","import React from 'react';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport ReactDOM from \"react-dom\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport {stateType} from \"./redux/store\";\r\nimport {store} from \"./redux/redux-store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nexport type renderAppTreeType = (state: stateType) => void\r\n\r\n\r\nexport const renderAppTree: renderAppTreeType = (state: stateType) => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <HashRouter>\r\n                <Provider store={store}>\r\n                    <App state={state}\r\n                         dispatch={store.dispatch.bind(store)}/>\r\n                </Provider>\r\n            </HashRouter>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nrenderAppTree(store.getState());\r\n\r\nstore.subscribe(() => renderAppTree(store.getState()))\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}