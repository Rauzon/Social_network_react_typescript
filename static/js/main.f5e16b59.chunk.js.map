{"version":3,"sources":["Components/profile/profileInfo/profileInfo.module.css","Components/nav/nav.module.css","Components/profile/myPosts/myPost/myPost.module.css","Components/login/login.module.css","hoc/authRedirectHOC.tsx","Components/news/news.module.css","Components/settings/settings.module.css","Components/profile/profile.module.css","Components/profile/myPosts/myPosts.module.css","images/logo.png","serviceWorker.ts","Components/nav/sideBar/SidebarTitle.tsx","Components/nav/friendsBlock/FriendsBlock.tsx","Components/nav/Nav.tsx","Components/news/News.tsx","Components/settings/Settings.tsx","Components/profile/myPosts/myPost/MyPost.tsx","Components/profile/myPosts/newPost/ProfilePostForm.tsx","Components/profile/myPosts/newPost/NewPostContainer.tsx","Components/profile/myPosts/MyPosts.tsx","Components/profile/profileInfo/Contacts.tsx","Components/profile/profileInfo/ProfileInfoData.tsx","Components/profile/profileInfo/EditableStatus.tsx","Components/profile/profileInfo/ProfileInfoDataForm.tsx","Components/profile/profileInfo/ProfileInfo.tsx","Components/profile/Profile.tsx","thunks/profileThunk.ts","redux/selectors/ProfileSelectors.ts","Components/profile/ProfileContainer.tsx","Components/header/Header.tsx","thunks/authThunk.ts","redux/selectors/LoginSelectors.ts","redux/selectors/HeaderSelectors.ts","Components/header/HeaderContainer.tsx","Components/login/LoginForm.tsx","Components/login/Login.tsx","Components/common/SnackBar.tsx","hoc/withSuspenseHOC.tsx","App.tsx","thunks/appThunk.ts","redux/reducers/profilePage-reducer.ts","redux/reducers/dialogsPage-reducer.ts","redux/reducers/navPage-reducer.ts","redux/reducers/usersPage-reducer.ts","redux/reducers/auth-reducer.ts","redux/reducers/app-reducer.ts","redux/redux-store.ts","index.tsx","utils/errorHandlers.ts","Components/nav/friendsBlock/friendsBlock.module.css","API/API.ts","Components/login/loginForm.module.css","redux/ActionCreators.ts","Components/header/header.module.css","app.module.css","Components/profile/myPosts/newPost/newPost.module.css"],"names":["module","exports","mapStateForRedirect","state","isAuth","auth","authRedirectHOC","Component","connect","props","restProps","to","Boolean","window","location","hostname","match","SidebarTitle","React","memo","path","title","CssAccordion","withStyles","root","padding","Accordion","useStyles","makeStyles","theme","createStyles","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","contentBlock","contentBlockWrapper","contentBlockWrapperRoot","FriendsBlock","classes","className","style","MuiPaperRoot","AccordionSummary","expandIcon","aria-controls","id","Typography","AccordionDetails","component","friends","map","f","key","nav__friendsBlock_item","nav__friendsBlock_item_img","src","alt","nav__friendsBlock_item_name","pathToDialog","name","isOnline","nav__friendsBlock_item_onlineStatus","Nav","useSelector","s","nav","wrap__title","navPage","navTitles","t","nav__friendsBlock","News","content","Settings","MyPost","content__img","photo","content__text","message","validationSchema","Yup","textareaPost","max","ProfilePostForm","formik","useFormik","initialValues","onSubmit","values","resetForm","addPost","undefined","FormControl","FormGroup","handleSubmit","Grid","container","direction","spacing","item","content__textArea","TextField","placeholder","variant","multiline","rows","rowsMax","getFieldProps","errors","touched","color","content__button","Button","type","NewPost","NewPostContainer","MyPosts","content__posts","posts","p","Contacts","contacts","userProfile","Object","keys","content__socialLinks","content__description_contacts","ProfileInfoData","content__description_aboutMe","aboutMe","content__description_searchJob","lookingForAJob","content__description_desriptionOfJob","lookingForAJobDescription","EditableStatus","userId","useState","editeMode","setEditeMode","status","localStatus","setLocalStatus","onBlurHandler","useCallback","updateStatus","useEffect","value","onChange","e","currentTarget","onBlur","autoFocus","content__mainInfo_contactStatus_spanContent","onDoubleClick","yup","shape","required","facebook","length","website","vk","twitter","instagram","github","youtube","mainLink","ProfileInfoDataForm","isChecked","setIsChecked","updateProfileData","fullName","setEditeModeHandler","handleChange","errorStyle","Checkbox","checked","ProfileInfo","margin","input","display","content__profileInfo","content__mainInfo","content__mainInfo_avatar","photos","large","paramsUserId","content__mainInfo_photoBtn","accept","event","file","target","files","updatePhoto","htmlFor","IconButton","aria-label","PhotoCamera","content__mainInfo_contactStatus","content__description_fullName","content__description","content__description_editBtn","onClick","Profile","profilePage","isFetching","CircularProgress","position","top","left","bottom","right","profileStatus","setUserProfileThunk","dispatch","setIsFetching","profileAPI","setUserProfile","then","res","data","catch","err","serverErrorHandler","getProfilePageSelector","createSelector","profile","getUserIdSelector","ProfileContainer","this","params","authUserId","toString","history","push","setStatusProfile","rerenderProfile","prevProps","PureComponent","ProfileContainerWithURL","compose","withRouter","updateStatusProfile","updateProfilePhoto","resultCode","errorHandler","profileData","getState","Header","logOut","logOutProfile","header","header__wrapper","header__wrapper_img","logo","header__authBlock","header__authBlock_login","login","header__logOutBtn","getCaptchaThunk","dispath","authAPI","getCaptcha","setCaptchaValue","url","authProfileThunk","setAuth","setAuthData","getIsAuthSelector","getServerErrorSelector","error","serverError","getCaptchaSelector","captcha","getLoginSelector","HeaderContainer","logout","email","password","min","LoginForm","rememberMe","label","InputProps","fieldErr","styleError","FormControlLabel","control","captcha__content","captcha__content_img","Login","login__content","login__content_inner_textHelper","login__content_inner","LoginContainer","postLogin","postLoginData","setAuthError","logIn","marginTop","SnackBar","app","useDispatch","handleClose","reason","setError","Snackbar","open","autoHideDuration","onClose","severity","Alert","elevation","withSuspenseHOC","Suspense","fallback","circleProgress","DialogContainer","lazy","default","UsersContainer","App","isInitialized","finally","initializedApp","app__wrapper","app__wrapper_content","render","initialState","uuid","names","messages","initialUsersState","users","totalUsersCount","pageSize","currentPage","isFollowingInProgress","initialAuthState","initialAppState","reducers","combineReducers","action","typeOfActionDispatch","ADD_POST","newPostValue","newPost","SET_USER_PROFILE","SET_IS_FETCHING","SET_STATUS_PROFILE","statusProfile","UPDATE_PHOTO","dialogsPage","ADD_MESSAGE","newMessage","usersPage","FOLLOW_TO_USER","u","followed","UNFOLLOW_TO_USER","SET_USERS","SET_TOTAL_USERS_COUNT","SET_CURRENT_PAGE","SET_FOLLOWING_IN_PROGRESS","isFollowingProgress","filter","SET_AUTH_DATA","copyState","authData","SET_AUTH_ERROR","SET_CAPTCHA_VALUE","INITIALIZED_APP","SET_ERROR","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunk","renderAppTree","ReactDOM","StrictMode","bind","document","getElementById","subscribe","navigator","serviceWorker","ready","registration","unregister","console","instance","axios","create","withCredentials","baseURL","headers","userAPI","setUsers","get","unfollow","delete","follow","post","put","FormData","append","addMessage","setTotalUsersCount","setCurrentPage","setFollowingInProgress"],"mappings":"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","file":"static/js/main.f5e16b59.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content__profileInfo\":\"profileInfo_content__profileInfo__P8qcm\",\"content__mainInfo\":\"profileInfo_content__mainInfo__10Oib\",\"content__mainInfo_contactStatus\":\"profileInfo_content__mainInfo_contactStatus__s_GZD\",\"content__mainInfo_contactStatus_spanContent\":\"profileInfo_content__mainInfo_contactStatus_spanContent__3l0nE\",\"content__mainInfo_avatar\":\"profileInfo_content__mainInfo_avatar__1toRH\",\"content__mainInfo_photoBtn\":\"profileInfo_content__mainInfo_photoBtn__rhqhX\",\"content__description\":\"profileInfo_content__description__2dMvU\",\"content__description_editBtn\":\"profileInfo_content__description_editBtn__3snD1\",\"content__description_aboutMe\":\"profileInfo_content__description_aboutMe__21nxh\",\"content__description_contacts\":\"profileInfo_content__description_contacts__1kNa-\",\"content__description_fullName\":\"profileInfo_content__description_fullName__3yYXC\",\"content__description_searchJob\":\"profileInfo_content__description_searchJob__1LMz1\",\"content__description_desriptionOfJob\":\"profileInfo_content__description_desriptionOfJob__2lpvY\",\"content__socialLinks\":\"profileInfo_content__socialLinks__BbwaC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"nav_nav__32Dtx\",\"wrap__title\":\"nav_wrap__title__1fJvA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"myPost_content__1RSxM\",\"content__img\":\"myPost_content__img__ab0v1\",\"content__text\":\"myPost_content__text__2GZxT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login__content\":\"login_login__content__1Gnuf\",\"login__content_inner\":\"login_login__content_inner__LIZKO\",\"login__content_inner_textHelper\":\"login_login__content_inner_textHelper__aDKMn\"};","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {StateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateForRedirectType = {\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateForRedirect = (state: StateType): MapStateForRedirectType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function authRedirectHOC<HOCPropsType>(Component: ComponentType<HOCPropsType>) {\r\n\r\n    function authRedirectComponent(props: MapDispatchForRedirectType & MapStateForRedirectType) {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) {\r\n            return <Redirect to={'/login'}/>\r\n        }\r\n\r\n        return <Component {...restProps as HOCPropsType} />\r\n\r\n    }\r\n\r\n    return connect<MapStateForRedirectType, MapDispatchForRedirectType, HOCPropsType, StateType>(mapStateForRedirect)\r\n    (authRedirectComponent)\r\n\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"news_content__kswPX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"settings_content__3LtiA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"profile_content__1q3D6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content__posts\":\"myPosts_content__posts__2Gi5V\"};","module.exports = __webpack_public_path__ + \"static/media/logo.d243bdd9.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached profile has been fetched,\n              // but the previous service worker will still serve the older\n              // profile until all client tabs are closed.\n              console.log(\n                'New profile is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Profile is cached for offline use.\" message.\n              console.log('Profile is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('profile-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    path: string\r\n    title: string\r\n    key: string\r\n}\r\n\r\nexport const SidebarTitle: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    return <>\r\n        <NavLink to={props.path}>\r\n            <li>{props.title}</li>\r\n        </NavLink>\r\n    </>\r\n})","import React from \"react\";\r\nimport style from './friendsBlock.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport {AccordionDetails, AccordionSummary, createStyles, Typography} from \"@material-ui/core\";\r\nimport {makeStyles, withStyles, Theme} from \"@material-ui/core/styles\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport {FriendsNavType} from \"../../../redux/reducers/navPage-reducer\";\r\n\r\ntype PropsType = {\r\n    friends: FriendsNavType[]\r\n}\r\n\r\nconst CssAccordion = withStyles({\r\n    root: {\r\n        '& .MuiAccordionDetails-root': {\r\n            padding: '0px',\r\n        },\r\n    },\r\n})(Accordion);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            \"& .MuiAccordionDetails\": {\r\n                padding: '0px',\r\n            },\r\n        },\r\n        heading: {\r\n            fontSize: theme.typography.pxToRem(15),\r\n            fontWeight: theme.typography.fontWeightRegular,\r\n        },\r\n        contentBlock: {\r\n            width: '100%',\r\n        },\r\n        contentBlockWrapper: {\r\n            width: '100%',\r\n        },\r\n        contentBlockWrapperRoot: {\r\n            width: '100%',\r\n        },\r\n    }),\r\n);\r\n\r\nexport const FriendsBlock: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return <>\r\n        <CssAccordion className={`${style.MuiPaperRoot} ${style.contentBlockWrapperRoot}`}>\r\n            <AccordionSummary\r\n                expandIcon={<ExpandMoreIcon/>}\r\n                aria-controls=\"panel1a-content\"\r\n                id=\"panel1a-header\"\r\n            >\r\n                <Typography className={classes.heading}>Friends</Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails className={classes.contentBlockWrapper}>\r\n                <Typography component={'span'} className={classes.contentBlock}>\r\n                    {props.friends.map(f => <div key={f.id} className={style.nav__friendsBlock_item}>\r\n                            <div className={style.nav__friendsBlock_item_img}>\r\n                                <img src=\"https://i.ibb.co/F8yML1z/image.png\" alt=\"\"/>\r\n                            </div>\r\n                            <div className={style.nav__friendsBlock_item_name}>\r\n                                <NavLink to={f.pathToDialog}>{f.name}</NavLink>\r\n                            </div>\r\n                            {f.isOnline && <div className={style.nav__friendsBlock_item_onlineStatus}/>\r\n                            }\r\n                        </div>\r\n                    )}\r\n                </Typography>\r\n            </AccordionDetails>\r\n        </CssAccordion>\r\n    </>\r\n})","import React from \"react\";\r\nimport s from './nav.module.css';\r\nimport {SidebarTitle} from \"./sideBar/SidebarTitle\";\r\nimport {FriendsBlock} from \"./friendsBlock/FriendsBlock\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {NavPageType} from \"../../redux/reducers/navPage-reducer\";\r\n\r\ntype propsType = {\r\n    navPage: NavPageType\r\n}\r\n\r\nexport const Nav: React.FC<propsType> = React.memo((props) => {\r\n\r\n    const isAuth = useSelector<StateType, boolean>(state => state.auth.isAuth)\r\n\r\n    return <div className={s.nav}>\r\n        <div className={s.wrap__title}>\r\n            {props.navPage.navTitles.map((t) => <SidebarTitle key={t.id}\r\n                                                              title={t.title}\r\n                                                              path={t.path}/>)}\r\n        </div>\r\n        <div className={s.nav__friendsBlock}>\r\n            {isAuth && <>\r\n                <FriendsBlock friends={props.navPage.friends}/>\r\n            </>}\r\n        </div>\r\n    </div>\r\n})","import React from 'react';\r\nimport style from './news.module.css'\r\n\r\nexport const News= React.memo(() => {\r\n    return (\r\n        <div className={style.content}>\r\n           The page of news is being developed\r\n        </div>\r\n    )\r\n})","import React from 'react';\r\nimport style from './settings.module.css'\r\n\r\nexport const Settings= React.memo(() => {\r\n    return (\r\n        <div className={style.content}>\r\n           The page of settings is being developed\r\n        </div>\r\n    )\r\n})","import React from 'react';\r\nimport style from './myPost.module.css'\r\n\r\ntype propsType = {\r\n    message: string | number\r\n    photo: string | null | undefined\r\n}\r\n\r\n\r\nexport const MyPost: React.FC<propsType> = React.memo((props) => {\r\n\r\n    let defaultAvatarPhoto = `https://i.ibb.co/F8yML1z/image.png`\r\n\r\n    return (\r\n        <div className={style.content}>\r\n            <div className={style.content__img}>\r\n                <img src={(props.photo) ? props.photo : defaultAvatarPhoto} alt=\"\"/>\r\n            </div>\r\n            <div className={style.content__text}>\r\n                <span>{props.message}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from 'react';\r\nimport style from './newPost.module.css'\r\nimport {useFormik} from \"formik\";\r\nimport {FormControl, FormGroup, Grid, TextField, Button} from \"@material-ui/core\";\r\nimport * as Yup from \"yup\";\r\n\r\ninterface IProfilePostForm {\r\n    addPost: (newPostValue: string) => void\r\n}\r\n\r\nconst validationSchema = Yup.object({\r\n    textareaPost: Yup.string()\r\n        .max(300,'post should consists 300 char or less')\r\n});\r\n\r\n\r\nexport const ProfilePostForm: React.FC<IProfilePostForm> = React.memo((props) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            textareaPost: '',\r\n        },\r\n        validationSchema,\r\n        onSubmit: (values,{resetForm}) => {\r\n            if (values.textareaPost) {\r\n                props.addPost(values.textareaPost)\r\n            }\r\n            resetForm({values: '' || undefined})\r\n        },\r\n    });\r\n\r\n    const errorStype = {\r\n        color: \"red\",\r\n    }\r\n\r\n    return <>\r\n        <FormControl>\r\n            <FormGroup>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Grid container direction={\"column\"} spacing={3}>\r\n                        <Grid item>\r\n                            <div className={style.content__textArea}>\r\n                                <TextField placeholder={'enter some text...'}\r\n                                           name={'textareaPost'}\r\n                                           variant=\"outlined\"\r\n                                           multiline\r\n                                           rows={2}\r\n                                           rowsMax={4}\r\n                                           {...formik.getFieldProps('textareaPost')}/>\r\n                            </div>\r\n                            {formik.errors.textareaPost && formik.touched.textareaPost ?\r\n                                <div style={errorStype}>{formik.errors.textareaPost}</div> : null}\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <div className={style.content__button}>\r\n                                <Button type={'submit'} variant='contained'>PUBLISH</Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </FormGroup>\r\n        </FormControl>\r\n    </>\r\n})\r\n","import React from 'react';\r\nimport {addPost} from \"../../../../redux/ActionCreators\";\r\nimport {connect} from \"react-redux\";\r\nimport style from \"./newPost.module.css\";\r\nimport {ProfilePostForm} from \"./ProfilePostForm\";\r\n\r\ntype MapDispatchToProps = {\r\n    addPost: (value: string) => void\r\n}\r\n\r\ntype NewPostPropsType = {\r\n    addPost: (newPostValue: string) => void\r\n}\r\n\r\nexport const NewPost: React.FC<NewPostPropsType> = React.memo((props) => {\r\n\r\n    return (\r\n        <div className={style.content}>\r\n            <ProfilePostForm addPost={props.addPost}/>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport const NewPostContainer = connect<{}, MapDispatchToProps, {}, {}>(null, {addPost})(NewPost);\r\n","import React from \"react\";\r\nimport s from './myPosts.module.css'\r\nimport {MyPost} from \"./myPost/MyPost\";\r\nimport {NewPostContainer} from \"./newPost/NewPostContainer\";\r\nimport {ProfilePostsType} from \"../../../redux/reducers/profilePage-reducer\";\r\n\r\n\r\ntype propsType = {\r\n    posts: Array<ProfilePostsType>\r\n    photo: string | null | undefined\r\n}\r\n\r\nexport const MyPosts: React.FC<propsType> = React.memo((props) => {\r\n\r\n    return (\r\n        <div className={s.content__posts}>\r\n            <h4><span>Create a new post:</span></h4>\r\n            <NewPostContainer/>\r\n            {props.posts.map((p) => <MyPost message={p.message}\r\n                                            key={p.id}\r\n                                            photo={props.photo}/>)}\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport s from \"./profileInfo.module.css\";\r\nimport style from \"../../nav/friendsBlock/friendsBlock.module.css\";\r\nimport {AccordionDetails, AccordionSummary, createStyles, Typography} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport {CommonDataProfileType, SocialContactsType} from \"../../../redux/reducers/profilePage-reducer\";\r\nimport {makeStyles, Theme, withStyles} from \"@material-ui/core/styles\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\n\r\ntype ContactsPropsType = {\r\n    userProfile: CommonDataProfileType\r\n}\r\n\r\nconst CssAccordion = withStyles({\r\n    root: {\r\n        '& .MuiAccordionDetails-root': {\r\n            padding: '0px',\r\n        },\r\n    },\r\n})(Accordion);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            \"& .MuiAccordionDetails\": {\r\n                padding: '0px',\r\n            },\r\n        },\r\n        heading: {\r\n            fontSize: theme.typography.pxToRem(15),\r\n            fontWeight: theme.typography.fontWeightRegular,\r\n        },\r\n        contentBlock: {\r\n            width: '100%',\r\n        },\r\n        contentBlockWrapper: {\r\n            width: '100%',\r\n        },\r\n        contentBlockWrapperRoot: {\r\n            width: '100%',\r\n        },\r\n    }),\r\n);\r\n\r\nexport const Contacts: React.FC<ContactsPropsType> = (props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    let contacts: any\r\n    if (props.userProfile && props.userProfile.contacts) {\r\n        let keys = Object.keys(props.userProfile.contacts)\r\n        contacts = keys.map((key) => {\r\n            return (\r\n                <div className={s.content__socialLinks} key={key}>\r\n                    <span><b>{key}</b>: {props.userProfile.contacts[key as keyof SocialContactsType]}</span>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    return <div className={s.content__description_contacts}>\r\n        <CssAccordion className={`${style.MuiPaperRoot} ${style.contentBlockWrapperRoot}`}>\r\n            <AccordionSummary\r\n                expandIcon={<ExpandMoreIcon/>}\r\n                aria-controls=\"panel1a-content\"\r\n                id=\"panel1a-header\"\r\n            >\r\n                <Typography className={classes.heading}><b>Contacts:</b></Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails className={classes.contentBlockWrapper}>\r\n                <Typography className={classes.contentBlock} component={'span'}>\r\n                    {contacts}\r\n                </Typography>\r\n            </AccordionDetails>\r\n        </CssAccordion>\r\n    </div>\r\n\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./profileInfo.module.css\";\r\nimport {CommonDataProfileType} from \"../../../redux/reducers/profilePage-reducer\";\r\nimport {EditableStatus} from \"./EditableStatus\";\r\nimport {Contacts} from \"./Contacts\";\r\n\r\ntype ProfileInfoDataPropsType = {\r\n    userProfile: CommonDataProfileType\r\n    updatePhoto: (photo: any) => void\r\n    paramsUserId: boolean\r\n    status: string\r\n    updateStatus: (title: string) => void\r\n    userId: string\r\n}\r\n\r\n\r\nexport const ProfileInfoData: React.FC<ProfileInfoDataPropsType> = (props) => {\r\n\r\n    return <>\r\n            <div className={s.content__description_aboutMe}>\r\n                <b>About me</b>: {props.userProfile?.aboutMe}\r\n            </div>\r\n            <div className={s.content__description_searchJob}>\r\n                <b>Search a job:</b> {(props.userProfile?.lookingForAJob) ? \"Yes\" : \"No\"}\r\n            </div>\r\n            {props.userProfile?.lookingForAJob && <div className={s.content__description_desriptionOfJob}>\r\n                <b>Description of job:</b> {(props.userProfile?.lookingForAJobDescription) ?\r\n                props.userProfile.lookingForAJobDescription :\r\n                \"No description\"}\r\n            </div>\r\n            }\r\n            <Contacts userProfile={props.userProfile}/>\r\n    </>\r\n}","import React, {ChangeEvent, useCallback, useEffect, useState} from \"react\";\r\nimport s from './profileInfo.module.css';\r\n\r\ntype EditebleStatusPropsType = {\r\n    status: string\r\n    updateStatus: (title: string) => void\r\n    userId: string\r\n}\r\n\r\n\r\nexport const EditableStatus: React.FC<EditebleStatusPropsType> = React.memo((props) => {\r\n\r\n    let userId = props.userId\r\n\r\n    if (!userId) {\r\n        userId = '7788'\r\n    }\r\n\r\n    const [editeMode, setEditeMode] = useState<boolean>(false)\r\n    const [localStatus, setLocalStatus] = useState<string>(props.status)\r\n\r\n    const onBlurHandler = useCallback(() => {\r\n        props.updateStatus(localStatus)\r\n        setEditeMode(false)\r\n    }, [localStatus])\r\n\r\n    useEffect(() => {\r\n        setLocalStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return <div>\r\n        <span><b>Status: </b></span>\r\n        {(editeMode && userId == '7788') ?\r\n            <div>\r\n                <input type=\"text\" value={localStatus} onChange={onChangeHandler} onBlur={onBlurHandler}\r\n                       autoFocus={true}/></div> :\r\n            <div className={s.content__mainInfo_contactStatus_spanContent}>\r\n                <span onDoubleClick={() => setEditeMode(true)}>{props.status}</span>\r\n            </div>}\r\n    </div>\r\n})","import React, {useState} from \"react\";\r\nimport s from \"./profileInfo.module.css\";\r\nimport {CommonDataProfileType, SocialContactsType} from \"../../../redux/reducers/profilePage-reducer\";\r\nimport {useFormik} from \"formik\";\r\nimport {\r\n    AccordionDetails,\r\n    AccordionSummary,\r\n    Button,\r\n    Checkbox,\r\n    createStyles,\r\n    TextField,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport style from \"../../nav/friendsBlock/friendsBlock.module.css\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport {makeStyles, Theme, withStyles} from \"@material-ui/core/styles\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport * as yup from 'yup';\r\n\r\ntype ProfileInfoDataPropsType = {\r\n    userProfile: CommonDataProfileType\r\n    updatePhoto: (photo: any) => void\r\n    paramsUserId: boolean\r\n    status: string\r\n    updateStatus: (title: string) => void\r\n    userId: string\r\n    setEditeModeHandler: () => void\r\n    fullName: string | null\r\n    updateProfileData: (data: any) => void\r\n}\r\n\r\n//error validation\r\nlet validationSchema = yup.object().shape({\r\n    aboutMe: yup.string()\r\n        .required()\r\n        .max(300, '300 or less chars'),\r\n    lookingForAJobDescription: yup.string()\r\n        .required()\r\n        .max(300, '300 or less chars'),\r\n    contacts: yup.object({\r\n        facebook: yup.string().length(30, '30 or less chars'),\r\n        website: yup.string().length(30, '30 or less chars'),\r\n        vk: yup.string().length(30, '30 or less chars'),\r\n        twitter: yup.string().length(30, '30 or less chars'),\r\n        instagram: yup.string().length(30, '30 or less chars'),\r\n        github: yup.string().length(30, '30 or less chars'),\r\n        youtube: yup.string().length(30, '30 or less chars'),\r\n        mainLink: yup.string().length(30, '30 or less chars'),\r\n    })\r\n});\r\n\r\nconst CssAccordion = withStyles({\r\n    root: {\r\n        '& .MuiAccordionDetails-root': {\r\n            padding: '0px',\r\n        },\r\n    },\r\n})(Accordion);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            \"& .MuiAccordionDetails\": {\r\n                padding: '0px',\r\n            },\r\n        },\r\n        heading: {\r\n            fontSize: theme.typography.pxToRem(15),\r\n            fontWeight: theme.typography.fontWeightRegular,\r\n        },\r\n        contentBlock: {\r\n            width: '100%',\r\n        },\r\n        contentBlockWrapper: {\r\n            width: '100%',\r\n        },\r\n        contentBlockWrapperRoot: {\r\n            width: '100%',\r\n        },\r\n    }),\r\n);\r\n\r\nexport const ProfileInfoDataForm: React.FC<ProfileInfoDataPropsType> = (props) => {\r\n\r\n    const [isChecked, setIsChecked] = useState<boolean>(props.userProfile.lookingForAJob);\r\n\r\n    const classes = useStyles();\r\n\r\n    const formik = useFormik({\r\n        validationSchema,\r\n        initialValues: {\r\n            aboutMe: props.userProfile.aboutMe,\r\n            lookingForAJob: props.userProfile.lookingForAJob,\r\n            lookingForAJobDescription: props.userProfile.lookingForAJobDescription,\r\n            contacts: {\r\n                facebook: (props.userProfile.contacts.facebook),\r\n                website: props.userProfile.contacts.website,\r\n                vk: props.userProfile.contacts.vk,\r\n                twitter: props.userProfile.contacts.twitter,\r\n                instagram: props.userProfile.contacts.instagram,\r\n                github: props.userProfile.contacts.github,\r\n                youtube: props.userProfile.contacts.youtube,\r\n                mainLink: props.userProfile.contacts.mainLink,\r\n            }\r\n        },\r\n        onSubmit: values => {\r\n            props.updateProfileData({\r\n                userId: props.userId,\r\n                fullName: props.fullName,\r\n                ...values\r\n            })\r\n            props.setEditeModeHandler()\r\n        },\r\n    });\r\n\r\n    let contacts: any\r\n    if (props.userProfile && props.userProfile.contacts) {\r\n        let keys = Object.keys(props.userProfile.contacts)\r\n        contacts = keys.map((key) => {\r\n            return (\r\n                <div className={s.content__socialLinks} key={key}>\r\n                    <span><b>{key}</b>:<TextField\r\n                        id={`${key}`}\r\n                        name={`contacts.${key}`}\r\n                        type=\"text\"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.contacts[key as keyof SocialContactsType]}\r\n                    />\r\n                    </span>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    //for changing checkbox\r\n    const onChangeCheckboxHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setIsChecked(!e.currentTarget.checked)\r\n        formik.handleChange(e)\r\n    }\r\n\r\n    const errorStyle = {color: 'red'}\r\n\r\n    return <>\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div className={s.content__description_aboutMe}>\r\n                <b>About me:</b><TextField\r\n                id=\"AboutMe\"\r\n                name=\"aboutMe\"\r\n                type=\"text\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.aboutMe}\r\n                rows={3}\r\n                variant=\"outlined\"\r\n            />\r\n                {formik.errors.aboutMe && formik.touched.aboutMe ? (\r\n                    <div style={errorStyle}>{formik.errors.aboutMe}</div>\r\n                ) : null}\r\n            </div>\r\n            <div className={s.content__description_searchJob}>\r\n                <b>Search a job:</b>\r\n                <Checkbox\r\n                    checked={formik.values.lookingForAJob}\r\n                    onChange={onChangeCheckboxHandler}\r\n                    name=\"lookingForAJob\"\r\n                    color=\"primary\"\r\n                />\r\n            </div>\r\n            {(props.userProfile?.lookingForAJob || !isChecked) &&\r\n            <div className={s.content__description_desriptionOfJob}>\r\n                <b>Description of job:</b>\r\n                <TextField\r\n                    id=\"lookingForAJobDescription\"\r\n                    name=\"lookingForAJobDescription\"\r\n                    type=\"text\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.lookingForAJobDescription}\r\n                    rows={3}\r\n                    variant=\"outlined\"\r\n                />\r\n                {formik.errors.lookingForAJobDescription && formik.touched.lookingForAJobDescription ? (\r\n                    <div style={errorStyle}>{formik.errors.lookingForAJobDescription}</div>\r\n                ) : null}\r\n            </div>\r\n            }\r\n            <div className={s.content__description_contacts}>\r\n                <CssAccordion className={`${style.MuiPaperRoot} ${style.contentBlockWrapperRoot}`}>\r\n                    <AccordionSummary\r\n                        expandIcon={<ExpandMoreIcon/>}\r\n                        aria-controls=\"panel1a-content\"\r\n                        id=\"panel1a-header\"\r\n                    >\r\n                        <Typography className={classes.heading}><b>Contacts:</b></Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails className={classes.contentBlockWrapper}>\r\n                        <Typography className={classes.contentBlock} component={'span'}>\r\n                            {contacts}\r\n                        </Typography>\r\n                    </AccordionDetails>\r\n                </CssAccordion>\r\n            </div>\r\n            <Button type=\"submit\">Save</Button>\r\n        </form>\r\n    </>\r\n}","import React, {useState} from \"react\";\r\nimport s from './profileInfo.module.css';\r\nimport {CommonDataProfileType} from \"../../../redux/reducers/profilePage-reducer\";\r\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\r\nimport {createStyles, IconButton, Theme} from \"@material-ui/core\";\r\nimport {ProfileInfoData} from \"./ProfileInfoData\";\r\nimport {EditableStatus} from \"./EditableStatus\";\r\nimport {ProfileInfoDataForm} from \"./ProfileInfoDataForm\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {PhotoCamera} from \"@material-ui/icons\";\r\n\r\ntype PropsType = {\r\n    userProfile: CommonDataProfileType\r\n    status: string\r\n    updateStatus: (title: string) => void\r\n    userId: string\r\n    paramsUserId: boolean\r\n    updatePhoto: (photo: any) => void\r\n    updateProfileData: (data: any) => void\r\n}\r\n\r\nexport const ProfileInfo: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const [editeMode, setEditeMode] = useState<boolean>(false)\r\n\r\n    let defaultAvatarPhoto = `https://i.imgur.com/d8HZHxF.jpg`\r\n\r\n    const onChangePhotoProfile = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n        let target = event.target as HTMLInputElement;\r\n        let file = target.files;\r\n        if (file) {\r\n            props.updatePhoto(file[0])\r\n        }\r\n\r\n    }\r\n\r\n    //change editeMode to false pressing button save\r\n    const setEditeModeHandler = () => {\r\n        setEditeMode(false)\r\n    }\r\n\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            root: {\r\n                '& > *': {\r\n                    margin: theme.spacing(1),\r\n                },\r\n            },\r\n            input: {\r\n                display: 'none',\r\n            },\r\n        }),\r\n    );\r\n\r\n    const classes = useStyles();\r\n\r\n    return <div className={s.content__profileInfo}>\r\n        <div className={s.content__mainInfo}>\r\n            <div className={s.content__mainInfo_avatar}>\r\n                <img src={(props.userProfile?.photos?.large) ? props.userProfile?.photos?.large :\r\n                    defaultAvatarPhoto}\r\n                     alt=\"\"/>\r\n                {!props.paramsUserId &&\r\n                <div className={s.content__mainInfo_photoBtn}>\r\n                    <input accept=\"image/*\" className={classes.input} id=\"icon-button-file\" type=\"file\"\r\n                           onChange={onChangePhotoProfile}/>\r\n                    <label htmlFor=\"icon-button-file\">\r\n                        <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\r\n                            <PhotoCamera fontSize={\"large\"}/>\r\n                        </IconButton>\r\n                    </label>\r\n                </div>\r\n                }\r\n            </div>\r\n            < div className={s.content__mainInfo_contactStatus}>\r\n                <div className={s.content__description_fullName}>\r\n                    <b>FullName</b>: {props.userProfile?.fullName}\r\n                </div>\r\n                <EditableStatus status={props.status} updateStatus={props.updateStatus} userId={props.userId}/>\r\n            </div>\r\n        </div>\r\n        <div className={s.content__description}>\r\n            {!editeMode ? <ProfileInfoData updatePhoto={props.updatePhoto}\r\n                                           paramsUserId={props.paramsUserId}\r\n                                           updateStatus={props.updateStatus}\r\n                                           userId={props.userId}\r\n                                           status={props.status}\r\n                                           userProfile={props.userProfile}/>\r\n                : <ProfileInfoDataForm updatePhoto={props.updatePhoto}\r\n                                       paramsUserId={props.paramsUserId}\r\n                                       updateStatus={props.updateStatus}\r\n                                       userId={props.userId}\r\n                                       status={props.status}\r\n                                       userProfile={props.userProfile}\r\n                                       setEditeModeHandler={setEditeModeHandler}\r\n                                       fullName={props.userProfile?.fullName}\r\n                                       updateProfileData={props.updateProfileData}\r\n                />\r\n            }\r\n            {(!props.paramsUserId && !editeMode) && <div className={s.content__description_editBtn}>\r\n                <IconButton>\r\n                    <BorderColorIcon onClick={() => setEditeMode(true)} fontSize=\"small\"/>\r\n                </IconButton>\r\n            </div>}\r\n        </div>\r\n    </div>\r\n})","import React, {CSSProperties} from 'react';\r\nimport style from './profile.module.css'\r\nimport {MyPosts} from \"./myPosts/MyPosts\";\r\nimport {ProfileInfo} from \"./profileInfo/ProfileInfo\";\r\nimport {ProfilePageType} from \"../../redux/reducers/profilePage-reducer\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    profilePage: ProfilePageType\r\n    updateStatus: (title: string) => void\r\n    userId: string\r\n    paramsUserId: boolean\r\n    updatePhoto: (photo: any) => void\r\n    updateProfileData: (data: any) => void\r\n}\r\n\r\nexport const Profile: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const circleProgressStyle: CSSProperties = {\r\n        display: 'block',\r\n        position: \"absolute\",\r\n        top: '0',\r\n        left: '0',\r\n        bottom: '0',\r\n        right: '0',\r\n        margin: 'auto',\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.content}>\r\n            {props.profilePage.isFetching ?\r\n                <CircularProgress style={circleProgressStyle}/> : <>\r\n                    <ProfileInfo userProfile={props.profilePage.userProfile}\r\n                                 status={props.profilePage.profileStatus}\r\n                                 updateStatus={props.updateStatus}\r\n                                 userId={props.userId}\r\n                                 paramsUserId={props.paramsUserId}\r\n                                 updatePhoto={props.updatePhoto}\r\n                                 updateProfileData={props.updateProfileData}\r\n                    />\r\n                    <MyPosts posts={props.profilePage.posts}\r\n                             photo={props.profilePage.userProfile.photos?.large}/>\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n\r\n})","import {profileAPI} from \"../API/API\";\r\nimport {setIsFetching, setStatusProfile, setUserProfile, updatePhoto} from \"../redux/ActionCreators\";\r\nimport {Dispatch} from \"redux\";\r\nimport {errorHandler, serverErrorHandler} from \"../utils/errorHandlers\";\r\nimport {StateType, store} from \"../redux/redux-store\";\r\n\r\n\r\nexport const setUserProfileThunk = (userId: string) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setIsFetching(true))\r\n        profileAPI.setUserProfile(userId)\r\n            .then(res => {\r\n                dispatch(setUserProfile(res.data))\r\n                dispatch(setIsFetching(false))\r\n            })\r\n            .catch(err => {\r\n                serverErrorHandler(err, dispatch)\r\n            })\r\n    }\r\n};\r\nexport const setUserStatusThunk = (userId: string) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setIsFetching(true))\r\n        profileAPI.setStatusProfile(userId)\r\n            .then(res => {\r\n                dispatch(setStatusProfile(res.data))\r\n            })\r\n            .catch(err => {\r\n                serverErrorHandler(err, dispatch)\r\n            })\r\n    }\r\n};\r\nexport const updateUserStatusThunk = (title: string) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.updateStatusProfile(title)\r\n            .then(() => {\r\n                dispatch(setStatusProfile(title))\r\n            })\r\n            .catch(err => {\r\n                serverErrorHandler(err, dispatch)\r\n            })\r\n    }\r\n};\r\nexport const updateProfilePhotoThunk = (photo: any) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.updateProfilePhoto(photo)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updatePhoto(res.data.data.photos))\r\n                } else {\r\n                    errorHandler(res, dispatch)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                serverErrorHandler(err, dispatch)\r\n            })\r\n    }\r\n};\r\n\r\nexport const updateProfileDataThunk = (profileData: any) => {\r\n    debugger\r\n    return (dispatch: Dispatch<any>, getState: any) => {\r\n\r\n        let userId = getState().auth.id.toString()\r\n\r\n        profileAPI.updateProfileData(profileData)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setUserProfileThunk(userId))\r\n                } else {\r\n                    errorHandler(res, dispatch)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                serverErrorHandler(err, dispatch)\r\n            })\r\n    }\r\n};\r\n","import {createSelector} from 'reselect'\r\nimport {StateType} from \"../redux-store\";\r\nimport {ProfilePageType} from '../reducers/profilePage-reducer';\r\n\r\ntype GetProfilePageType = (state: StateType) => ProfilePageType\r\ntype GetUserIdType = (state: StateType) => number | null\r\n\r\n\r\n//profilePage\r\nconst getProfilePage: GetProfilePageType = (state) => state.profilePage\r\n\r\nexport const getProfilePageSelector = createSelector(getProfilePage, (profile) => {\r\n    return profile\r\n})\r\n\r\n\r\n//profilePage\r\nconst getUserId: GetUserIdType = (state) => state.auth.id\r\n\r\nexport const getUserIdSelector = createSelector(getUserId, (userId) => {\r\n    return userId\r\n})","import React, {ComponentType} from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {\r\n    setUserProfileThunk,\r\n    setUserStatusThunk,\r\n    updateProfileDataThunk,\r\n    updateProfilePhotoThunk,\r\n    updateUserStatusThunk\r\n} from \"../../thunks/profileThunk\";\r\nimport {authRedirectHOC} from '../../hoc/authRedirectHOC';\r\nimport {compose} from 'redux';\r\nimport {ProfilePageType} from '../../redux/reducers/profilePage-reducer';\r\nimport {getProfilePageSelector, getUserIdSelector} from '../../redux/selectors/ProfileSelectors';\r\n\r\ntype MstpType = {\r\n    profilePage: ProfilePageType\r\n    authUserId: number | null\r\n}\r\n\r\ntype MdtpType = {\r\n    setUserProfile: (userId: string) => void\r\n    setStatusProfile: (userId: string) => void\r\n    updateStatus: (title: string) => void\r\n    updatePhoto: (photo: any) => void\r\n    updateProfileData: (data: any) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & MdtpType & MstpType\r\n\r\nexport class ProfileContainer extends React.PureComponent<PropsType> {\r\n\r\n    rerenderProfile() {\r\n        let userId = this.props.match.params.userId;\r\n\r\n        if (!userId) {\r\n            if (this.props.authUserId !== null) {\r\n                userId = this.props.authUserId.toString();\r\n            } else {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n\r\n        this.props.setUserProfile(userId)\r\n        this.props.setStatusProfile(userId)\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.rerenderProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>): void {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.rerenderProfile()\r\n        }\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        return (\r\n            <Profile paramsUserId={!!this.props.match.params.userId}\r\n                     profilePage={this.props.profilePage}\r\n                     updateStatus={this.props.updateStatus}\r\n                     userId={this.props.match.params.userId}\r\n                     updatePhoto={this.props.updatePhoto}\r\n                     updateProfileData={this.props.updateProfileData}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MstpType => {\r\n    return {\r\n        profilePage: getProfilePageSelector(state),\r\n        authUserId: getUserIdSelector(state),\r\n    }\r\n}\r\n\r\nexport const ProfileContainerWithURL = compose<ComponentType<{}>>(\r\n    authRedirectHOC,\r\n    withRouter,\r\n    connect<MstpType, MdtpType, {}, StateType>(mapStateToProps, {\r\n        setUserProfile: setUserProfileThunk,\r\n        setStatusProfile: setUserStatusThunk,\r\n        updateStatus: updateUserStatusThunk,\r\n        updatePhoto: updateProfilePhotoThunk,\r\n        updateProfileData: updateProfileDataThunk,\r\n    }))(ProfileContainer)\r\n\r\n","import React, {useCallback} from 'react';\r\nimport style from './header.module.css'\r\nimport logo from '../../images/logo.png'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {Button} from '@material-ui/core';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\ntype PropsType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n    logOutProfile: () => void\r\n}\r\n\r\n\r\nexport const Header: React.FC<PropsType> = React.memo((props) => {\r\n\r\n        const logOut = useCallback(() => {\r\n            props.logOutProfile()\r\n        }, [props.logOutProfile])\r\n\r\n        return (\r\n            <div className={style.header}>\r\n                <div className={style.header__wrapper}>\r\n                    <div className={style.header__wrapper_img}>\r\n                        <img src={logo} alt=\"logo\"/>\r\n                    </div>\r\n                    <div className={style.header__authBlock}>\r\n                        {props.isAuth ?\r\n                            <div className={style.header__authBlock_login}>\r\n                                <span>{props.login}</span>\r\n                                <div className={style.header__logOutBtn}>\r\n                                    <Button variant=\"contained\" onClick={logOut}>\r\n                                        <ExitToAppIcon/>\r\n                                        LOG OUT\r\n                                    </Button>\r\n                                </div>\r\n                            </div> :\r\n                            <NavLink to={'/login'}>Sign In</NavLink>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n)","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../API/API\";\r\nimport {setAuthData, setAuthError, setCaptchaValue} from \"../redux/ActionCreators\";\r\nimport {errorHandler, serverErrorHandler} from \"../utils/errorHandlers\";\r\n\r\n\r\nexport const getCaptchaThunk = () => {\r\n\r\n    return (dispath: Dispatch) => {\r\n        authAPI.getCaptcha()\r\n            .then(res => {\r\n                    dispath(setCaptchaValue(res.data.url))\r\n                }\r\n            )\r\n    }\r\n};\r\n\r\nexport const authProfileThunk = () => {\r\n\r\n    return (dispath: Dispatch) => {\r\n        return authAPI.setAuth()\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispath(setAuthData(res.data.data))\r\n                } else {\r\n                    errorHandler(res, dispath)\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                serverErrorHandler(err, dispath)\r\n            })\r\n    }\r\n};\r\n\r\nexport const logInProfileThunk = (email: string, password: string, rememberMe: boolean, captcha?: string) => {\r\n\r\n    return (dispath: Dispatch<any>) => {\r\n        dispath(setAuthError(null))\r\n        authAPI.logIn(email, password, rememberMe, captcha)\r\n            .then(res => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispath(authProfileThunk())\r\n                    } else if (res.data.resultCode === 10) {\r\n                        dispath(getCaptchaThunk())\r\n                    } else {\r\n                        errorHandler(res, dispath)\r\n                    }\r\n                }\r\n            )\r\n            .catch(err => {\r\n                serverErrorHandler(err, dispath)\r\n            })\r\n\r\n    }\r\n};\r\n\r\nexport const logOutProfileThunk = () => {\r\n\r\n    return (dispath: Dispatch) => {\r\n        authAPI.logout()\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispath(setAuthData({email: null, login: null, id: null}))\r\n                } else {\r\n                    errorHandler(res, dispath)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                serverErrorHandler(err, dispath)\r\n            })\r\n\r\n    }\r\n}","import { createSelector } from 'reselect'\r\nimport {StateType} from \"../redux-store\";\r\n\r\ntype GetIsAuthType = (state: StateType) => boolean\r\ntype GetServerErrorType = (state: StateType) => string | null\r\ntype GetCaptchaType = (state: StateType) => any\r\n\r\n\r\n\r\n\r\n//isAuth\r\nconst getIsAuth:GetIsAuthType = (state) => state.auth.isAuth\r\n\r\nexport const getIsAuthSelector = createSelector(getIsAuth,(isAuth) => {\r\n        return isAuth\r\n})\r\n\r\n\r\n//serverError\r\nconst getServerError:GetServerErrorType = (state) => state.auth.error\r\n\r\nexport const getServerErrorSelector = createSelector(getServerError,(serverError) => {\r\n        return serverError\r\n})\r\n\r\n//getCaptcha\r\nconst getCaptcha:GetCaptchaType = (state) => state.auth.captcha\r\n\r\nexport const getCaptchaSelector = createSelector(getCaptcha,(captcha) => {\r\n        return captcha\r\n})","import { createSelector } from 'reselect'\r\nimport {StateType} from \"../redux-store\";\r\n\r\ntype GetLoginType = (state: StateType) => string | null\r\n\r\n\r\n\r\n\r\n//login\r\nconst getLogin:GetLoginType = (state) => state.auth.login\r\n\r\nexport const getLoginSelector = createSelector(getLogin,(login) => {\r\n        return login\r\n})\r\n\r\n\r\n","import React, {PureComponent} from 'react';\r\nimport {Header} from \"./Header\";\r\nimport {connect} from 'react-redux';\r\nimport {StateType} from '../../redux/redux-store';\r\nimport {logOutProfileThunk} from '../../thunks/authThunk';\r\nimport {getIsAuthSelector} from \"../../redux/selectors/LoginSelectors\";\r\nimport { getLoginSelector } from '../../redux/selectors/HeaderSelectors';\r\n\r\ntype MstpType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\ntype MdtpType = {\r\n    logOutProfile: () => void\r\n}\r\n\r\ntype PropsType = MstpType & MdtpType\r\n\r\nclass HeaderContainer extends PureComponent<PropsType> {\r\n\r\n    render(): React.ReactNode {\r\n        return <Header isAuth={this.props.isAuth}\r\n                       login={this.props.login}\r\n                       logOutProfile={this.props.logOutProfile}/>\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: StateType): MstpType => {\r\n    return {\r\n        isAuth: getIsAuthSelector(state),\r\n        login: getLoginSelector(state),\r\n    }\r\n}\r\n\r\n// ???\r\nexport default connect<MstpType, any , any, StateType>(mapStateToProps, {logOutProfile: logOutProfileThunk})(HeaderContainer)","import React from \"react\";\r\nimport s from \"./loginForm.module.css\";\r\nimport classes from \"./loginForm.module.css\";\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, Grid, TextField,} from \"@material-ui/core\";\r\nimport * as Yup from 'yup';\r\nimport {useFormik} from \"formik\";\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\ninterface IFormData {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n    error: string | null\r\n    captcha?: string\r\n    getCaptcha: () => void\r\n}\r\n\r\ntype InitialValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\n\r\nconst validationSchema = Yup.object({\r\n    email: Yup.string()\r\n        .email('Enter a valid email')\r\n        .required('Email is required'),\r\n    password: Yup.string()\r\n        .min(8, 'Minimum 8 characters length')\r\n        .max(20, 'Max 20 characters length')\r\n        .required('Password is required'),\r\n\r\n});\r\n\r\n\r\nexport const  LoginForm: React.FC<IFormData> = React.memo((props) => {\r\n\r\n    const {error, login, captcha} = props\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n            captcha: '',\r\n        },\r\n\r\n        validationSchema,\r\n        onSubmit: (values: InitialValuesType, {resetForm}) => {\r\n            login(values.email, values.password, values.rememberMe, values.captcha)\r\n            resetForm({values: '' || undefined})\r\n        },\r\n    });\r\n\r\n    const getCaptcha = () => {\r\n        props.getCaptcha()\r\n    }\r\n\r\n\r\n    return <>\r\n        <FormControl>\r\n            <FormGroup>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Grid container direction={\"column\"} spacing={2}>\r\n                        <Grid item>\r\n                            <div>\r\n                                <TextField name={'email'}\r\n                                           label={'email'}\r\n                                           variant=\"outlined\"\r\n                                           {...formik.getFieldProps('email')}\r\n                                           InputProps={{\r\n                                               classes: {\r\n                                                   root: classes.fieldErr,\r\n                                               }\r\n                                           }}\r\n                                />\r\n                            </div>\r\n                            {formik.errors.email && formik.touched.email ? (\r\n                                <div className={s.styleError}>{formik.errors.email}</div>) : null}\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <div>\r\n                                <TextField name={'password'}\r\n                                           label={'password'}\r\n                                           type=\"password\"\r\n                                           variant=\"outlined\"\r\n                                           {...formik.getFieldProps('password')}/>\r\n                            </div>\r\n                            {!formik.errors.password && error ? <div className={s.styleError}>{error}</div> : null}\r\n                            {formik.errors.password && formik.touched.password ? (\r\n                                <div className={s.styleError}>{formik.errors.password}</div>) : null}\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <div>\r\n                                <FormControlLabel\r\n                                    label={'Remember me'}\r\n                                    control={<Checkbox\r\n                                        name={'rememberMe'}\r\n                                        {...formik.getFieldProps('rememberMe')}\r\n                                    />}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        {\r\n                            captcha && <Grid item>\r\n                                <div className={s.captcha__content}>\r\n                                    <img src={captcha} alt=\"\"/>\r\n                                    <div className={s.captcha__content_img}>\r\n                                        <RefreshIcon style={{fontSize: 30}} onClick={getCaptcha}/>\r\n                                    </div>\r\n                                </div>\r\n                                <TextField name={'captcha'}\r\n                                           label={'captcha'}\r\n                                           {...formik.getFieldProps('captcha')}/>\r\n                            </Grid>\r\n                        }\r\n                        <Grid item>\r\n                            <div>\r\n                                <Button type={'submit'} variant=\"contained\">LOG IN</Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </FormGroup>\r\n        </FormControl>\r\n    </>\r\n})\r\n","import React, {useCallback} from \"react\";\r\nimport {LoginForm} from \"./LoginForm\";\r\nimport s from './login.module.css';\r\nimport {connect} from \"react-redux\";\r\nimport {getCaptchaThunk, logInProfileThunk} from \"../../thunks/authThunk\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getIsAuthSelector, getServerErrorSelector, getCaptchaSelector} from \"../../redux/selectors/LoginSelectors\";\r\n\r\n//for Login\r\ntype LoginPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n    isAuth: boolean\r\n    error: string | null\r\n    captcha?: string\r\n    getCaptcha: () => void\r\n}\r\n\r\n//for LoginContainer\r\ntype MapDispatchToPropsType = {\r\n    postLoginData: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n    getCaptcha: () => void\r\n}\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    error: string | null\r\n    captcha?: string\r\n}\r\ntype LoginContainerPropsType = {}\r\ntype CommonLoginContainerType = MapStateToPropsType & MapDispatchToPropsType & LoginContainerPropsType\r\n\r\n\r\nexport const Login: React.FC<LoginPropsType> = React.memo((props) => {\r\n\r\n    const getCaptcha = useCallback(() => {\r\n        props.getCaptcha()\r\n    }, [props.getCaptcha])\r\n\r\n    return (\r\n        <div className={s.login__content}>\r\n            <div className={s.login__content_inner_textHelper}>\r\n                <h4>You can enter and test features using those data:</h4>\r\n                <span>login:</span><b> vladby86@gmail.com</b><br/>\r\n                <span>password:</span><b> HardPassword_2020</b>\r\n            </div>\r\n            {(props.isAuth) ? <Redirect to={'/profile'}/> :\r\n                <div className={s.login__content_inner}>\r\n                    <h1>Login</h1>\r\n                    <LoginForm login={props.login}\r\n                               error={props.error}\r\n                               captcha={props.captcha}\r\n                               getCaptcha={getCaptcha}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nconst LoginContainer: React.FC<CommonLoginContainerType> = React.memo((props) => {\r\n\r\n    const postLogin = useCallback((email: string, password: string, rememberMe: boolean, captcha: string) => {\r\n        props.postLoginData(email, password, rememberMe, captcha)\r\n    }, [props])\r\n\r\n    return <Login login={postLogin}\r\n                  isAuth={props.isAuth}\r\n                  error={props.error}\r\n                  captcha={props.captcha}\r\n                  getCaptcha={props.getCaptcha}/>\r\n})\r\n\r\n\r\nconst mapStateToProps = (state: StateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: getIsAuthSelector(state),\r\n        error: getServerErrorSelector(state),\r\n        captcha: getCaptchaSelector(state),\r\n    }\r\n}\r\n\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, LoginContainerPropsType, StateType>(mapStateToProps, {\r\n    postLoginData: logInProfileThunk,\r\n    getCaptcha: getCaptchaThunk,\r\n})(LoginContainer)\r\n","import React from \"react\";\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {setError} from \"../../redux/ActionCreators\";\r\n\r\ntype SnackBarPropsType = {}\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nexport const SnackBar: React.FC<SnackBarPropsType> = (props) => {\r\n\r\n    const error = useSelector<StateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        dispatch(setError(null));\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\">\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}","import React from \"react\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport s from \"../app.module.css\";\r\n\r\n\r\nexport function withSuspenseHOC(Component: any) {\r\n    return <React.Suspense fallback={<CircularProgress className={s.circleProgress}/>}>\r\n        < Component/>\r\n    </React.Suspense>\r\n}","import React, {useEffect} from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport s from './app.module.css'\r\nimport {Nav} from './Components/nav/Nav';\r\nimport {News} from \"./Components/news/News\";\r\nimport {Settings} from './Components/settings/Settings';\r\nimport {ActionCreatorsType} from \"./redux/ActionCreators\";\r\nimport {ProfileContainerWithURL} from \"./Components/profile/ProfileContainer\";\r\nimport HeaderContainer from \"./Components/header/HeaderContainer\";\r\nimport LoginContainer from \"./Components/login/Login\";\r\nimport {initializedAppThunk} from './thunks/appThunk';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StateType} from \"./redux/redux-store\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport {SnackBar} from \"./Components/common/SnackBar\";\r\nimport {withSuspenseHOC} from \"./hoc/withSuspenseHOC\";\r\n\r\ntype propsType = {\r\n    state: StateType\r\n    dispatch: (action: ActionCreatorsType) => void\r\n}\r\n\r\nconst DialogContainer = React.lazy(() => import('./Components/dialogs/DialogContainer')\r\n    .then(({DialogContainer}) => ({default: DialogContainer})));\r\nconst UsersContainer = React.lazy(() => import('./Components/users/UsersContainer'));\r\n\r\nconst App: React.FC<propsType> = React.memo((props) => {\r\n\r\n    const isInitialized = useSelector<StateType, boolean>(state => state.app.isInitialized);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(initializedAppThunk())\r\n    }, []);\r\n\r\n\r\n    if (!isInitialized) {\r\n        return <CircularProgress className={s.circleProgress}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.app__wrapper}>\r\n            <HeaderContainer/>\r\n            <Nav navPage={props.state.navPage}/>\r\n            <div className={s.app__wrapper_content}>\r\n                <Route path={'/profile/:userId?'} render={() => <ProfileContainerWithURL/>}/>\r\n                <Route path={'/dialogs'} render={() => withSuspenseHOC(DialogContainer)}/>\r\n                <Route path={'/users'} render={() => withSuspenseHOC(UsersContainer)}/>\r\n                <Route path={'/news'} render={() => <News/>}/>\r\n                <Route path={'/settings'} render={() => <Settings/>}/>\r\n                <Route path={'/login'} render={() => <LoginContainer/>}/>\r\n                <SnackBar/>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n","import {authProfileThunk} from \"./authThunk\";\r\nimport {initializedApp} from \"../redux/ActionCreators\";\r\n\r\n\r\nexport const initializedAppThunk: any = () => {\r\n\r\n    return (dispath: any) => {\r\n        const promise = dispath(authProfileThunk())\r\n        promise\r\n            .then(() => {\r\n                return\r\n            })\r\n            .finally(() => {\r\n                dispath(initializedApp())\r\n            })\r\n    }\r\n};\r\n\r\n","import {ActionCreatorsType, typeOfActionDispatch} from \"../ActionCreators\";\r\nimport {v4 as uuid} from 'uuid';\r\n\r\nexport type ProfilePostsType = {\r\n    id: string,\r\n    message: string\r\n}\r\n\r\nexport type SocialContactsType = {\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    github: string\r\n    youtube: string\r\n    mainLink: string\r\n\r\n}\r\n\r\nexport type PhotoUserType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\n\r\nexport type CommonDataProfileType = {\r\n    aboutMe: string | null\r\n    contacts: SocialContactsType\r\n    fullName: string | null\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    photos: PhotoUserType | null\r\n    userId: number\r\n}\r\n\r\nexport type ProfilePageType = typeof initialState\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {id: uuid(), message: \"Hey girls\"},\r\n        {id: uuid(), message: \"Hey guys\"}\r\n    ] as Array<ProfilePostsType>,\r\n    userProfile: {} as CommonDataProfileType,\r\n    isFetching: false,\r\n    profileStatus: '',\r\n};\r\n\r\n\r\nexport const profilePageReducer = (state: ProfilePageType = initialState, action: ActionCreatorsType): ProfilePageType => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.ADD_POST:\r\n            let newPostValue = action.value\r\n            let newPost = {id: uuid(), message: newPostValue};\r\n\r\n            state = {...state, posts: [...state.posts, newPost]};\r\n            return state;\r\n        case typeOfActionDispatch.SET_USER_PROFILE:\r\n            return {...state, userProfile: action.userProfile};\r\n        case typeOfActionDispatch.SET_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching};\r\n\r\n        case typeOfActionDispatch.SET_STATUS_PROFILE:\r\n            return {...state, profileStatus: action.statusProfile};\r\n\r\n        case typeOfActionDispatch.UPDATE_PHOTO:\r\n            return {...state, userProfile: {...state.userProfile, photos: action.photo}};\r\n\r\n        default:\r\n            return state\r\n    }\r\n};","import {ActionCreatorsType, typeOfActionDispatch} from \"../ActionCreators\";\r\nimport {v4 as uuid} from 'uuid';\r\n\r\n\r\nexport type DialogsNamesType = {\r\n    id: string,\r\n    name: string,\r\n    path: string\r\n}\r\n\r\nexport type DialogsMessagesType = {\r\n    id: string,\r\n    message: string\r\n}\r\n\r\nexport type DialogsPageType = typeof initialState\r\n\r\nconst initialState = {\r\n    names: [\r\n        {id: uuid(), name: 'Marat', path: '/dialogs/1'},\r\n        {id: uuid(), name: 'Anton', path: '/dialogs/2'},\r\n        {id: uuid(), name: 'Arkasha', path: '/dialogs/3'},\r\n        {id: uuid(), name: 'Tolik', path: '/dialogs/4'},\r\n    ] as DialogsNamesType[],\r\n    messages: [\r\n        {id: uuid(), message: 'Hey man!'},\r\n        {id: uuid(), message: 'How is it going?'},\r\n        {id: uuid(), message: 'You forgot about my birthday(('},\r\n        {id: uuid(), message: 'I want to break up with you, sorry'},\r\n    ] as DialogsMessagesType[]\r\n};\r\n\r\nexport const dialogsPageReducer = (state: DialogsPageType = initialState, action: ActionCreatorsType): DialogsPageType => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.ADD_MESSAGE:\r\n            let message = action.message;\r\n            let newMessage = {id: uuid(), message};\r\n            state = {...state, messages: [...state.messages, newMessage]};\r\n            return state;\r\n\r\n        default:\r\n            return state\r\n    }\r\n};","import {ActionCreatorsType} from \"../ActionCreators\";\r\nimport {v4 as id} from 'uuid';\r\n\r\n\r\nexport type NavTitlesType = {\r\n    id: string\r\n    title: string\r\n    path: string\r\n}\r\n\r\nexport type FriendsNavType = {\r\n    id: string\r\n    name: string\r\n    pathToDialog: string\r\n    isOnline: boolean\r\n}\r\n\r\nexport type NavPageType = typeof initialState\r\n\r\n\r\nconst initialState = {\r\n    navTitles: [\r\n        {id: id(), title: 'Profile', path: '/profile'},\r\n        {id: id(), title: 'Dialogs', path: '/dialogs'},\r\n        {id: id(), title: 'Users', path: '/users'},\r\n        {id: id(), title: 'News', path: '/news'},\r\n        {id: id(), title: 'Settings', path: '/settings'}\r\n    ] as NavTitlesType[],\r\n    friends: [\r\n        {id: id(), name: 'Marat', pathToDialog: '/dialogs/1', isOnline: true},\r\n        {id: id(), name: 'Anton', pathToDialog: '/dialogs/2', isOnline: false},\r\n        {id: id(), name: 'Arkasha', pathToDialog: '/dialogs/3', isOnline: true},\r\n        {id: id(), name: 'Tolik', pathToDialog: '/dialogs/4', isOnline: false}\r\n    ] as FriendsNavType[]\r\n};\r\n\r\nexport const navPageReducer = (state:NavPageType = initialState, action:ActionCreatorsType):NavPageType => {\r\n    return {...state}\r\n}","import {ActionCreatorsType, typeOfActionDispatch} from \"../ActionCreators\";\r\nimport {PhotoUserType} from \"./profilePage-reducer\";\r\n\r\n\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string | null\r\n    photos: PhotoUserType\r\n    status: string | null\r\n    followed: boolean\r\n}\r\n\r\nexport type UsersStateType = typeof initialUsersState\r\n\r\nconst initialUsersState = {\r\n    users: [] as UserType[],\r\n    totalUsersCount: 0,\r\n    pageSize: 100,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    isFollowingInProgress: [] as number[],\r\n};\r\n\r\nexport const usersReducer = (state:UsersStateType = initialUsersState, action:ActionCreatorsType): UsersStateType => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.FOLLOW_TO_USER:\r\n            return {...state, users: state.users.map(u => (u.id === action.userId) ? {...u, followed: true} : u)};\r\n\r\n        case typeOfActionDispatch.UNFOLLOW_TO_USER:\r\n            return {...state, users: state.users.map(u => (u.id === action.userId) ? {...u, followed: false} : u)};\r\n\r\n        case typeOfActionDispatch.SET_USERS:\r\n            return {...state, users: [...action.users]};\r\n\r\n        case typeOfActionDispatch.SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.totalUsersCount};\r\n\r\n        case typeOfActionDispatch.SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage};\r\n\r\n        case typeOfActionDispatch.SET_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching};\r\n\r\n        case typeOfActionDispatch.SET_FOLLOWING_IN_PROGRESS:\r\n            return {\r\n                ...state, isFollowingInProgress: action.isFollowingProgress ?\r\n                    [...state.isFollowingInProgress, action.userId] :\r\n                    [...state.isFollowingInProgress.filter(id => id !== action.userId)]\r\n            };\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import {ActionCreatorsType, typeOfActionDispatch} from \"../ActionCreators\"\r\n\r\n\r\n//typization for reducer\r\nexport type AuthDataType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    captcha?: string\r\n}\r\n\r\nexport interface IAuthData extends AuthDataType{\r\n    isAuth: boolean\r\n    error: string | null\r\n}\r\n\r\nconst initialAuthState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    captcha: '',\r\n    isAuth: false,\r\n    error: null,\r\n};\r\n\r\nexport const authReducer = (state:IAuthData = initialAuthState, action: ActionCreatorsType):IAuthData => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.SET_AUTH_DATA:\r\n\r\n            let copyState = {...state, ...action.authData}\r\n            let isAuth = (copyState.login) ? true : false\r\n            return {...copyState, isAuth}\r\n\r\n        case typeOfActionDispatch.SET_AUTH_ERROR:\r\n\r\n            return {...state, error: (action.error) ? action.error : null}\r\n\r\n        case typeOfActionDispatch.SET_CAPTCHA_VALUE:\r\n            return {...state, captcha: action.captcha}\r\n\r\n        default:\r\n            return state\r\n    }\r\n};","import {ActionCreatorsType, typeOfActionDispatch} from \"../ActionCreators\"\r\n\r\n\r\nexport type InitialAppStateType = {\r\n    isInitialized: boolean,\r\n    error: null | string,\r\n}\r\n\r\nconst initialAppState = {\r\n    isInitialized: false,\r\n    error: null,\r\n}\r\n\r\nexport const appReducer = (state: InitialAppStateType = initialAppState, action: ActionCreatorsType): InitialAppStateType => {\r\n    switch (action.type) {\r\n        case typeOfActionDispatch.INITIALIZED_APP:\r\n            return {...state, isInitialized: true};\r\n        case typeOfActionDispatch.SET_ERROR:\r\n            return {...state, error: action.error};\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore, compose} from \"redux\";\r\nimport {profilePageReducer, ProfilePageType} from \"./reducers/profilePage-reducer\";\r\nimport {dialogsPageReducer, DialogsPageType} from \"./reducers/dialogsPage-reducer\";\r\nimport {navPageReducer, NavPageType} from \"./reducers/navPage-reducer\";\r\nimport {usersReducer, UsersStateType} from \"./reducers/usersPage-reducer\";\r\nimport {authReducer, IAuthData} from \"./reducers/auth-reducer\";\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer, InitialAppStateType} from \"./reducers/app-reducer\";\r\n\r\n\r\nexport type StateType = {\r\n    profilePage: ProfilePageType\r\n    dialogsPage: DialogsPageType\r\n    navPage: NavPageType\r\n    usersPage: UsersStateType\r\n    auth: IAuthData\r\n    app: InitialAppStateType\r\n}\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profilePageReducer,\r\n    dialogsPage: dialogsPageReducer,\r\n    navPage: navPageReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n});\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(reducers, composeEnhancers(\r\n    applyMiddleware(thunk)\r\n));\r\n\r\n// export let store = createStore(reducers, applyMiddleware(thunk))\r\n","import React from 'react';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport ReactDOM from \"react-dom\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport {store, StateType} from \"./redux/redux-store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nexport type renderAppTreeType = (state: StateType) => void\r\n\r\n\r\nexport const renderAppTree: renderAppTreeType = (state: StateType) => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <HashRouter>\r\n                <Provider store={store}>\r\n                    <App state={state}\r\n                         dispatch={store.dispatch.bind(store)}/>\r\n                </Provider>\r\n            </HashRouter>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n};\r\n\r\nrenderAppTree(store.getState());\r\n\r\nstore.subscribe(() => renderAppTree(store.getState()));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import {setError} from \"../redux/ActionCreators\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const serverErrorHandler = (err: any, dispath: Dispatch<ReturnType<typeof setError>>) => {\r\n    if (err.message) {\r\n        dispath(setError(err.message))\r\n    } else {\r\n        dispath(setError('undefined network error'))\r\n    }\r\n};\r\n\r\nexport const errorHandler = (res: any, dispath: Dispatch<ReturnType<typeof setError>>) => {\r\n    if (res.data.messages.length) {\r\n        dispath(setError(res.data.messages[0]))\r\n    } else {\r\n        dispath(setError(\"some error\"))\r\n    }\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav__friendsBlock_item\":\"friendsBlock_nav__friendsBlock_item__22hEe\",\"nav__friendsBlock_item_img\":\"friendsBlock_nav__friendsBlock_item_img__fQY5A\",\"nav__friendsBlock_item_name\":\"friendsBlock_nav__friendsBlock_item_name__1TGRU\",\"nav__friendsBlock_item_onlineStatus\":\"friendsBlock_nav__friendsBlock_item_onlineStatus__QYJgV\"};","import axios from 'axios';\r\nimport {UserType} from \"../redux/reducers/usersPage-reducer\";\r\nimport {CommonDataProfileType} from \"../redux/reducers/profilePage-reducer\";\r\nimport {AuthDataType} from \"../redux/reducers/auth-reducer\";\r\n\r\n\r\n//for getting users for UsersPage\r\nexport type CommonDataUsersType<D = {}> = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: D\r\n}\r\n\r\n\r\nexport type CommonResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    fieldsErrors: string[]\r\n    data: D\r\n}\r\n\r\nexport type UpdatePhotoType = {\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": '959808d3-8efe-42bd-88eb-3693675e6c98'\r\n    }\r\n})\r\n\r\n\r\nexport const userAPI = {\r\n    setUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<CommonDataUsersType<UserType[]>>(`users?page=${currentPage}&count=${pageSize}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete<CommonResponseType<{}>>(`follow/${userId}`)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<CommonResponseType<{}>>(`follow/${userId}`)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    setAuth() {\r\n        return instance.get<CommonResponseType<AuthDataType>>('auth/me')\r\n    },\r\n    logIn(email: string, password: string, rememberMe: boolean, captcha?: string) {\r\n        return instance.post<CommonResponseType<{ userId: number }>>('auth/login', {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        })\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonResponseType<{}>>('auth/login')\r\n    },\r\n    getCaptcha() {\r\n        return instance.get<{ url: string }>(`/security/get-captcha-url`)\r\n    },\r\n\r\n}\r\n\r\nexport const profileAPI = {\r\n\r\n    setUserProfile(userId: string) {\r\n        return instance.get<CommonDataProfileType>(`profile/${userId}`)\r\n    },\r\n    setStatusProfile(userId: string) {\r\n        return instance.get<string>(`profile/status/${userId}`)\r\n    },\r\n    updateStatusProfile(status: string) {\r\n        return instance.put<string>(`profile/status`, {status})\r\n    },\r\n    updateProfilePhoto(photo: File) {\r\n        let data = new FormData()\r\n        data.append(\"image\", photo)\r\n        return instance.put<CommonResponseType<UpdatePhotoType>>(`profile/photo`, data, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    updateProfileData(profileData: any) {\r\n        return instance.put<CommonResponseType<any>>(`profile`, profileData)\r\n    },\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"captcha__content\":\"loginForm_captcha__content__3Pg_c\",\"captcha__content_img\":\"loginForm_captcha__content_img__2D3af\",\"styleError\":\"loginForm_styleError__rOP6O\"};","import {AuthDataType} from \"./reducers/auth-reducer\";\r\nimport {UserType} from \"./reducers/usersPage-reducer\";\r\nimport {CommonDataProfileType} from \"./reducers/profilePage-reducer\";\r\n\r\nexport enum typeOfActionDispatch {\r\n    ADD_MESSAGE = \"DIALOG/ADD_MESSAGE\",\r\n    ADD_POST = \"PROFILE/ADD_POST\",\r\n    FOLLOW_TO_USER = \"USERS/FOLLOW_TO_USER\",\r\n    UNFOLLOW_TO_USER = \"USERS/UNFOLLOW_TO_USER\",\r\n    SET_USERS = \"USERS/SET_USERS\",\r\n    SET_TOTAL_USERS_COUNT = \"USERS/SET_TOTAL_USERS_COUNT\",\r\n    SET_CURRENT_PAGE = \"USERS/SET_CURRENT_PAGE\",\r\n    SET_IS_FETCHING = \"SET_IS_FETCHING\",\r\n    SET_USER_PROFILE = \"PROFILE/SET_USER_PROFILE\",\r\n    SET_AUTH_DATA = \"AUTH/SET_AUTH_DATA\",\r\n    SET_FOLLOWING_IN_PROGRESS = \"USERS/SET_FOLLOWING_IN_PROGRESS\",\r\n    SET_STATUS_PROFILE = \"PROFILE/SET_STATUS_PROFILE\",\r\n    SET_AUTH_ERROR = \"AUTH/SET_AUTH_ERROR\",\r\n    SET_CAPTCHA_VALUE = \"AUTH/SET_CAPTCHA_VALUE\",\r\n    INITIALIZED_APP = \"APP/INITIALIZED_APP\",\r\n    SET_ERROR = \"APP/SET_ERROR\",\r\n    UPDATE_PHOTO = \"PROFILE/UPDATE_PHOTO\",\r\n}\r\n\r\nexport type ActionCreatorsType = ReturnType<typeof addPost> |\r\n    ReturnType<typeof addMessage> |\r\n    ReturnType<typeof follow> |\r\n    ReturnType<typeof unfollow> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setTotalUsersCount> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setIsFetching> |\r\n    ReturnType<typeof setUserProfile> |\r\n    ReturnType<typeof setAuthData> |\r\n    ReturnType<typeof setFollowingInProgress> |\r\n    ReturnType<typeof setStatusProfile> |\r\n    ReturnType<typeof setAuthError> |\r\n    ReturnType<typeof setCaptchaValue> |\r\n    ReturnType<typeof initializedApp> |\r\n    ReturnType<typeof setError> |\r\n    ReturnType<typeof updatePhoto>\r\n\r\n//actionCreators\r\nexport const addPost = (value: string) => {\r\n    return {\r\n        type: typeOfActionDispatch.ADD_POST,\r\n        value\r\n    } as const\r\n};\r\nexport const addMessage = (newMessage: string) => {\r\n    return (\r\n        {type: typeOfActionDispatch.ADD_MESSAGE, message: newMessage}\r\n    ) as const\r\n};\r\nexport const follow = (userId: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.FOLLOW_TO_USER, userId}\r\n    ) as const\r\n};\r\nexport const unfollow = (userId: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.UNFOLLOW_TO_USER, userId}\r\n    ) as const\r\n};\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_USERS, users}\r\n    ) as const\r\n};\r\nexport const setTotalUsersCount = (totalUsersCount: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_TOTAL_USERS_COUNT, totalUsersCount}\r\n    ) as const\r\n};\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_CURRENT_PAGE, currentPage}\r\n    ) as const\r\n};\r\nexport const setIsFetching = (isFetching: boolean) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_IS_FETCHING, isFetching}\r\n    ) as const\r\n};\r\nexport const setUserProfile = (userProfile: CommonDataProfileType) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_USER_PROFILE, userProfile}\r\n    ) as const\r\n};\r\nexport const setAuthData = (authData: AuthDataType) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_AUTH_DATA, authData}\r\n    ) as const\r\n};\r\nexport const setFollowingInProgress = (isFollowingProgress: boolean, userId: number) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_FOLLOWING_IN_PROGRESS, isFollowingProgress, userId}\r\n    ) as const\r\n};\r\nexport const setStatusProfile = (statusProfile: string) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_STATUS_PROFILE, statusProfile}\r\n    ) as const\r\n}\r\nexport const setAuthError = (error: string | null) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_AUTH_ERROR, error}\r\n    ) as const\r\n};\r\nexport const setCaptchaValue = (captcha: string) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_CAPTCHA_VALUE, captcha}\r\n    ) as const\r\n};\r\nexport const initializedApp = () => {\r\n    return (\r\n        {type: typeOfActionDispatch.INITIALIZED_APP}\r\n    ) as const\r\n};\r\nexport const setError = (error: string | null) => {\r\n    return (\r\n        {type: typeOfActionDispatch.SET_ERROR, error}\r\n    ) as const\r\n};\r\nexport const updatePhoto = (photo: any) => {\r\n    return (\r\n        {type: typeOfActionDispatch.UPDATE_PHOTO, photo}\r\n    ) as const\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__28bqR\",\"header__wrapper\":\"header_header__wrapper__1rCLi\",\"header__wrapper_img\":\"header_header__wrapper_img__3B4XV\",\"header__authBlock\":\"header_header__authBlock__3SaVn\",\"header__authBlock_login\":\"header_header__authBlock_login__3iRv5\",\"header__logOutBtn\":\"header_header__logOutBtn__1lZF5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app__wrapper\":\"app_app__wrapper__3zjyW\",\"app__wrapper_content\":\"app_app__wrapper_content__30D5Q\",\"circleProgress\":\"app_circleProgress__2rhjH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"newPost_content__2nJOh\",\"content__textArea\":\"newPost_content__textArea__2sjje\",\"content__button\":\"newPost_content__button__3yZ3B\"};"],"sourceRoot":""}